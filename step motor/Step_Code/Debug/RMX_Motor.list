
RMX_Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac24  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800adfc  0800adfc  0000bdfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae3c  0800ae3c  0000c038  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae3c  0800ae3c  0000be3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae44  0800ae44  0000c038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae44  0800ae44  0000be44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae48  0800ae48  0000be48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000038  20000000  0800ae4c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007bc  20000038  0800ae84  0000c038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007f4  0800ae84  0000c7f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c038  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020dff  00000000  00000000  0000c068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ce4  00000000  00000000  0002ce67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001988  00000000  00000000  00030b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013da  00000000  00000000  000324d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000522f  00000000  00000000  000338b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002168d  00000000  00000000  00038ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001178f1  00000000  00000000  0005a16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00171a5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e14  00000000  00000000  00171aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001788b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000038 	.word	0x20000038
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ade4 	.word	0x0800ade4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000003c 	.word	0x2000003c
 8000214:	0800ade4 	.word	0x0800ade4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b96a 	b.w	8000d80 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	460c      	mov	r4, r1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d14e      	bne.n	8000b6e <__udivmoddi4+0xaa>
 8000ad0:	4694      	mov	ip, r2
 8000ad2:	458c      	cmp	ip, r1
 8000ad4:	4686      	mov	lr, r0
 8000ad6:	fab2 f282 	clz	r2, r2
 8000ada:	d962      	bls.n	8000ba2 <__udivmoddi4+0xde>
 8000adc:	b14a      	cbz	r2, 8000af2 <__udivmoddi4+0x2e>
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	4091      	lsls	r1, r2
 8000ae4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aec:	4319      	orrs	r1, r3
 8000aee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000af2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af6:	fa1f f68c 	uxth.w	r6, ip
 8000afa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000afe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b02:	fb07 1114 	mls	r1, r7, r4, r1
 8000b06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0a:	fb04 f106 	mul.w	r1, r4, r6
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x64>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b1a:	f080 8112 	bcs.w	8000d42 <__udivmoddi4+0x27e>
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	f240 810f 	bls.w	8000d42 <__udivmoddi4+0x27e>
 8000b24:	3c02      	subs	r4, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a59      	subs	r1, r3, r1
 8000b2a:	fa1f f38e 	uxth.w	r3, lr
 8000b2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b32:	fb07 1110 	mls	r1, r7, r0, r1
 8000b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3a:	fb00 f606 	mul.w	r6, r0, r6
 8000b3e:	429e      	cmp	r6, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x94>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b4a:	f080 80fc 	bcs.w	8000d46 <__udivmoddi4+0x282>
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	f240 80f9 	bls.w	8000d46 <__udivmoddi4+0x282>
 8000b54:	4463      	add	r3, ip
 8000b56:	3802      	subs	r0, #2
 8000b58:	1b9b      	subs	r3, r3, r6
 8000b5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b5e:	2100      	movs	r1, #0
 8000b60:	b11d      	cbz	r5, 8000b6a <__udivmoddi4+0xa6>
 8000b62:	40d3      	lsrs	r3, r2
 8000b64:	2200      	movs	r2, #0
 8000b66:	e9c5 3200 	strd	r3, r2, [r5]
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d905      	bls.n	8000b7e <__udivmoddi4+0xba>
 8000b72:	b10d      	cbz	r5, 8000b78 <__udivmoddi4+0xb4>
 8000b74:	e9c5 0100 	strd	r0, r1, [r5]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e7f5      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000b7e:	fab3 f183 	clz	r1, r3
 8000b82:	2900      	cmp	r1, #0
 8000b84:	d146      	bne.n	8000c14 <__udivmoddi4+0x150>
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xcc>
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	f0c0 80f0 	bcc.w	8000d70 <__udivmoddi4+0x2ac>
 8000b90:	1a86      	subs	r6, r0, r2
 8000b92:	eb64 0303 	sbc.w	r3, r4, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	2d00      	cmp	r5, #0
 8000b9a:	d0e6      	beq.n	8000b6a <__udivmoddi4+0xa6>
 8000b9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba0:	e7e3      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	f040 8090 	bne.w	8000cc8 <__udivmoddi4+0x204>
 8000ba8:	eba1 040c 	sub.w	r4, r1, ip
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	fa1f f78c 	uxth.w	r7, ip
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb08 4416 	mls	r4, r8, r6, r4
 8000bc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bc6:	fb07 f006 	mul.w	r0, r7, r6
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x11c>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x11a>
 8000bd8:	4298      	cmp	r0, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2b4>
 8000bde:	4626      	mov	r6, r4
 8000be0:	1a1c      	subs	r4, r3, r0
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bea:	fb08 4410 	mls	r4, r8, r0, r4
 8000bee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf2:	fb00 f707 	mul.w	r7, r0, r7
 8000bf6:	429f      	cmp	r7, r3
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0x148>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x146>
 8000c04:	429f      	cmp	r7, r3
 8000c06:	f200 80b0 	bhi.w	8000d6a <__udivmoddi4+0x2a6>
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	1bdb      	subs	r3, r3, r7
 8000c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c12:	e7a5      	b.n	8000b60 <__udivmoddi4+0x9c>
 8000c14:	f1c1 0620 	rsb	r6, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c24:	fa04 f301 	lsl.w	r3, r4, r1
 8000c28:	ea43 030c 	orr.w	r3, r3, ip
 8000c2c:	40f4      	lsrs	r4, r6
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	0c38      	lsrs	r0, r7, #16
 8000c34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c38:	fbb4 fef0 	udiv	lr, r4, r0
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fb00 441e 	mls	r4, r0, lr, r4
 8000c44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c48:	fb0e f90c 	mul.w	r9, lr, ip
 8000c4c:	45a1      	cmp	r9, r4
 8000c4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x1a6>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c5a:	f080 8084 	bcs.w	8000d66 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8081 	bls.w	8000d66 <__udivmoddi4+0x2a2>
 8000c64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	eba4 0409 	sub.w	r4, r4, r9
 8000c6e:	fa1f f983 	uxth.w	r9, r3
 8000c72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c76:	fb00 4413 	mls	r4, r0, r3, r4
 8000c7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c82:	45a4      	cmp	ip, r4
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0x1d2>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c8c:	d267      	bcs.n	8000d5e <__udivmoddi4+0x29a>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0x29a>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	443c      	add	r4, r7
 8000c96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	d351      	bcc.n	8000d4e <__udivmoddi4+0x28a>
 8000caa:	d04e      	beq.n	8000d4a <__udivmoddi4+0x286>
 8000cac:	b155      	cbz	r5, 8000cc4 <__udivmoddi4+0x200>
 8000cae:	ebb8 030e 	subs.w	r3, r8, lr
 8000cb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cba:	40cb      	lsrs	r3, r1
 8000cbc:	431e      	orrs	r6, r3
 8000cbe:	40cc      	lsrs	r4, r1
 8000cc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e750      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd8:	4094      	lsls	r4, r2
 8000cda:	430c      	orrs	r4, r1
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf0:	0c23      	lsrs	r3, r4, #16
 8000cf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf6:	fb00 f107 	mul.w	r1, r0, r7
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x24c>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d06:	d22c      	bcs.n	8000d62 <__udivmoddi4+0x29e>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d92a      	bls.n	8000d62 <__udivmoddi4+0x29e>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d18:	fb08 3311 	mls	r3, r8, r1, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb01 f307 	mul.w	r3, r1, r7
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x276>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d30:	d213      	bcs.n	8000d5a <__udivmoddi4+0x296>
 8000d32:	42a3      	cmp	r3, r4
 8000d34:	d911      	bls.n	8000d5a <__udivmoddi4+0x296>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4464      	add	r4, ip
 8000d3a:	1ae4      	subs	r4, r4, r3
 8000d3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d40:	e739      	b.n	8000bb6 <__udivmoddi4+0xf2>
 8000d42:	4604      	mov	r4, r0
 8000d44:	e6f0      	b.n	8000b28 <__udivmoddi4+0x64>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e706      	b.n	8000b58 <__udivmoddi4+0x94>
 8000d4a:	45c8      	cmp	r8, r9
 8000d4c:	d2ae      	bcs.n	8000cac <__udivmoddi4+0x1e8>
 8000d4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d56:	3801      	subs	r0, #1
 8000d58:	e7a8      	b.n	8000cac <__udivmoddi4+0x1e8>
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	e7ed      	b.n	8000d3a <__udivmoddi4+0x276>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	e799      	b.n	8000c96 <__udivmoddi4+0x1d2>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e7d4      	b.n	8000d10 <__udivmoddi4+0x24c>
 8000d66:	46d6      	mov	lr, sl
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1a6>
 8000d6a:	4463      	add	r3, ip
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	e74d      	b.n	8000c0c <__udivmoddi4+0x148>
 8000d70:	4606      	mov	r6, r0
 8000d72:	4623      	mov	r3, r4
 8000d74:	4608      	mov	r0, r1
 8000d76:	e70f      	b.n	8000b98 <__udivmoddi4+0xd4>
 8000d78:	3e02      	subs	r6, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	e730      	b.n	8000be0 <__udivmoddi4+0x11c>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d8e:	60b8      	str	r0, [r7, #8]
 8000d90:	6079      	str	r1, [r7, #4]
  if (_u > _upper_limit) return _upper_limit;
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	ee07 3a90 	vmov	s15, r3
 8000d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d9c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000da0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da8:	dd01      	ble.n	8000dae <PWM_Satuation+0x2a>
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	e013      	b.n	8000dd6 <PWM_Satuation+0x52>
  else if (_u < _lower_limit) return _lower_limit;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	ee07 3a90 	vmov	s15, r3
 8000db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000db8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000dbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc4:	d501      	bpl.n	8000dca <PWM_Satuation+0x46>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	e005      	b.n	8000dd6 <PWM_Satuation+0x52>
  return (int32_t)_u;
 8000dca:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dd2:	ee17 3a90 	vmov	r3, s15
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 8000de2:	b480      	push	{r7}
 8000de4:	b087      	sub	sp, #28
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6178      	str	r0, [r7, #20]
 8000dea:	ed87 0a04 	vstr	s0, [r7, #16]
 8000dee:	edc7 0a03 	vstr	s1, [r7, #12]
 8000df2:	ed87 1a02 	vstr	s2, [r7, #8]
 8000df6:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	68ba      	ldr	r2, [r7, #8]
 8000e0a:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	f04f 0200 	mov.w	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	f04f 0200 	mov.w	r2, #0
 8000e20:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	f04f 0200 	mov.w	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]

}
 8000e2a:	bf00      	nop
 8000e2c:	371c      	adds	r7, #28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
 8000e3e:	ed87 0a00 	vstr	s0, [r7]
    if (!((controller->u >= controller->u_max && ek > 0) || (controller->u <= -controller->u_max && ek < 0))) {
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	ed93 7a06 	vldr	s14, [r3, #24]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e56:	bfac      	ite	ge
 8000e58:	2301      	movge	r3, #1
 8000e5a:	2300      	movlt	r3, #0
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	f083 0301 	eor.w	r3, r3, #1
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d10e      	bne.n	8000e86 <PID_CONTROLLER_Compute+0x50>
 8000e68:	edd7 7a00 	vldr	s15, [r7]
 8000e6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e74:	bfcc      	ite	gt
 8000e76:	2301      	movgt	r3, #1
 8000e78:	2300      	movle	r3, #0
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	f083 0301 	eor.w	r3, r3, #1
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d057      	beq.n	8000f36 <PID_CONTROLLER_Compute+0x100>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	ed93 7a06 	vldr	s14, [r3, #24]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e92:	eef1 7a67 	vneg.f32	s15, s15
 8000e96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9e:	bf94      	ite	ls
 8000ea0:	2301      	movls	r3, #1
 8000ea2:	2300      	movhi	r3, #0
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	f083 0301 	eor.w	r3, r3, #1
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d10e      	bne.n	8000ece <PID_CONTROLLER_Compute+0x98>
 8000eb0:	edd7 7a00 	vldr	s15, [r7]
 8000eb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebc:	bf4c      	ite	mi
 8000ebe:	2301      	movmi	r3, #1
 8000ec0:	2300      	movpl	r3, #0
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	f083 0301 	eor.w	r3, r3, #1
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d033      	beq.n	8000f36 <PID_CONTROLLER_Compute+0x100>
        controller->u += ((controller->Kp + controller->Ki + controller->Kd) * ek)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	ed93 7a06 	vldr	s14, [r3, #24]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	edd3 6a00 	vldr	s13, [r3]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ee0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	edd3 7a02 	vldr	s15, [r3, #8]
 8000eea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000eee:	edd7 7a00 	vldr	s15, [r7]
 8000ef2:	ee66 6aa7 	vmul.f32	s13, s13, s15
                         - ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	ed93 6a00 	vldr	s12, [r3]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f02:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f06:	ee36 6a27 	vadd.f32	s12, s12, s15
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f10:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000f14:	ee76 6ae7 	vsub.f32	s13, s13, s15
                         + (controller->Kd * controller->ek_2);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	ed93 6a02 	vldr	s12, [r3, #8]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f24:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000f28:	ee76 7aa7 	vadd.f32	s15, s13, s15
        controller->u += ((controller->Kp + controller->Ki + controller->Kd) * ek)
 8000f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	edc3 7a06 	vstr	s15, [r3, #24]
    }
    controller->ek_2 = controller->ek_1;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	691a      	ldr	r2, [r3, #16]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	615a      	str	r2, [r3, #20]
    controller->ek_1 = ek;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	683a      	ldr	r2, [r7, #0]
 8000f42:	611a      	str	r2, [r3, #16]
    return controller->u;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	ee07 3a90 	vmov	s15, r3
}
 8000f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <MDXX_init>:
 *  Created on: Mar 31, 2024
 *      Author: beamk
 */
#include "Cytron_MDXX.h"

void MDXX_init(MDXX* mdxx, TIM_HandleTypeDef* htimd, uint16_t timd_chx, TIM_HandleTypeDef* htimp, uint16_t timp_chx){
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	603b      	str	r3, [r7, #0]
 8000f66:	4613      	mov	r3, r2
 8000f68:	80fb      	strh	r3, [r7, #6]
	mdxx->htimd = htimd;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	601a      	str	r2, [r3, #0]
	mdxx->htimp = htimp;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	609a      	str	r2, [r3, #8]
	mdxx->timd_chx = timd_chx;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	88fa      	ldrh	r2, [r7, #6]
 8000f7a:	809a      	strh	r2, [r3, #4]
	mdxx->timp_chx = timp_chx;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	8b3a      	ldrh	r2, [r7, #24]
 8000f80:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->dir), htimd, timd_chx);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	3310      	adds	r3, #16
 8000f86:	88fa      	ldrh	r2, [r7, #6]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f95a 	bl	8001244 <PWM_init>
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	3328      	adds	r3, #40	@ 0x28
 8000f94:	8b3a      	ldrh	r2, [r7, #24]
 8000f96:	6839      	ldr	r1, [r7, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 f953 	bl	8001244 <PWM_init>

}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <MDXX_set_range>:
		PWM_write_duty(&(mdxx->pwm),freq, fabs(duty));
		mdxx->cmd = fabs(duty);
	}
}

void MDXX_set_range(MDXX* mdxx, float freq, float duty){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fb4:	edc7 0a01 	vstr	s1, [r7, #4]
	if(duty==0){
 8000fb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fbc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc4:	d115      	bne.n	8000ff2 <MDXX_set_range+0x4a>
		PWM_write_range(&(mdxx->dir),freq, 0);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	3310      	adds	r3, #16
 8000fca:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8001080 <MDXX_set_range+0xd8>
 8000fce:	ed97 0a02 	vldr	s0, [r7, #8]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fa5c 	bl	8001490 <PWM_write_range>
		PWM_write_range(&(mdxx->pwm),freq, 0);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	3328      	adds	r3, #40	@ 0x28
 8000fdc:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001080 <MDXX_set_range+0xd8>
 8000fe0:	ed97 0a02 	vldr	s0, [r7, #8]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 fa53 	bl	8001490 <PWM_write_range>
		mdxx->cmd = 0;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2200      	movs	r2, #0
 8000fee:	641a      	str	r2, [r3, #64]	@ 0x40
	else {
		PWM_write_range(&(mdxx->dir),freq, 65535);
		PWM_write_range(&(mdxx->pwm),freq, fabs(duty));
		mdxx->cmd = fabs(duty);
	}
}
 8000ff0:	e041      	b.n	8001076 <MDXX_set_range+0xce>
	else if(duty>0){
 8000ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffe:	dd1a      	ble.n	8001036 <MDXX_set_range+0x8e>
		PWM_write_range(&(mdxx->dir),freq, 0);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	3310      	adds	r3, #16
 8001004:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 8001080 <MDXX_set_range+0xd8>
 8001008:	ed97 0a02 	vldr	s0, [r7, #8]
 800100c:	4618      	mov	r0, r3
 800100e:	f000 fa3f 	bl	8001490 <PWM_write_range>
		PWM_write_range(&(mdxx->pwm),freq, duty);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	3328      	adds	r3, #40	@ 0x28
 8001016:	edd7 0a01 	vldr	s1, [r7, #4]
 800101a:	ed97 0a02 	vldr	s0, [r7, #8]
 800101e:	4618      	mov	r0, r3
 8001020:	f000 fa36 	bl	8001490 <PWM_write_range>
		mdxx->cmd = duty;
 8001024:	edd7 7a01 	vldr	s15, [r7, #4]
 8001028:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800102c:	ee17 2a90 	vmov	r2, s15
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001034:	e01f      	b.n	8001076 <MDXX_set_range+0xce>
		PWM_write_range(&(mdxx->dir),freq, 65535);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	3310      	adds	r3, #16
 800103a:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8001084 <MDXX_set_range+0xdc>
 800103e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001042:	4618      	mov	r0, r3
 8001044:	f000 fa24 	bl	8001490 <PWM_write_range>
		PWM_write_range(&(mdxx->pwm),freq, fabs(duty));
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	3328      	adds	r3, #40	@ 0x28
 800104c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001050:	eef0 7ae7 	vabs.f32	s15, s15
 8001054:	eef0 0a67 	vmov.f32	s1, s15
 8001058:	ed97 0a02 	vldr	s0, [r7, #8]
 800105c:	4618      	mov	r0, r3
 800105e:	f000 fa17 	bl	8001490 <PWM_write_range>
		mdxx->cmd = fabs(duty);
 8001062:	edd7 7a01 	vldr	s15, [r7, #4]
 8001066:	eef0 7ae7 	vabs.f32	s15, s15
 800106a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800106e:	ee17 2a90 	vmov	r2, s15
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	00000000 	.word	0x00000000
 8001084:	477fff00 	.word	0x477fff00

08001088 <DRV8825_init>:
                  GPIO_TypeDef *GPIO_M2,
                  uint16_t GPIO_Pin_M2,
                  GPIO_TypeDef *GPIO_DIR,
                  uint16_t GPIO_Pin_DIR,
                  GPIO_TypeDef *GPIO_EN,
                  uint16_t GPIO_Pin_EN) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	4613      	mov	r3, r2
 8001096:	80fb      	strh	r3, [r7, #6]

    // Initialize GPIO pins for microstepping modes
    drv->GPIO_M0 = GPIO_M0;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	601a      	str	r2, [r3, #0]
    drv->GPIO_Pin_M0 = GPIO_Pin_M0;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	8b3a      	ldrh	r2, [r7, #24]
 80010a2:	809a      	strh	r2, [r3, #4]
    drv->GPIO_M1 = GPIO_M1;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	69fa      	ldr	r2, [r7, #28]
 80010a8:	609a      	str	r2, [r3, #8]
    drv->GPIO_Pin_M1 = GPIO_Pin_M1;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	8c3a      	ldrh	r2, [r7, #32]
 80010ae:	819a      	strh	r2, [r3, #12]
    drv->GPIO_M2 = GPIO_M2;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010b4:	611a      	str	r2, [r3, #16]
    drv->GPIO_Pin_M2 = GPIO_Pin_M2;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80010ba:	829a      	strh	r2, [r3, #20]

    // Initialize GPIO pins for direction and enable
    drv->GPIO_DIR = GPIO_DIR;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010c0:	619a      	str	r2, [r3, #24]
    drv->GPIO_Pin_DIR = GPIO_Pin_DIR;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80010c6:	839a      	strh	r2, [r3, #28]
    drv->GPIO_EN = GPIO_EN;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010cc:	621a      	str	r2, [r3, #32]
    drv->GPIO_Pin_EN = GPIO_Pin_EN;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80010d2:	849a      	strh	r2, [r3, #36]	@ 0x24

    // Initialize PWM timer and channel
    drv->htimp = htimp;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	629a      	str	r2, [r3, #40]	@ 0x28
    drv->timp_chx = timp_chx;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	88fa      	ldrh	r2, [r7, #6]
 80010de:	859a      	strh	r2, [r3, #44]	@ 0x2c

    // Initialize PWM structure
	PWM_init(&(drv->pwm), htimp, timp_chx);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	3330      	adds	r3, #48	@ 0x30
 80010e4:	88fa      	ldrh	r2, [r7, #6]
 80010e6:	68b9      	ldr	r1, [r7, #8]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 f8ab 	bl	8001244 <PWM_init>

    // Set initial states for GPIO pins Full Step
    HAL_GPIO_WritePin(drv->GPIO_M0, drv->GPIO_Pin_M0, GPIO_PIN_RESET);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	889b      	ldrh	r3, [r3, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	4619      	mov	r1, r3
 80010fa:	f004 fbc1 	bl	8005880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(drv->GPIO_M1, drv->GPIO_Pin_M1, GPIO_PIN_RESET);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6898      	ldr	r0, [r3, #8]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	899b      	ldrh	r3, [r3, #12]
 8001106:	2200      	movs	r2, #0
 8001108:	4619      	mov	r1, r3
 800110a:	f004 fbb9 	bl	8005880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(drv->GPIO_M2, drv->GPIO_Pin_M2, GPIO_PIN_RESET);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6918      	ldr	r0, [r3, #16]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	8a9b      	ldrh	r3, [r3, #20]
 8001116:	2200      	movs	r2, #0
 8001118:	4619      	mov	r1, r3
 800111a:	f004 fbb1 	bl	8005880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(drv->GPIO_DIR, drv->GPIO_Pin_DIR, GPIO_PIN_RESET);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6998      	ldr	r0, [r3, #24]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	8b9b      	ldrh	r3, [r3, #28]
 8001126:	2200      	movs	r2, #0
 8001128:	4619      	mov	r1, r3
 800112a:	f004 fba9 	bl	8005880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(drv->GPIO_EN, drv->GPIO_Pin_EN, GPIO_PIN_SET); // Set to disable motor initially
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6a18      	ldr	r0, [r3, #32]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001136:	2201      	movs	r2, #1
 8001138:	4619      	mov	r1, r3
 800113a:	f004 fba1 	bl	8005880 <HAL_GPIO_WritePin>


}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <DRV8825_set_speed>:
void DRV8825_set_speed(DRV8825* drv, GPIO_PinState M0, GPIO_PinState M1, GPIO_PinState M2, GPIO_PinState DIR, GPIO_PinState EN,float freq){
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	4608      	mov	r0, r1
 8001152:	4611      	mov	r1, r2
 8001154:	461a      	mov	r2, r3
 8001156:	ed87 0a01 	vstr	s0, [r7, #4]
 800115a:	4603      	mov	r3, r0
 800115c:	72fb      	strb	r3, [r7, #11]
 800115e:	460b      	mov	r3, r1
 8001160:	72bb      	strb	r3, [r7, #10]
 8001162:	4613      	mov	r3, r2
 8001164:	727b      	strb	r3, [r7, #9]
    HAL_GPIO_WritePin(drv->GPIO_M0, drv->GPIO_Pin_M0, M0);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6818      	ldr	r0, [r3, #0]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	889b      	ldrh	r3, [r3, #4]
 800116e:	7afa      	ldrb	r2, [r7, #11]
 8001170:	4619      	mov	r1, r3
 8001172:	f004 fb85 	bl	8005880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(drv->GPIO_M1, drv->GPIO_Pin_M1, M1);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6898      	ldr	r0, [r3, #8]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	899b      	ldrh	r3, [r3, #12]
 800117e:	7aba      	ldrb	r2, [r7, #10]
 8001180:	4619      	mov	r1, r3
 8001182:	f004 fb7d 	bl	8005880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(drv->GPIO_M2, drv->GPIO_Pin_M2, M2);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6918      	ldr	r0, [r3, #16]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	8a9b      	ldrh	r3, [r3, #20]
 800118e:	7a7a      	ldrb	r2, [r7, #9]
 8001190:	4619      	mov	r1, r3
 8001192:	f004 fb75 	bl	8005880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(drv->GPIO_DIR, drv->GPIO_Pin_DIR, DIR);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6998      	ldr	r0, [r3, #24]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	8b9b      	ldrh	r3, [r3, #28]
 800119e:	7e3a      	ldrb	r2, [r7, #24]
 80011a0:	4619      	mov	r1, r3
 80011a2:	f004 fb6d 	bl	8005880 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(drv->GPIO_EN, drv->GPIO_Pin_EN, EN);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6a18      	ldr	r0, [r3, #32]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80011ae:	7f3a      	ldrb	r2, [r7, #28]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f004 fb65 	bl	8005880 <HAL_GPIO_WritePin>
    PWM_write_duty(&(drv->pwm), freq, 50);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	3330      	adds	r3, #48	@ 0x30
 80011ba:	eddf 0a05 	vldr	s1, [pc, #20]	@ 80011d0 <DRV8825_set_speed+0x88>
 80011be:	ed97 0a01 	vldr	s0, [r7, #4]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f860 	bl	8001288 <PWM_write_duty>
}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	42480000 	.word	0x42480000

080011d4 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	@ 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	ed87 0a05 	vstr	s0, [r7, #20]
 80011de:	edc7 0a04 	vstr	s1, [r7, #16]
 80011e2:	ed87 1a03 	vstr	s2, [r7, #12]
 80011e6:	edc7 1a02 	vstr	s3, [r7, #8]
 80011ea:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 80011ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80011f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80011f6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80011fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80011fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001202:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800120a:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 800120e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001212:	edd7 7a02 	vldr	s15, [r7, #8]
 8001216:	ee37 7a67 	vsub.f32	s14, s14, s15
 800121a:	edd7 7a07 	vldr	s15, [r7, #28]
 800121e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001222:	ed97 7a02 	vldr	s14, [r7, #8]
 8001226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122a:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	ee07 3a90 	vmov	s15, r3
}
 8001234:	eeb0 0a67 	vmov.f32	s0, s15
 8001238:	3724      	adds	r7, #36	@ 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	4613      	mov	r3, r2
 8001250:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4a0b      	ldr	r2, [pc, #44]	@ (8001284 <PWM_init+0x40>)
 8001256:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	88fa      	ldrh	r2, [r7, #6]
 8001262:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2200      	movs	r2, #0
 8001268:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 800126a:	68b8      	ldr	r0, [r7, #8]
 800126c:	f006 fafa 	bl	8007864 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	4619      	mov	r1, r3
 8001274:	68b8      	ldr	r0, [r7, #8]
 8001276:	f006 fc3f 	bl	8007af8 <HAL_TIM_PWM_Start>
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	0a21fe80 	.word	0x0a21fe80

08001288 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8001288:	b5b0      	push	{r4, r5, r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	ed87 0a02 	vstr	s0, [r7, #8]
 8001294:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001298:	edd7 7a02 	vldr	s15, [r7, #8]
 800129c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a4:	d137      	bne.n	8001316 <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	889b      	ldrh	r3, [r3, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d105      	bne.n	80012ba <PWM_write_duty+0x32>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2200      	movs	r2, #0
 80012b6:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 80012b8:	e0e1      	b.n	800147e <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	889b      	ldrh	r3, [r3, #4]
 80012be:	2b04      	cmp	r3, #4
 80012c0:	d105      	bne.n	80012ce <PWM_write_duty+0x46>
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	2300      	movs	r3, #0
 80012ca:	6393      	str	r3, [r2, #56]	@ 0x38
 80012cc:	e0d7      	b.n	800147e <PWM_write_duty+0x1f6>
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	889b      	ldrh	r3, [r3, #4]
 80012d2:	2b08      	cmp	r3, #8
 80012d4:	d105      	bne.n	80012e2 <PWM_write_duty+0x5a>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	2300      	movs	r3, #0
 80012de:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80012e0:	e0cd      	b.n	800147e <PWM_write_duty+0x1f6>
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	889b      	ldrh	r3, [r3, #4]
 80012e6:	2b0c      	cmp	r3, #12
 80012e8:	d105      	bne.n	80012f6 <PWM_write_duty+0x6e>
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	2300      	movs	r3, #0
 80012f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f4:	e0c3      	b.n	800147e <PWM_write_duty+0x1f6>
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	889b      	ldrh	r3, [r3, #4]
 80012fa:	2b10      	cmp	r3, #16
 80012fc:	d105      	bne.n	800130a <PWM_write_duty+0x82>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	2300      	movs	r3, #0
 8001306:	6493      	str	r3, [r2, #72]	@ 0x48
 8001308:	e0b9      	b.n	800147e <PWM_write_duty+0x1f6>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	2300      	movs	r3, #0
 8001312:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001314:	e0b3      	b.n	800147e <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001322:	ed97 7a02 	vldr	s14, [r7, #8]
 8001326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800132a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800132e:	ee17 2a90 	vmov	r2, s15
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800133e:	33fe      	adds	r3, #254	@ 0xfe
 8001340:	4a51      	ldr	r2, [pc, #324]	@ (8001488 <PWM_write_duty+0x200>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	0bdb      	lsrs	r3, r3, #15
 8001348:	b29b      	uxth	r3, r3
 800134a:	3b01      	subs	r3, #1
 800134c:	b29a      	uxth	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	ee07 3a90 	vmov	s15, r3
 800135a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	899b      	ldrh	r3, [r3, #12]
 8001362:	3301      	adds	r3, #1
 8001364:	ee07 3a90 	vmov	s15, r3
 8001368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001370:	ed97 7a02 	vldr	s14, [r7, #8]
 8001374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001378:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800137c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001384:	ee17 3a90 	vmov	r3, s15
 8001388:	b29a      	uxth	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	89db      	ldrh	r3, [r3, #14]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff f892 	bl	80004bc <__aeabi_i2d>
 8001398:	4604      	mov	r4, r0
 800139a:	460d      	mov	r5, r1
 800139c:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a0:	eef0 7ae7 	vabs.f32	s15, s15
 80013a4:	ee17 0a90 	vmov	r0, s15
 80013a8:	f7ff f89a 	bl	80004e0 <__aeabi_f2d>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4620      	mov	r0, r4
 80013b2:	4629      	mov	r1, r5
 80013b4:	f7ff f8ec 	bl	8000590 <__aeabi_dmul>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	4b31      	ldr	r3, [pc, #196]	@ (800148c <PWM_write_duty+0x204>)
 80013c6:	f7ff fa0d 	bl	80007e4 <__aeabi_ddiv>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f7ff faef 	bl	80009b4 <__aeabi_d2uiz>
 80013d6:	4603      	mov	r3, r0
 80013d8:	b29b      	uxth	r3, r3
 80013da:	461a      	mov	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	899a      	ldrh	r2, [r3, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	89da      	ldrh	r2, [r3, #14]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	89da      	ldrh	r2, [r3, #14]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	889b      	ldrh	r3, [r3, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d106      	bne.n	8001418 <PWM_write_duty+0x190>
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	6952      	ldr	r2, [r2, #20]
 8001414:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001416:	e032      	b.n	800147e <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	889b      	ldrh	r3, [r3, #4]
 800141c:	2b04      	cmp	r3, #4
 800141e:	d106      	bne.n	800142e <PWM_write_duty+0x1a6>
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800142c:	e027      	b.n	800147e <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	889b      	ldrh	r3, [r3, #4]
 8001432:	2b08      	cmp	r3, #8
 8001434:	d106      	bne.n	8001444 <PWM_write_duty+0x1bc>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001442:	e01c      	b.n	800147e <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	889b      	ldrh	r3, [r3, #4]
 8001448:	2b0c      	cmp	r3, #12
 800144a:	d106      	bne.n	800145a <PWM_write_duty+0x1d2>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001458:	e011      	b.n	800147e <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	889b      	ldrh	r3, [r3, #4]
 800145e:	2b10      	cmp	r3, #16
 8001460:	d106      	bne.n	8001470 <PWM_write_duty+0x1e8>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800146e:	e006      	b.n	800147e <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800147c:	e7ff      	b.n	800147e <PWM_write_duty+0x1f6>
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bdb0      	pop	{r4, r5, r7, pc}
 8001486:	bf00      	nop
 8001488:	80008001 	.word	0x80008001
 800148c:	40590000 	.word	0x40590000

08001490 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8001490:	b5b0      	push	{r4, r5, r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	ed87 0a02 	vstr	s0, [r7, #8]
 800149c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 80014a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80014a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ac:	d137      	bne.n	800151e <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	889b      	ldrh	r3, [r3, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d105      	bne.n	80014c2 <PWM_write_range+0x32>
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2200      	movs	r2, #0
 80014be:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 80014c0:	e0e1      	b.n	8001686 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	889b      	ldrh	r3, [r3, #4]
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	d105      	bne.n	80014d6 <PWM_write_range+0x46>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	2300      	movs	r3, #0
 80014d2:	6393      	str	r3, [r2, #56]	@ 0x38
 80014d4:	e0d7      	b.n	8001686 <PWM_write_range+0x1f6>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	889b      	ldrh	r3, [r3, #4]
 80014da:	2b08      	cmp	r3, #8
 80014dc:	d105      	bne.n	80014ea <PWM_write_range+0x5a>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	2300      	movs	r3, #0
 80014e6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80014e8:	e0cd      	b.n	8001686 <PWM_write_range+0x1f6>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	889b      	ldrh	r3, [r3, #4]
 80014ee:	2b0c      	cmp	r3, #12
 80014f0:	d105      	bne.n	80014fe <PWM_write_range+0x6e>
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	2300      	movs	r3, #0
 80014fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fc:	e0c3      	b.n	8001686 <PWM_write_range+0x1f6>
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	889b      	ldrh	r3, [r3, #4]
 8001502:	2b10      	cmp	r3, #16
 8001504:	d105      	bne.n	8001512 <PWM_write_range+0x82>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	2300      	movs	r3, #0
 800150e:	6493      	str	r3, [r2, #72]	@ 0x48
 8001510:	e0b9      	b.n	8001686 <PWM_write_range+0x1f6>
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	2300      	movs	r3, #0
 800151a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800151c:	e0b3      	b.n	8001686 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	ee07 3a90 	vmov	s15, r3
 8001526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800152a:	ed97 7a02 	vldr	s14, [r7, #8]
 800152e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001536:	ee17 2a90 	vmov	r2, s15
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001546:	33fe      	adds	r3, #254	@ 0xfe
 8001548:	4a53      	ldr	r2, [pc, #332]	@ (8001698 <PWM_write_range+0x208>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0bdb      	lsrs	r3, r3, #15
 8001550:	b29b      	uxth	r3, r3
 8001552:	3b01      	subs	r3, #1
 8001554:	b29a      	uxth	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	ee07 3a90 	vmov	s15, r3
 8001562:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	899b      	ldrh	r3, [r3, #12]
 800156a:	3301      	adds	r3, #1
 800156c:	ee07 3a90 	vmov	s15, r3
 8001570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001574:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001578:	ed97 7a02 	vldr	s14, [r7, #8]
 800157c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001580:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001584:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800158c:	ee17 3a90 	vmov	r3, s15
 8001590:	b29a      	uxth	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	89db      	ldrh	r3, [r3, #14]
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ff8e 	bl	80004bc <__aeabi_i2d>
 80015a0:	4604      	mov	r4, r0
 80015a2:	460d      	mov	r5, r1
 80015a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80015a8:	eef0 7ae7 	vabs.f32	s15, s15
 80015ac:	ee17 0a90 	vmov	r0, s15
 80015b0:	f7fe ff96 	bl	80004e0 <__aeabi_f2d>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4620      	mov	r0, r4
 80015ba:	4629      	mov	r1, r5
 80015bc:	f7fe ffe8 	bl	8000590 <__aeabi_dmul>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	a331      	add	r3, pc, #196	@ (adr r3, 8001690 <PWM_write_range+0x200>)
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	f7ff f909 	bl	80007e4 <__aeabi_ddiv>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f7ff f9eb 	bl	80009b4 <__aeabi_d2uiz>
 80015de:	4603      	mov	r3, r0
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	899a      	ldrh	r2, [r3, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	89da      	ldrh	r2, [r3, #14]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	89da      	ldrh	r2, [r3, #14]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	889b      	ldrh	r3, [r3, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d106      	bne.n	8001620 <PWM_write_range+0x190>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	6952      	ldr	r2, [r2, #20]
 800161c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800161e:	e032      	b.n	8001686 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	889b      	ldrh	r3, [r3, #4]
 8001624:	2b04      	cmp	r3, #4
 8001626:	d106      	bne.n	8001636 <PWM_write_range+0x1a6>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001634:	e027      	b.n	8001686 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	889b      	ldrh	r3, [r3, #4]
 800163a:	2b08      	cmp	r3, #8
 800163c:	d106      	bne.n	800164c <PWM_write_range+0x1bc>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800164a:	e01c      	b.n	8001686 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	889b      	ldrh	r3, [r3, #4]
 8001650:	2b0c      	cmp	r3, #12
 8001652:	d106      	bne.n	8001662 <PWM_write_range+0x1d2>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001660:	e011      	b.n	8001686 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	889b      	ldrh	r3, [r3, #4]
 8001666:	2b10      	cmp	r3, #16
 8001668:	d106      	bne.n	8001678 <PWM_write_range+0x1e8>
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001676:	e006      	b.n	8001686 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001684:	e7ff      	b.n	8001686 <PWM_write_range+0x1f6>
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bdb0      	pop	{r4, r5, r7, pc}
 800168e:	bf00      	nop
 8001690:	00000000 	.word	0x00000000
 8001694:	40efffe0 	.word	0x40efffe0
 8001698:	80008001 	.word	0x80008001

0800169c <QEI_init>:
 *  Created on: Mar 30, 2024
 *      Author: beamk
 */
#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
 80016a8:	603b      	str	r3, [r7, #0]
	qei->htimx = htimx;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	68ba      	ldr	r2, [r7, #8]
 80016ae:	611a      	str	r2, [r3, #16]
	qei->ppr = ppr;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	619a      	str	r2, [r3, #24]
	qei->freq = freq;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	621a      	str	r2, [r3, #32]
	qei->c[NOW] = 0;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
	qei->c[PREV] = 0;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	605a      	str	r2, [r3, #4]
	qei->pps = 0;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	625a      	str	r2, [r3, #36]	@ 0x24
	qei->rpm = 0;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	629a      	str	r2, [r3, #40]	@ 0x28
	qei->radps = 0;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	62da      	str	r2, [r3, #44]	@ 0x2c
	qei->enc_period = 65536 - (65536 % ppr);
 80016e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	fb93 f2f2 	sdiv	r2, r3, r2
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	fb01 f202 	mul.w	r2, r1, r2
 80016f0:	1a9b      	subs	r3, r3, r2
 80016f2:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	615a      	str	r2, [r3, #20]
	qei->pulses = 0;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	631a      	str	r2, [r3, #48]	@ 0x30
	//qei->pulsesf = 0;
	qei->revs = 0;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	635a      	str	r2, [r3, #52]	@ 0x34
	qei->rads = 0;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	639a      	str	r2, [r3, #56]	@ 0x38
	qei->mm =0;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	641a      	str	r2, [r3, #64]	@ 0x40
	qei->mmps = 0;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	645a      	str	r2, [r3, #68]	@ 0x44
	HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001720:	213c      	movs	r1, #60	@ 0x3c
 8001722:	68b8      	ldr	r0, [r7, #8]
 8001724:	f006 fba0 	bl	8007e68 <HAL_TIM_Encoder_Start>
}
 8001728:	bf00      	nop
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8001730:	b5b0      	push	{r4, r5, r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]

	qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx); // Update the current count
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	601a      	str	r2, [r3, #0]

	// Calculate the difference in counts
	int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	60fb      	str	r3, [r7, #12]

	//Unwrap
	if (diff_counts > qei->enc_period / 2) {
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	0fda      	lsrs	r2, r3, #31
 8001756:	4413      	add	r3, r2
 8001758:	105b      	asrs	r3, r3, #1
 800175a:	461a      	mov	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4293      	cmp	r3, r2
 8001760:	dd05      	ble.n	800176e <QEI_get_diff_count+0x3e>
		diff_counts -= qei->enc_period;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	e00e      	b.n	800178c <QEI_get_diff_count+0x5c>
	} else if (diff_counts < -(qei->enc_period) / 2) {
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	425b      	negs	r3, r3
 8001774:	0fda      	lsrs	r2, r3, #31
 8001776:	4413      	add	r3, r2
 8001778:	105b      	asrs	r3, r3, #1
 800177a:	461a      	mov	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4293      	cmp	r3, r2
 8001780:	da04      	bge.n	800178c <QEI_get_diff_count+0x5c>
		diff_counts += qei->enc_period;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	4413      	add	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]
	}

	qei->diff_counts = diff_counts;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	61da      	str	r2, [r3, #28]
	//qei->diff_countsf = (float)diff_counts*1.25;

	// Calculate Position We can not compute position in other loop
	qei->pulses += qei->diff_counts;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	441a      	add	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	631a      	str	r2, [r3, #48]	@ 0x30
	//qei->pulsesf += qei->diff_countsf;
	qei->revs += (qei->diff_counts / (float) (qei->ppr));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017be:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80017c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	qei->mm += (qei->diff_counts / (float) (qei->ppr))*10.0;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fe85 	bl	80004e0 <__aeabi_f2d>
 80017d6:	4604      	mov	r4, r0
 80017d8:	460d      	mov	r5, r1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	ee07 3a90 	vmov	s15, r3
 80017e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	ee07 3a90 	vmov	s15, r3
 80017ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017f6:	ee16 0a90 	vmov	r0, s13
 80017fa:	f7fe fe71 	bl	80004e0 <__aeabi_f2d>
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	4b27      	ldr	r3, [pc, #156]	@ (80018a0 <QEI_get_diff_count+0x170>)
 8001804:	f7fe fec4 	bl	8000590 <__aeabi_dmul>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4620      	mov	r0, r4
 800180e:	4629      	mov	r1, r5
 8001810:	f7fe fd08 	bl	8000224 <__adddf3>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff f8ea 	bl	80009f4 <__aeabi_d2f>
 8001820:	4602      	mov	r2, r0
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	641a      	str	r2, [r3, #64]	@ 0x40
	qei->rads += (qei->diff_counts / (float) (qei->ppr)) * 2 * M_PI;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fe58 	bl	80004e0 <__aeabi_f2d>
 8001830:	4604      	mov	r4, r0
 8001832:	460d      	mov	r5, r1
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	ee07 3a90 	vmov	s15, r3
 800183c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	ee07 3a90 	vmov	s15, r3
 8001848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800184c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001850:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001854:	ee17 0a90 	vmov	r0, s15
 8001858:	f7fe fe42 	bl	80004e0 <__aeabi_f2d>
 800185c:	a30e      	add	r3, pc, #56	@ (adr r3, 8001898 <QEI_get_diff_count+0x168>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7fe fe95 	bl	8000590 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4620      	mov	r0, r4
 800186c:	4629      	mov	r1, r5
 800186e:	f7fe fcd9 	bl	8000224 <__adddf3>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	f7ff f8bb 	bl	80009f4 <__aeabi_d2f>
 800187e:	4602      	mov	r2, r0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	639a      	str	r2, [r3, #56]	@ 0x38

	qei->c[PREV] = qei->c[NOW];  // Store the previous count
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	605a      	str	r2, [r3, #4]
}
 800188c:	bf00      	nop
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bdb0      	pop	{r4, r5, r7, pc}
 8001894:	f3af 8000 	nop.w
 8001898:	54442d18 	.word	0x54442d18
 800189c:	400921fb 	.word	0x400921fb
 80018a0:	40240000 	.word	0x40240000
 80018a4:	00000000 	.word	0x00000000

080018a8 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 80018a8:	b5b0      	push	{r4, r5, r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	// Calculate Velocity
	qei->pps = qei->diff_counts *((int)(qei->freq));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6a12      	ldr	r2, [r2, #32]
 80018b8:	fb02 f303 	mul.w	r3, r2, r3
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	qei->rpm = qei->pps * 60.0 / (float) (qei->ppr);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe06 	bl	80004e0 <__aeabi_f2d>
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	4b53      	ldr	r3, [pc, #332]	@ (8001a28 <QEI_compute_data+0x180>)
 80018da:	f7fe fe59 	bl	8000590 <__aeabi_dmul>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4614      	mov	r4, r2
 80018e4:	461d      	mov	r5, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	ee07 3a90 	vmov	s15, r3
 80018ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f2:	ee17 0a90 	vmov	r0, s15
 80018f6:	f7fe fdf3 	bl	80004e0 <__aeabi_f2d>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4620      	mov	r0, r4
 8001900:	4629      	mov	r1, r5
 8001902:	f7fe ff6f 	bl	80007e4 <__aeabi_ddiv>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4610      	mov	r0, r2
 800190c:	4619      	mov	r1, r3
 800190e:	f7ff f871 	bl	80009f4 <__aeabi_d2f>
 8001912:	4602      	mov	r2, r0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	629a      	str	r2, [r3, #40]	@ 0x28
	qei->radps = qei->pps * 2 * M_PI / (float) (qei->ppr);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800191e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001922:	ee17 0a90 	vmov	r0, s15
 8001926:	f7fe fddb 	bl	80004e0 <__aeabi_f2d>
 800192a:	a33d      	add	r3, pc, #244	@ (adr r3, 8001a20 <QEI_compute_data+0x178>)
 800192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001930:	f7fe fe2e 	bl	8000590 <__aeabi_dmul>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4614      	mov	r4, r2
 800193a:	461d      	mov	r5, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001948:	ee17 0a90 	vmov	r0, s15
 800194c:	f7fe fdc8 	bl	80004e0 <__aeabi_f2d>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4620      	mov	r0, r4
 8001956:	4629      	mov	r1, r5
 8001958:	f7fe ff44 	bl	80007e4 <__aeabi_ddiv>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	f7ff f846 	bl	80009f4 <__aeabi_d2f>
 8001968:	4602      	mov	r2, r0
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	62da      	str	r2, [r3, #44]	@ 0x2c
	qei->mmps = qei->pps* 10.0 / (float) (qei->ppr);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fdb4 	bl	80004e0 <__aeabi_f2d>
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a2c <QEI_compute_data+0x184>)
 800197e:	f7fe fe07 	bl	8000590 <__aeabi_dmul>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4614      	mov	r4, r2
 8001988:	461d      	mov	r5, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	ee07 3a90 	vmov	s15, r3
 8001992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001996:	ee17 0a90 	vmov	r0, s15
 800199a:	f7fe fda1 	bl	80004e0 <__aeabi_f2d>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4620      	mov	r0, r4
 80019a4:	4629      	mov	r1, r5
 80019a6:	f7fe ff1d 	bl	80007e4 <__aeabi_ddiv>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	f7ff f81f 	bl	80009f4 <__aeabi_d2f>
 80019b6:	4602      	mov	r2, r0
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	645a      	str	r2, [r3, #68]	@ 0x44

	//Calculate Acceleration
	qei->r[NOW] = qei->radps;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	609a      	str	r2, [r3, #8]
	float diff_velocity = (qei->r[NOW] - qei->r[PREV]);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	ed93 7a02 	vldr	s14, [r3, #8]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80019d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d4:	edc7 7a03 	vstr	s15, [r7, #12]
	if (diff_velocity == 0) {
 80019d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80019dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e4:	d104      	bne.n	80019f0 <QEI_compute_data+0x148>
		qei->radpss = 0;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019ee:	e00f      	b.n	8001a10 <QEI_compute_data+0x168>
	} else {
		qei->radpss = diff_velocity / (1 / (qei->freq));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d102      	bne.n	80019fe <QEI_compute_data+0x156>
 80019f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019fc:	e001      	b.n	8001a02 <QEI_compute_data+0x15a>
 80019fe:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001a30 <QEI_compute_data+0x188>
 8001a02:	edd7 6a03 	vldr	s13, [r7, #12]
 8001a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	}
	qei->r[PREV] = qei->r[NOW];  // Store the previous count
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	60da      	str	r2, [r3, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a20:	54442d18 	.word	0x54442d18
 8001a24:	400921fb 	.word	0x400921fb
 8001a28:	404e0000 	.word	0x404e0000
 8001a2c:	40240000 	.word	0x40240000
 8001a30:	00000000 	.word	0x00000000

08001a34 <RMX_Motor_begin>:
uint8_t TxBuffer[34] = { 0 };
uint8_t RxBuffer[24] = { 0 };
PID_CONTROLLER pid_torque;
AS5600_TypeDef* as5600;

void RMX_Motor_begin() {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	@ 0x28
 8001a38:	af0a      	add	r7, sp, #40	@ 0x28
	HAL_UART_Transmit_DMA(&hlpuart1, TxBuffer, 32);
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	493f      	ldr	r1, [pc, #252]	@ (8001b3c <RMX_Motor_begin+0x108>)
 8001a3e:	4840      	ldr	r0, [pc, #256]	@ (8001b40 <RMX_Motor_begin+0x10c>)
 8001a40:	f007 fca2 	bl	8009388 <HAL_UART_Transmit_DMA>
	HAL_UART_Receive_DMA(&hlpuart1, RxBuffer, 24); //All Bytes + Start Bit + Stop Bit
 8001a44:	2218      	movs	r2, #24
 8001a46:	493f      	ldr	r1, [pc, #252]	@ (8001b44 <RMX_Motor_begin+0x110>)
 8001a48:	483d      	ldr	r0, [pc, #244]	@ (8001b40 <RMX_Motor_begin+0x10c>)
 8001a4a:	f007 fd1d 	bl	8009488 <HAL_UART_Receive_DMA>

	QEI_init(&encoder, ENC_TIM, ENC_PPR, ENC_FREQ);
 8001a4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a56:	493c      	ldr	r1, [pc, #240]	@ (8001b48 <RMX_Motor_begin+0x114>)
 8001a58:	483c      	ldr	r0, [pc, #240]	@ (8001b4c <RMX_Motor_begin+0x118>)
 8001a5a:	f7ff fe1f 	bl	800169c <QEI_init>

	MDXX_init(&motor1, MOTOR1_DIR_TIM, MOTOR1_DIR_PIN, MOTOR1_PWM_DIR,MOTOR1_PWM_PIN);
 8001a5e:	2300      	movs	r3, #0
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	4b3b      	ldr	r3, [pc, #236]	@ (8001b50 <RMX_Motor_begin+0x11c>)
 8001a64:	2204      	movs	r2, #4
 8001a66:	493a      	ldr	r1, [pc, #232]	@ (8001b50 <RMX_Motor_begin+0x11c>)
 8001a68:	483a      	ldr	r0, [pc, #232]	@ (8001b54 <RMX_Motor_begin+0x120>)
 8001a6a:	f7ff fa76 	bl	8000f5a <MDXX_init>
	MDXX_init(&motor2, MOTOR2_DIR_TIM, MOTOR2_DIR_PIN, MOTOR2_PWM_DIR,MOTOR2_PWM_PIN);
 8001a6e:	2304      	movs	r3, #4
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	4b39      	ldr	r3, [pc, #228]	@ (8001b58 <RMX_Motor_begin+0x124>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	4938      	ldr	r1, [pc, #224]	@ (8001b58 <RMX_Motor_begin+0x124>)
 8001a78:	4838      	ldr	r0, [pc, #224]	@ (8001b5c <RMX_Motor_begin+0x128>)
 8001a7a:	f7ff fa6e 	bl	8000f5a <MDXX_init>
	MDXX_set_range(&motor1, 2000, 0);
 8001a7e:	eddf 0a38 	vldr	s1, [pc, #224]	@ 8001b60 <RMX_Motor_begin+0x12c>
 8001a82:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8001b64 <RMX_Motor_begin+0x130>
 8001a86:	4833      	ldr	r0, [pc, #204]	@ (8001b54 <RMX_Motor_begin+0x120>)
 8001a88:	f7ff fa8e 	bl	8000fa8 <MDXX_set_range>
	MDXX_set_range(&motor2, 2000, 0);
 8001a8c:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8001b60 <RMX_Motor_begin+0x12c>
 8001a90:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8001b64 <RMX_Motor_begin+0x130>
 8001a94:	4831      	ldr	r0, [pc, #196]	@ (8001b5c <RMX_Motor_begin+0x128>)
 8001a96:	f7ff fa87 	bl	8000fa8 <MDXX_set_range>

	DRV8825_init(&drv, DRV_TIM, DRV_PWM_PIN, GPIOB, GPIO_PIN_15, GPIOB, GPIO_PIN_14, GPIOB, GPIO_PIN_13, GPIOB, GPIO_PIN_2, GPIOB, GPIO_PIN_1);
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	9308      	str	r3, [sp, #32]
 8001a9e:	4b32      	ldr	r3, [pc, #200]	@ (8001b68 <RMX_Motor_begin+0x134>)
 8001aa0:	9307      	str	r3, [sp, #28]
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	9306      	str	r3, [sp, #24]
 8001aa6:	4b30      	ldr	r3, [pc, #192]	@ (8001b68 <RMX_Motor_begin+0x134>)
 8001aa8:	9305      	str	r3, [sp, #20]
 8001aaa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001aae:	9304      	str	r3, [sp, #16]
 8001ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b68 <RMX_Motor_begin+0x134>)
 8001ab2:	9303      	str	r3, [sp, #12]
 8001ab4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ab8:	9302      	str	r3, [sp, #8]
 8001aba:	4b2b      	ldr	r3, [pc, #172]	@ (8001b68 <RMX_Motor_begin+0x134>)
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	4b28      	ldr	r3, [pc, #160]	@ (8001b68 <RMX_Motor_begin+0x134>)
 8001ac6:	2208      	movs	r2, #8
 8001ac8:	4928      	ldr	r1, [pc, #160]	@ (8001b6c <RMX_Motor_begin+0x138>)
 8001aca:	4829      	ldr	r0, [pc, #164]	@ (8001b70 <RMX_Motor_begin+0x13c>)
 8001acc:	f7ff fadc 	bl	8001088 <DRV8825_init>

	HAL_ADCEx_Calibration_Start(ADC, ADC_SINGLE_ENDED);
 8001ad0:	217f      	movs	r1, #127	@ 0x7f
 8001ad2:	4828      	ldr	r0, [pc, #160]	@ (8001b74 <RMX_Motor_begin+0x140>)
 8001ad4:	f002 ff98 	bl	8004a08 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(ADC, adc_raw, ADC_BUFFER);
 8001ad8:	2278      	movs	r2, #120	@ 0x78
 8001ada:	4927      	ldr	r1, [pc, #156]	@ (8001b78 <RMX_Motor_begin+0x144>)
 8001adc:	4825      	ldr	r0, [pc, #148]	@ (8001b74 <RMX_Motor_begin+0x140>)
 8001ade:	f002 f885 	bl	8003bec <HAL_ADC_Start_DMA>
	WCS1700_init(&wcs1, ADC, adc_raw, ADC_BUFFER, 4095.0, ADC_RANK, 0, 0.40892111);
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8001b7c <RMX_Motor_begin+0x148>
 8001aee:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8001b80 <RMX_Motor_begin+0x14c>
 8001af2:	2378      	movs	r3, #120	@ 0x78
 8001af4:	4a20      	ldr	r2, [pc, #128]	@ (8001b78 <RMX_Motor_begin+0x144>)
 8001af6:	491f      	ldr	r1, [pc, #124]	@ (8001b74 <RMX_Motor_begin+0x140>)
 8001af8:	4822      	ldr	r0, [pc, #136]	@ (8001b84 <RMX_Motor_begin+0x150>)
 8001afa:	f000 f853 	bl	8001ba4 <WCS1700_init>
	WCS1700_init(&wcs2, ADC, adc_raw, ADC_BUFFER, 4095.0, ADC_RANK, 1, 0.30442117);
 8001afe:	2301      	movs	r3, #1
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	2303      	movs	r3, #3
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	eddf 0a20 	vldr	s1, [pc, #128]	@ 8001b88 <RMX_Motor_begin+0x154>
 8001b0a:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8001b80 <RMX_Motor_begin+0x14c>
 8001b0e:	2378      	movs	r3, #120	@ 0x78
 8001b10:	4a19      	ldr	r2, [pc, #100]	@ (8001b78 <RMX_Motor_begin+0x144>)
 8001b12:	4918      	ldr	r1, [pc, #96]	@ (8001b74 <RMX_Motor_begin+0x140>)
 8001b14:	481d      	ldr	r0, [pc, #116]	@ (8001b8c <RMX_Motor_begin+0x158>)
 8001b16:	f000 f845 	bl	8001ba4 <WCS1700_init>
//	as5600 = AS5600_new();
//	as5600->i2c_handle = AS5600_I2C;
//    AS5600_init(as5600);

//	DC_MOTOR_TORQUE_CONTROLLER_Init(&pid_torque, &ZGA60FM_1200RPM_Constant, 0, 0, 0, 65535.0);
	PID_CONTROLLER_Init(&pid_torque, 1000, 100, 0, 65535);
 8001b1a:	eddf 1a1d 	vldr	s3, [pc, #116]	@ 8001b90 <RMX_Motor_begin+0x15c>
 8001b1e:	ed9f 1a10 	vldr	s2, [pc, #64]	@ 8001b60 <RMX_Motor_begin+0x12c>
 8001b22:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8001b94 <RMX_Motor_begin+0x160>
 8001b26:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8001b98 <RMX_Motor_begin+0x164>
 8001b2a:	481c      	ldr	r0, [pc, #112]	@ (8001b9c <RMX_Motor_begin+0x168>)
 8001b2c:	f7ff f959 	bl	8000de2 <PID_CONTROLLER_Init>

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8001b30:	481b      	ldr	r0, [pc, #108]	@ (8001ba0 <RMX_Motor_begin+0x16c>)
 8001b32:	f005 ff07 	bl	8007944 <HAL_TIM_Base_Start_IT>
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	200002ac 	.word	0x200002ac
 8001b40:	200004f4 	.word	0x200004f4
 8001b44:	200002d0 	.word	0x200002d0
 8001b48:	20000694 	.word	0x20000694
 8001b4c:	20000124 	.word	0x20000124
 8001b50:	200006e0 	.word	0x200006e0
 8001b54:	20000054 	.word	0x20000054
 8001b58:	2000072c 	.word	0x2000072c
 8001b5c:	20000098 	.word	0x20000098
 8001b60:	00000000 	.word	0x00000000
 8001b64:	44fa0000 	.word	0x44fa0000
 8001b68:	48000400 	.word	0x48000400
 8001b6c:	20000778 	.word	0x20000778
 8001b70:	200000dc 	.word	0x200000dc
 8001b74:	20000314 	.word	0x20000314
 8001b78:	200001bc 	.word	0x200001bc
 8001b7c:	3ed15e1c 	.word	0x3ed15e1c
 8001b80:	457ff000 	.word	0x457ff000
 8001b84:	2000016c 	.word	0x2000016c
 8001b88:	3e9bdd17 	.word	0x3e9bdd17
 8001b8c:	20000194 	.word	0x20000194
 8001b90:	477fff00 	.word	0x477fff00
 8001b94:	42c80000 	.word	0x42c80000
 8001b98:	447a0000 	.word	0x447a0000
 8001b9c:	200002e8 	.word	0x200002e8
 8001ba0:	20000648 	.word	0x20000648

08001ba4 <WCS1700_init>:

#include <WCS1700.h>
#include <stdlib.h>


void WCS1700_init(WCS1700 *wcs1700,ADC_HandleTypeDef *hadc , uint16_t *data,uint32_t length,float res, uint8_t rank, uint8_t index, float offset_voltage){
 8001ba4:	b480      	push	{r7}
 8001ba6:	b089      	sub	sp, #36	@ 0x24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6178      	str	r0, [r7, #20]
 8001bac:	6139      	str	r1, [r7, #16]
 8001bae:	60fa      	str	r2, [r7, #12]
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001bb6:	edc7 0a00 	vstr	s1, [r7]
	wcs1700->hadc = hadc;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	601a      	str	r2, [r3, #0]
	wcs1700->pData = data;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	605a      	str	r2, [r3, #4]
	wcs1700->lengthData = length;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	609a      	str	r2, [r3, #8]
	wcs1700->ADCResolution = res;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	611a      	str	r2, [r3, #16]
	wcs1700->rank = rank;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001bd8:	731a      	strb	r2, [r3, #12]
	wcs1700->index = index;//1,2
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001be0:	735a      	strb	r2, [r3, #13]
	wcs1700->adcValue = 0;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	615a      	str	r2, [r3, #20]
	wcs1700->raw_voltage = 0;
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	619a      	str	r2, [r3, #24]
	wcs1700->voltage = 0;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
	wcs1700->current = 0;
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	621a      	str	r2, [r3, #32]
	wcs1700->offset_voltage = offset_voltage;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	625a      	str	r2, [r3, #36]	@ 0x24

	for (int i = 0; i < wcs1700->lengthData; i++) {
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
 8001c0c:	e009      	b.n	8001c22 <WCS1700_init+0x7e>
		wcs1700->pData[i] = 0;
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	2200      	movs	r2, #0
 8001c1a:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < wcs1700->lengthData; i++) {
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d8f0      	bhi.n	8001c0e <WCS1700_init+0x6a>
	}

//	HAL_ADCEx_Calibration_Start(wcs1700->hadc, ADC_SINGLE_ENDED);
//	HAL_ADC_Start_DMA(wcs1700->hadc, wcs1700->pData, wcs1700->lengthData);

}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3724      	adds	r7, #36	@ 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	0000      	movs	r0, r0
 8001c3c:	0000      	movs	r0, r0
	...

08001c40 <WCS1700_compute_data>:

void WCS1700_compute_data(WCS1700 *wcs1700){
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	uint32_t sum = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
	for (uint32_t j =  0; j < wcs1700->lengthData; j += wcs1700->rank) {
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	e01c      	b.n	8001c8c <WCS1700_compute_data+0x4c>
		if (j + wcs1700->index < wcs1700->lengthData) {
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	7b5b      	ldrb	r3, [r3, #13]
 8001c56:	461a      	mov	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	441a      	add	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d20d      	bcs.n	8001c80 <WCS1700_compute_data+0x40>
			sum += wcs1700->pData[j + wcs1700->index];
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	7b5b      	ldrb	r3, [r3, #13]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	440b      	add	r3, r1
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	4413      	add	r3, r2
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]
	for (uint32_t j =  0; j < wcs1700->lengthData; j += wcs1700->rank) {
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	7b1b      	ldrb	r3, [r3, #12]
 8001c84:	461a      	mov	r2, r3
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	4413      	add	r3, r2
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	68ba      	ldr	r2, [r7, #8]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d3dd      	bcc.n	8001c52 <WCS1700_compute_data+0x12>
		}
	}
	wcs1700->adcValue = (float)sum / (wcs1700->lengthData/wcs1700->rank)  ;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	ee07 3a90 	vmov	s15, r3
 8001c9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	7b12      	ldrb	r2, [r2, #12]
 8001ca8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cac:	ee07 3a90 	vmov	s15, r3
 8001cb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	edc3 7a05 	vstr	s15, [r3, #20]
	wcs1700->raw_voltage = mapf(wcs1700->adcValue,0,wcs1700->ADCResolution,0,3.3);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	edd3 7a05 	vldr	s15, [r3, #20]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	ed93 7a04 	vldr	s14, [r3, #16]
 8001cca:	ed9f 2a23 	vldr	s4, [pc, #140]	@ 8001d58 <WCS1700_compute_data+0x118>
 8001cce:	eddf 1a23 	vldr	s3, [pc, #140]	@ 8001d5c <WCS1700_compute_data+0x11c>
 8001cd2:	eeb0 1a47 	vmov.f32	s2, s14
 8001cd6:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8001d5c <WCS1700_compute_data+0x11c>
 8001cda:	eeb0 0a67 	vmov.f32	s0, s15
 8001cde:	f7ff fa79 	bl	80011d4 <mapf>
 8001ce2:	eef0 7a40 	vmov.f32	s15, s0
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	edc3 7a06 	vstr	s15, [r3, #24]
	wcs1700->voltage = wcs1700->raw_voltage - wcs1700->offset_voltage;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	ed93 7a06 	vldr	s14, [r3, #24]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	edc3 7a07 	vstr	s15, [r3, #28]
	wcs1700->current = 15.1793457908771*wcs1700->voltage - 24.8674344063837; //Linear Regression 9 points
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fbea 	bl	80004e0 <__aeabi_f2d>
 8001d0c:	a30e      	add	r3, pc, #56	@ (adr r3, 8001d48 <WCS1700_compute_data+0x108>)
 8001d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d12:	f7fe fc3d 	bl	8000590 <__aeabi_dmul>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	a30c      	add	r3, pc, #48	@ (adr r3, 8001d50 <WCS1700_compute_data+0x110>)
 8001d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d24:	f7fe fa7c 	bl	8000220 <__aeabi_dsub>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f7fe fe60 	bl	80009f4 <__aeabi_d2f>
 8001d34:	4602      	mov	r2, r0
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	621a      	str	r2, [r3, #32]

}
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	f3af 8000 	nop.w
 8001d48:	3624fc1c 	.word	0x3624fc1c
 8001d4c:	402e5bd3 	.word	0x402e5bd3
 8001d50:	2e66d7da 	.word	0x2e66d7da
 8001d54:	4038de10 	.word	0x4038de10
 8001d58:	40533333 	.word	0x40533333
 8001d5c:	00000000 	.word	0x00000000

08001d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d64:	f001 fad1 	bl	800330a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d68:	f000 f818 	bl	8001d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d6c:	f000 fc62 	bl	8002634 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d70:	f000 fc16 	bl	80025a0 <MX_DMA_Init>
  MX_TIM2_Init();
 8001d74:	f000 f982 	bl	800207c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d78:	f000 f9ce 	bl	8002118 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001d7c:	f000 fa22 	bl	80021c4 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001d80:	f000 faa2 	bl	80022c8 <MX_TIM8_Init>
  MX_ADC1_Init();
 8001d84:	f000 f856 	bl	8001e34 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8001d88:	f000 f92e 	bl	8001fe8 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8001d8c:	f000 f8ec 	bl	8001f68 <MX_I2C1_Init>
  MX_TIM20_Init();
 8001d90:	f000 fb56 	bl	8002440 <MX_TIM20_Init>
  /* USER CODE BEGIN 2 */
	RMX_Motor_begin();
 8001d94:	f7ff fe4e 	bl	8001a34 <RMX_Motor_begin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001d98:	bf00      	nop
 8001d9a:	e7fd      	b.n	8001d98 <main+0x38>

08001d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b094      	sub	sp, #80	@ 0x50
 8001da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da2:	f107 0318 	add.w	r3, r7, #24
 8001da6:	2238      	movs	r2, #56	@ 0x38
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f008 ffe0 	bl	800ad70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f004 fcc8 	bl	8006754 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dce:	2340      	movs	r3, #64	@ 0x40
 8001dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001dda:	2304      	movs	r3, #4
 8001ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001dde:	2355      	movs	r3, #85	@ 0x55
 8001de0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001de2:	2302      	movs	r3, #2
 8001de4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001de6:	2302      	movs	r3, #2
 8001de8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dea:	2302      	movs	r3, #2
 8001dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dee:	f107 0318 	add.w	r3, r7, #24
 8001df2:	4618      	mov	r0, r3
 8001df4:	f004 fd62 	bl	80068bc <HAL_RCC_OscConfig>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001dfe:	f000 fe4d 	bl	8002a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e02:	230f      	movs	r3, #15
 8001e04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e06:	2303      	movs	r3, #3
 8001e08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	2104      	movs	r1, #4
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f005 f860 	bl	8006ee0 <HAL_RCC_ClockConfig>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001e26:	f000 fe39 	bl	8002a9c <Error_Handler>
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	3750      	adds	r7, #80	@ 0x50
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08c      	sub	sp, #48	@ 0x30
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001e3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	2220      	movs	r2, #32
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f008 ff8f 	bl	800ad70 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e52:	4b41      	ldr	r3, [pc, #260]	@ (8001f58 <MX_ADC1_Init+0x124>)
 8001e54:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001e58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f58 <MX_ADC1_Init+0x124>)
 8001e5c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e62:	4b3d      	ldr	r3, [pc, #244]	@ (8001f58 <MX_ADC1_Init+0x124>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e68:	4b3b      	ldr	r3, [pc, #236]	@ (8001f58 <MX_ADC1_Init+0x124>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001e6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f58 <MX_ADC1_Init+0x124>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001e74:	4b38      	ldr	r3, [pc, #224]	@ (8001f58 <MX_ADC1_Init+0x124>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e7a:	4b37      	ldr	r3, [pc, #220]	@ (8001f58 <MX_ADC1_Init+0x124>)
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001e80:	4b35      	ldr	r3, [pc, #212]	@ (8001f58 <MX_ADC1_Init+0x124>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e86:	4b34      	ldr	r3, [pc, #208]	@ (8001f58 <MX_ADC1_Init+0x124>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8001e8c:	4b32      	ldr	r3, [pc, #200]	@ (8001f58 <MX_ADC1_Init+0x124>)
 8001e8e:	2203      	movs	r2, #3
 8001e90:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e92:	4b31      	ldr	r3, [pc, #196]	@ (8001f58 <MX_ADC1_Init+0x124>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f58 <MX_ADC1_Init+0x124>)
 8001e9c:	f44f 62ac 	mov.w	r2, #1376	@ 0x560
 8001ea0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001ea2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f58 <MX_ADC1_Init+0x124>)
 8001ea4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ea8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001eaa:	4b2b      	ldr	r3, [pc, #172]	@ (8001f58 <MX_ADC1_Init+0x124>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001eb2:	4b29      	ldr	r3, [pc, #164]	@ (8001f58 <MX_ADC1_Init+0x124>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001eb8:	4b27      	ldr	r3, [pc, #156]	@ (8001f58 <MX_ADC1_Init+0x124>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ec0:	4825      	ldr	r0, [pc, #148]	@ (8001f58 <MX_ADC1_Init+0x124>)
 8001ec2:	f001 fcd7 	bl	8003874 <HAL_ADC_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001ecc:	f000 fde6 	bl	8002a9c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001ed4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ed8:	4619      	mov	r1, r3
 8001eda:	481f      	ldr	r0, [pc, #124]	@ (8001f58 <MX_ADC1_Init+0x124>)
 8001edc:	f002 fdf6 	bl	8004acc <HAL_ADCEx_MultiModeConfigChannel>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001ee6:	f000 fdd9 	bl	8002a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001eea:	4b1c      	ldr	r3, [pc, #112]	@ (8001f5c <MX_ADC1_Init+0x128>)
 8001eec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001eee:	2306      	movs	r3, #6
 8001ef0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001ef2:	2307      	movs	r3, #7
 8001ef4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ef6:	237f      	movs	r3, #127	@ 0x7f
 8001ef8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001efa:	2304      	movs	r3, #4
 8001efc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	4619      	mov	r1, r3
 8001f06:	4814      	ldr	r0, [pc, #80]	@ (8001f58 <MX_ADC1_Init+0x124>)
 8001f08:	f001 ff62 	bl	8003dd0 <HAL_ADC_ConfigChannel>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001f12:	f000 fdc3 	bl	8002a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001f16:	4b12      	ldr	r3, [pc, #72]	@ (8001f60 <MX_ADC1_Init+0x12c>)
 8001f18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001f1a:	230c      	movs	r3, #12
 8001f1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	4619      	mov	r1, r3
 8001f22:	480d      	ldr	r0, [pc, #52]	@ (8001f58 <MX_ADC1_Init+0x124>)
 8001f24:	f001 ff54 	bl	8003dd0 <HAL_ADC_ConfigChannel>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001f2e:	f000 fdb5 	bl	8002a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001f32:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <MX_ADC1_Init+0x130>)
 8001f34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001f36:	2312      	movs	r3, #18
 8001f38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4806      	ldr	r0, [pc, #24]	@ (8001f58 <MX_ADC1_Init+0x124>)
 8001f40:	f001 ff46 	bl	8003dd0 <HAL_ADC_ConfigChannel>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8001f4a:	f000 fda7 	bl	8002a9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f4e:	bf00      	nop
 8001f50:	3730      	adds	r7, #48	@ 0x30
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000314 	.word	0x20000314
 8001f5c:	04300002 	.word	0x04300002
 8001f60:	08600004 	.word	0x08600004
 8001f64:	3ef08000 	.word	0x3ef08000

08001f68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fdc <MX_I2C1_Init+0x74>)
 8001f6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe0 <MX_I2C1_Init+0x78>)
 8001f70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 8001f72:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <MX_I2C1_Init+0x74>)
 8001f74:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe4 <MX_I2C1_Init+0x7c>)
 8001f76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f78:	4b18      	ldr	r3, [pc, #96]	@ (8001fdc <MX_I2C1_Init+0x74>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f7e:	4b17      	ldr	r3, [pc, #92]	@ (8001fdc <MX_I2C1_Init+0x74>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f84:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <MX_I2C1_Init+0x74>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f8a:	4b14      	ldr	r3, [pc, #80]	@ (8001fdc <MX_I2C1_Init+0x74>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f90:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <MX_I2C1_Init+0x74>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <MX_I2C1_Init+0x74>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fdc <MX_I2C1_Init+0x74>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fa2:	480e      	ldr	r0, [pc, #56]	@ (8001fdc <MX_I2C1_Init+0x74>)
 8001fa4:	f003 fca7 	bl	80058f6 <HAL_I2C_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001fae:	f000 fd75 	bl	8002a9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4809      	ldr	r0, [pc, #36]	@ (8001fdc <MX_I2C1_Init+0x74>)
 8001fb6:	f004 fb36 	bl	8006626 <HAL_I2CEx_ConfigAnalogFilter>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001fc0:	f000 fd6c 	bl	8002a9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4805      	ldr	r0, [pc, #20]	@ (8001fdc <MX_I2C1_Init+0x74>)
 8001fc8:	f004 fb78 	bl	80066bc <HAL_I2CEx_ConfigDigitalFilter>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001fd2:	f000 fd63 	bl	8002a9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200003e0 	.word	0x200003e0
 8001fe0:	40005400 	.word	0x40005400
 8001fe4:	40621236 	.word	0x40621236

08001fe8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001fec:	4b20      	ldr	r3, [pc, #128]	@ (8002070 <MX_LPUART1_UART_Init+0x88>)
 8001fee:	4a21      	ldr	r2, [pc, #132]	@ (8002074 <MX_LPUART1_UART_Init+0x8c>)
 8001ff0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8001ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8002070 <MX_LPUART1_UART_Init+0x88>)
 8001ff4:	4a20      	ldr	r2, [pc, #128]	@ (8002078 <MX_LPUART1_UART_Init+0x90>)
 8001ff6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <MX_LPUART1_UART_Init+0x88>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8002070 <MX_LPUART1_UART_Init+0x88>)
 8002000:	2200      	movs	r2, #0
 8002002:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002004:	4b1a      	ldr	r3, [pc, #104]	@ (8002070 <MX_LPUART1_UART_Init+0x88>)
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800200a:	4b19      	ldr	r3, [pc, #100]	@ (8002070 <MX_LPUART1_UART_Init+0x88>)
 800200c:	220c      	movs	r2, #12
 800200e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002010:	4b17      	ldr	r3, [pc, #92]	@ (8002070 <MX_LPUART1_UART_Init+0x88>)
 8002012:	2200      	movs	r2, #0
 8002014:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002016:	4b16      	ldr	r3, [pc, #88]	@ (8002070 <MX_LPUART1_UART_Init+0x88>)
 8002018:	2200      	movs	r2, #0
 800201a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800201c:	4b14      	ldr	r3, [pc, #80]	@ (8002070 <MX_LPUART1_UART_Init+0x88>)
 800201e:	2200      	movs	r2, #0
 8002020:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002022:	4b13      	ldr	r3, [pc, #76]	@ (8002070 <MX_LPUART1_UART_Init+0x88>)
 8002024:	2200      	movs	r2, #0
 8002026:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002028:	4811      	ldr	r0, [pc, #68]	@ (8002070 <MX_LPUART1_UART_Init+0x88>)
 800202a:	f007 f95d 	bl	80092e8 <HAL_UART_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8002034:	f000 fd32 	bl	8002a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002038:	2100      	movs	r1, #0
 800203a:	480d      	ldr	r0, [pc, #52]	@ (8002070 <MX_LPUART1_UART_Init+0x88>)
 800203c:	f008 fdcd 	bl	800abda <HAL_UARTEx_SetTxFifoThreshold>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8002046:	f000 fd29 	bl	8002a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800204a:	2100      	movs	r1, #0
 800204c:	4808      	ldr	r0, [pc, #32]	@ (8002070 <MX_LPUART1_UART_Init+0x88>)
 800204e:	f008 fe02 	bl	800ac56 <HAL_UARTEx_SetRxFifoThreshold>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8002058:	f000 fd20 	bl	8002a9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800205c:	4804      	ldr	r0, [pc, #16]	@ (8002070 <MX_LPUART1_UART_Init+0x88>)
 800205e:	f008 fd83 	bl	800ab68 <HAL_UARTEx_DisableFifoMode>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8002068:	f000 fd18 	bl	8002a9c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}
 8002070:	200004f4 	.word	0x200004f4
 8002074:	40008000 	.word	0x40008000
 8002078:	001e8480 	.word	0x001e8480

0800207c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002082:	f107 0310 	add.w	r3, r7, #16
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800209a:	4b1e      	ldr	r3, [pc, #120]	@ (8002114 <MX_TIM2_Init+0x98>)
 800209c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80020a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002114 <MX_TIM2_Init+0x98>)
 80020a4:	22a9      	movs	r2, #169	@ 0xa9
 80020a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002114 <MX_TIM2_Init+0x98>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80020ae:	4b19      	ldr	r3, [pc, #100]	@ (8002114 <MX_TIM2_Init+0x98>)
 80020b0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b6:	4b17      	ldr	r3, [pc, #92]	@ (8002114 <MX_TIM2_Init+0x98>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020bc:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <MX_TIM2_Init+0x98>)
 80020be:	2200      	movs	r2, #0
 80020c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020c2:	4814      	ldr	r0, [pc, #80]	@ (8002114 <MX_TIM2_Init+0x98>)
 80020c4:	f005 fb76 	bl	80077b4 <HAL_TIM_Base_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80020ce:	f000 fce5 	bl	8002a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020d8:	f107 0310 	add.w	r3, r7, #16
 80020dc:	4619      	mov	r1, r3
 80020de:	480d      	ldr	r0, [pc, #52]	@ (8002114 <MX_TIM2_Init+0x98>)
 80020e0:	f006 f9b4 	bl	800844c <HAL_TIM_ConfigClockSource>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80020ea:	f000 fcd7 	bl	8002a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80020ee:	2320      	movs	r3, #32
 80020f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	4619      	mov	r1, r3
 80020fa:	4806      	ldr	r0, [pc, #24]	@ (8002114 <MX_TIM2_Init+0x98>)
 80020fc:	f006 ff84 	bl	8009008 <HAL_TIMEx_MasterConfigSynchronization>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002106:	f000 fcc9 	bl	8002a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800210a:	bf00      	nop
 800210c:	3720      	adds	r7, #32
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000648 	.word	0x20000648

08002118 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08c      	sub	sp, #48	@ 0x30
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800211e:	f107 030c 	add.w	r3, r7, #12
 8002122:	2224      	movs	r2, #36	@ 0x24
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f008 fe22 	bl	800ad70 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212c:	463b      	mov	r3, r7
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002136:	4b21      	ldr	r3, [pc, #132]	@ (80021bc <MX_TIM3_Init+0xa4>)
 8002138:	4a21      	ldr	r2, [pc, #132]	@ (80021c0 <MX_TIM3_Init+0xa8>)
 800213a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800213c:	4b1f      	ldr	r3, [pc, #124]	@ (80021bc <MX_TIM3_Init+0xa4>)
 800213e:	2200      	movs	r2, #0
 8002140:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002142:	4b1e      	ldr	r3, [pc, #120]	@ (80021bc <MX_TIM3_Init+0xa4>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002148:	4b1c      	ldr	r3, [pc, #112]	@ (80021bc <MX_TIM3_Init+0xa4>)
 800214a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800214e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002150:	4b1a      	ldr	r3, [pc, #104]	@ (80021bc <MX_TIM3_Init+0xa4>)
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002156:	4b19      	ldr	r3, [pc, #100]	@ (80021bc <MX_TIM3_Init+0xa4>)
 8002158:	2200      	movs	r2, #0
 800215a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800215c:	2303      	movs	r3, #3
 800215e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002160:	2300      	movs	r3, #0
 8002162:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002164:	2301      	movs	r3, #1
 8002166:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002168:	2300      	movs	r3, #0
 800216a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002170:	2300      	movs	r3, #0
 8002172:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002174:	2301      	movs	r3, #1
 8002176:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002178:	2300      	movs	r3, #0
 800217a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002180:	f107 030c 	add.w	r3, r7, #12
 8002184:	4619      	mov	r1, r3
 8002186:	480d      	ldr	r0, [pc, #52]	@ (80021bc <MX_TIM3_Init+0xa4>)
 8002188:	f005 fdc8 	bl	8007d1c <HAL_TIM_Encoder_Init>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002192:	f000 fc83 	bl	8002a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002196:	2300      	movs	r3, #0
 8002198:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800219e:	463b      	mov	r3, r7
 80021a0:	4619      	mov	r1, r3
 80021a2:	4806      	ldr	r0, [pc, #24]	@ (80021bc <MX_TIM3_Init+0xa4>)
 80021a4:	f006 ff30 	bl	8009008 <HAL_TIMEx_MasterConfigSynchronization>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80021ae:	f000 fc75 	bl	8002a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021b2:	bf00      	nop
 80021b4:	3730      	adds	r7, #48	@ 0x30
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000694 	.word	0x20000694
 80021c0:	40000400 	.word	0x40000400

080021c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08e      	sub	sp, #56	@ 0x38
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d8:	f107 031c 	add.w	r3, r7, #28
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021e4:	463b      	mov	r3, r7
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	60da      	str	r2, [r3, #12]
 80021f0:	611a      	str	r2, [r3, #16]
 80021f2:	615a      	str	r2, [r3, #20]
 80021f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021f6:	4b32      	ldr	r3, [pc, #200]	@ (80022c0 <MX_TIM4_Init+0xfc>)
 80021f8:	4a32      	ldr	r2, [pc, #200]	@ (80022c4 <MX_TIM4_Init+0x100>)
 80021fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80021fc:	4b30      	ldr	r3, [pc, #192]	@ (80022c0 <MX_TIM4_Init+0xfc>)
 80021fe:	2200      	movs	r2, #0
 8002200:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002202:	4b2f      	ldr	r3, [pc, #188]	@ (80022c0 <MX_TIM4_Init+0xfc>)
 8002204:	2200      	movs	r2, #0
 8002206:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002208:	4b2d      	ldr	r3, [pc, #180]	@ (80022c0 <MX_TIM4_Init+0xfc>)
 800220a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800220e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002210:	4b2b      	ldr	r3, [pc, #172]	@ (80022c0 <MX_TIM4_Init+0xfc>)
 8002212:	2200      	movs	r2, #0
 8002214:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002216:	4b2a      	ldr	r3, [pc, #168]	@ (80022c0 <MX_TIM4_Init+0xfc>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800221c:	4828      	ldr	r0, [pc, #160]	@ (80022c0 <MX_TIM4_Init+0xfc>)
 800221e:	f005 fac9 	bl	80077b4 <HAL_TIM_Base_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002228:	f000 fc38 	bl	8002a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800222c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002230:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002232:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002236:	4619      	mov	r1, r3
 8002238:	4821      	ldr	r0, [pc, #132]	@ (80022c0 <MX_TIM4_Init+0xfc>)
 800223a:	f006 f907 	bl	800844c <HAL_TIM_ConfigClockSource>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002244:	f000 fc2a 	bl	8002a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002248:	481d      	ldr	r0, [pc, #116]	@ (80022c0 <MX_TIM4_Init+0xfc>)
 800224a:	f005 fbf3 	bl	8007a34 <HAL_TIM_PWM_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002254:	f000 fc22 	bl	8002a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002258:	2300      	movs	r3, #0
 800225a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002260:	f107 031c 	add.w	r3, r7, #28
 8002264:	4619      	mov	r1, r3
 8002266:	4816      	ldr	r0, [pc, #88]	@ (80022c0 <MX_TIM4_Init+0xfc>)
 8002268:	f006 fece 	bl	8009008 <HAL_TIMEx_MasterConfigSynchronization>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002272:	f000 fc13 	bl	8002a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002276:	2360      	movs	r3, #96	@ 0x60
 8002278:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002286:	463b      	mov	r3, r7
 8002288:	2200      	movs	r2, #0
 800228a:	4619      	mov	r1, r3
 800228c:	480c      	ldr	r0, [pc, #48]	@ (80022c0 <MX_TIM4_Init+0xfc>)
 800228e:	f005 ffc9 	bl	8008224 <HAL_TIM_PWM_ConfigChannel>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002298:	f000 fc00 	bl	8002a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800229c:	463b      	mov	r3, r7
 800229e:	2204      	movs	r2, #4
 80022a0:	4619      	mov	r1, r3
 80022a2:	4807      	ldr	r0, [pc, #28]	@ (80022c0 <MX_TIM4_Init+0xfc>)
 80022a4:	f005 ffbe 	bl	8008224 <HAL_TIM_PWM_ConfigChannel>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80022ae:	f000 fbf5 	bl	8002a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80022b2:	4803      	ldr	r0, [pc, #12]	@ (80022c0 <MX_TIM4_Init+0xfc>)
 80022b4:	f000 feda 	bl	800306c <HAL_TIM_MspPostInit>

}
 80022b8:	bf00      	nop
 80022ba:	3738      	adds	r7, #56	@ 0x38
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	200006e0 	.word	0x200006e0
 80022c4:	40000800 	.word	0x40000800

080022c8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b09c      	sub	sp, #112	@ 0x70
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ce:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
 80022f8:	615a      	str	r2, [r3, #20]
 80022fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	2234      	movs	r2, #52	@ 0x34
 8002300:	2100      	movs	r1, #0
 8002302:	4618      	mov	r0, r3
 8002304:	f008 fd34 	bl	800ad70 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002308:	4b4b      	ldr	r3, [pc, #300]	@ (8002438 <MX_TIM8_Init+0x170>)
 800230a:	4a4c      	ldr	r2, [pc, #304]	@ (800243c <MX_TIM8_Init+0x174>)
 800230c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800230e:	4b4a      	ldr	r3, [pc, #296]	@ (8002438 <MX_TIM8_Init+0x170>)
 8002310:	2200      	movs	r2, #0
 8002312:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002314:	4b48      	ldr	r3, [pc, #288]	@ (8002438 <MX_TIM8_Init+0x170>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800231a:	4b47      	ldr	r3, [pc, #284]	@ (8002438 <MX_TIM8_Init+0x170>)
 800231c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002320:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002322:	4b45      	ldr	r3, [pc, #276]	@ (8002438 <MX_TIM8_Init+0x170>)
 8002324:	2200      	movs	r2, #0
 8002326:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002328:	4b43      	ldr	r3, [pc, #268]	@ (8002438 <MX_TIM8_Init+0x170>)
 800232a:	2200      	movs	r2, #0
 800232c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800232e:	4b42      	ldr	r3, [pc, #264]	@ (8002438 <MX_TIM8_Init+0x170>)
 8002330:	2200      	movs	r2, #0
 8002332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002334:	4840      	ldr	r0, [pc, #256]	@ (8002438 <MX_TIM8_Init+0x170>)
 8002336:	f005 fa3d 	bl	80077b4 <HAL_TIM_Base_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002340:	f000 fbac 	bl	8002a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002344:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002348:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800234a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800234e:	4619      	mov	r1, r3
 8002350:	4839      	ldr	r0, [pc, #228]	@ (8002438 <MX_TIM8_Init+0x170>)
 8002352:	f006 f87b 	bl	800844c <HAL_TIM_ConfigClockSource>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800235c:	f000 fb9e 	bl	8002a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002360:	4835      	ldr	r0, [pc, #212]	@ (8002438 <MX_TIM8_Init+0x170>)
 8002362:	f005 fb67 	bl	8007a34 <HAL_TIM_PWM_Init>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800236c:	f000 fb96 	bl	8002a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002370:	2300      	movs	r3, #0
 8002372:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002374:	2300      	movs	r3, #0
 8002376:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002378:	2300      	movs	r3, #0
 800237a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800237c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002380:	4619      	mov	r1, r3
 8002382:	482d      	ldr	r0, [pc, #180]	@ (8002438 <MX_TIM8_Init+0x170>)
 8002384:	f006 fe40 	bl	8009008 <HAL_TIMEx_MasterConfigSynchronization>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800238e:	f000 fb85 	bl	8002a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002392:	2360      	movs	r3, #96	@ 0x60
 8002394:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800239a:	2300      	movs	r3, #0
 800239c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800239e:	2300      	movs	r3, #0
 80023a0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023a2:	2300      	movs	r3, #0
 80023a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023a6:	2300      	movs	r3, #0
 80023a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80023b2:	2200      	movs	r2, #0
 80023b4:	4619      	mov	r1, r3
 80023b6:	4820      	ldr	r0, [pc, #128]	@ (8002438 <MX_TIM8_Init+0x170>)
 80023b8:	f005 ff34 	bl	8008224 <HAL_TIM_PWM_ConfigChannel>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80023c2:	f000 fb6b 	bl	8002a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023c6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80023ca:	2204      	movs	r2, #4
 80023cc:	4619      	mov	r1, r3
 80023ce:	481a      	ldr	r0, [pc, #104]	@ (8002438 <MX_TIM8_Init+0x170>)
 80023d0:	f005 ff28 	bl	8008224 <HAL_TIM_PWM_ConfigChannel>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 80023da:	f000 fb5f 	bl	8002a9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80023fc:	2300      	movs	r3, #0
 80023fe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002400:	2300      	movs	r3, #0
 8002402:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002404:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002408:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800240e:	2300      	movs	r3, #0
 8002410:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002412:	2300      	movs	r3, #0
 8002414:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002416:	1d3b      	adds	r3, r7, #4
 8002418:	4619      	mov	r1, r3
 800241a:	4807      	ldr	r0, [pc, #28]	@ (8002438 <MX_TIM8_Init+0x170>)
 800241c:	f006 fe8a 	bl	8009134 <HAL_TIMEx_ConfigBreakDeadTime>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM8_Init+0x162>
  {
    Error_Handler();
 8002426:	f000 fb39 	bl	8002a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800242a:	4803      	ldr	r0, [pc, #12]	@ (8002438 <MX_TIM8_Init+0x170>)
 800242c:	f000 fe1e 	bl	800306c <HAL_TIM_MspPostInit>

}
 8002430:	bf00      	nop
 8002432:	3770      	adds	r7, #112	@ 0x70
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	2000072c 	.word	0x2000072c
 800243c:	40013400 	.word	0x40013400

08002440 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b09c      	sub	sp, #112	@ 0x70
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002446:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]
 8002452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002454:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002460:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
 8002470:	615a      	str	r2, [r3, #20]
 8002472:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002474:	1d3b      	adds	r3, r7, #4
 8002476:	2234      	movs	r2, #52	@ 0x34
 8002478:	2100      	movs	r1, #0
 800247a:	4618      	mov	r0, r3
 800247c:	f008 fc78 	bl	800ad70 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8002480:	4b45      	ldr	r3, [pc, #276]	@ (8002598 <MX_TIM20_Init+0x158>)
 8002482:	4a46      	ldr	r2, [pc, #280]	@ (800259c <MX_TIM20_Init+0x15c>)
 8002484:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8002486:	4b44      	ldr	r3, [pc, #272]	@ (8002598 <MX_TIM20_Init+0x158>)
 8002488:	2200      	movs	r2, #0
 800248a:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 800248c:	4b42      	ldr	r3, [pc, #264]	@ (8002598 <MX_TIM20_Init+0x158>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8002492:	4b41      	ldr	r3, [pc, #260]	@ (8002598 <MX_TIM20_Init+0x158>)
 8002494:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002498:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800249a:	4b3f      	ldr	r3, [pc, #252]	@ (8002598 <MX_TIM20_Init+0x158>)
 800249c:	2200      	movs	r2, #0
 800249e:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 80024a0:	4b3d      	ldr	r3, [pc, #244]	@ (8002598 <MX_TIM20_Init+0x158>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002598 <MX_TIM20_Init+0x158>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 80024ac:	483a      	ldr	r0, [pc, #232]	@ (8002598 <MX_TIM20_Init+0x158>)
 80024ae:	f005 f981 	bl	80077b4 <HAL_TIM_Base_Init>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 80024b8:	f000 faf0 	bl	8002a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024c0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 80024c2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80024c6:	4619      	mov	r1, r3
 80024c8:	4833      	ldr	r0, [pc, #204]	@ (8002598 <MX_TIM20_Init+0x158>)
 80024ca:	f005 ffbf 	bl	800844c <HAL_TIM_ConfigClockSource>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 80024d4:	f000 fae2 	bl	8002a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 80024d8:	482f      	ldr	r0, [pc, #188]	@ (8002598 <MX_TIM20_Init+0x158>)
 80024da:	f005 faab 	bl	8007a34 <HAL_TIM_PWM_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 80024e4:	f000 fada 	bl	8002a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e8:	2300      	movs	r3, #0
 80024ea:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024ec:	2300      	movs	r3, #0
 80024ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 80024f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024f8:	4619      	mov	r1, r3
 80024fa:	4827      	ldr	r0, [pc, #156]	@ (8002598 <MX_TIM20_Init+0x158>)
 80024fc:	f006 fd84 	bl	8009008 <HAL_TIMEx_MasterConfigSynchronization>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8002506:	f000 fac9 	bl	8002a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800250a:	2360      	movs	r3, #96	@ 0x60
 800250c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002512:	2300      	movs	r3, #0
 8002514:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002516:	2300      	movs	r3, #0
 8002518:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002522:	2300      	movs	r3, #0
 8002524:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002526:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800252a:	2208      	movs	r2, #8
 800252c:	4619      	mov	r1, r3
 800252e:	481a      	ldr	r0, [pc, #104]	@ (8002598 <MX_TIM20_Init+0x158>)
 8002530:	f005 fe78 	bl	8008224 <HAL_TIM_PWM_ConfigChannel>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 800253a:	f000 faaf 	bl	8002a9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002552:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002556:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800255c:	2300      	movs	r3, #0
 800255e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002560:	2300      	movs	r3, #0
 8002562:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002564:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002568:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800256e:	2300      	movs	r3, #0
 8002570:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002572:	2300      	movs	r3, #0
 8002574:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	4619      	mov	r1, r3
 800257a:	4807      	ldr	r0, [pc, #28]	@ (8002598 <MX_TIM20_Init+0x158>)
 800257c:	f006 fdda 	bl	8009134 <HAL_TIMEx_ConfigBreakDeadTime>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM20_Init+0x14a>
  {
    Error_Handler();
 8002586:	f000 fa89 	bl	8002a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 800258a:	4803      	ldr	r0, [pc, #12]	@ (8002598 <MX_TIM20_Init+0x158>)
 800258c:	f000 fd6e 	bl	800306c <HAL_TIM_MspPostInit>

}
 8002590:	bf00      	nop
 8002592:	3770      	adds	r7, #112	@ 0x70
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000778 	.word	0x20000778
 800259c:	40015000 	.word	0x40015000

080025a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80025a6:	4b22      	ldr	r3, [pc, #136]	@ (8002630 <MX_DMA_Init+0x90>)
 80025a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025aa:	4a21      	ldr	r2, [pc, #132]	@ (8002630 <MX_DMA_Init+0x90>)
 80025ac:	f043 0304 	orr.w	r3, r3, #4
 80025b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80025b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002630 <MX_DMA_Init+0x90>)
 80025b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025be:	4b1c      	ldr	r3, [pc, #112]	@ (8002630 <MX_DMA_Init+0x90>)
 80025c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002630 <MX_DMA_Init+0x90>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80025ca:	4b19      	ldr	r3, [pc, #100]	@ (8002630 <MX_DMA_Init+0x90>)
 80025cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80025d6:	2200      	movs	r2, #0
 80025d8:	2100      	movs	r1, #0
 80025da:	200b      	movs	r0, #11
 80025dc:	f002 fc59 	bl	8004e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80025e0:	200b      	movs	r0, #11
 80025e2:	f002 fc70 	bl	8004ec6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80025e6:	2200      	movs	r2, #0
 80025e8:	2100      	movs	r1, #0
 80025ea:	200c      	movs	r0, #12
 80025ec:	f002 fc51 	bl	8004e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80025f0:	200c      	movs	r0, #12
 80025f2:	f002 fc68 	bl	8004ec6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	2100      	movs	r1, #0
 80025fa:	200d      	movs	r0, #13
 80025fc:	f002 fc49 	bl	8004e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002600:	200d      	movs	r0, #13
 8002602:	f002 fc60 	bl	8004ec6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	2100      	movs	r1, #0
 800260a:	200e      	movs	r0, #14
 800260c:	f002 fc41 	bl	8004e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002610:	200e      	movs	r0, #14
 8002612:	f002 fc58 	bl	8004ec6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002616:	2200      	movs	r2, #0
 8002618:	2100      	movs	r1, #0
 800261a:	200f      	movs	r0, #15
 800261c:	f002 fc39 	bl	8004e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002620:	200f      	movs	r0, #15
 8002622:	f002 fc50 	bl	8004ec6 <HAL_NVIC_EnableIRQ>

}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000

08002634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	@ 0x28
 8002638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263a:	f107 0314 	add.w	r3, r7, #20
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	60da      	str	r2, [r3, #12]
 8002648:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800264a:	4b3a      	ldr	r3, [pc, #232]	@ (8002734 <MX_GPIO_Init+0x100>)
 800264c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264e:	4a39      	ldr	r2, [pc, #228]	@ (8002734 <MX_GPIO_Init+0x100>)
 8002650:	f043 0304 	orr.w	r3, r3, #4
 8002654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002656:	4b37      	ldr	r3, [pc, #220]	@ (8002734 <MX_GPIO_Init+0x100>)
 8002658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002662:	4b34      	ldr	r3, [pc, #208]	@ (8002734 <MX_GPIO_Init+0x100>)
 8002664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002666:	4a33      	ldr	r2, [pc, #204]	@ (8002734 <MX_GPIO_Init+0x100>)
 8002668:	f043 0320 	orr.w	r3, r3, #32
 800266c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800266e:	4b31      	ldr	r3, [pc, #196]	@ (8002734 <MX_GPIO_Init+0x100>)
 8002670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800267a:	4b2e      	ldr	r3, [pc, #184]	@ (8002734 <MX_GPIO_Init+0x100>)
 800267c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267e:	4a2d      	ldr	r2, [pc, #180]	@ (8002734 <MX_GPIO_Init+0x100>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002686:	4b2b      	ldr	r3, [pc, #172]	@ (8002734 <MX_GPIO_Init+0x100>)
 8002688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002692:	4b28      	ldr	r3, [pc, #160]	@ (8002734 <MX_GPIO_Init+0x100>)
 8002694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002696:	4a27      	ldr	r2, [pc, #156]	@ (8002734 <MX_GPIO_Init+0x100>)
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800269e:	4b25      	ldr	r3, [pc, #148]	@ (8002734 <MX_GPIO_Init+0x100>)
 80026a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80026aa:	2200      	movs	r2, #0
 80026ac:	2120      	movs	r1, #32
 80026ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026b2:	f003 f8e5 	bl	8005880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14
 80026b6:	2200      	movs	r2, #0
 80026b8:	f24e 0106 	movw	r1, #57350	@ 0xe006
 80026bc:	481e      	ldr	r0, [pc, #120]	@ (8002738 <MX_GPIO_Init+0x104>)
 80026be:	f003 f8df 	bl	8005880 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80026c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80026cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80026d2:	f107 0314 	add.w	r3, r7, #20
 80026d6:	4619      	mov	r1, r3
 80026d8:	4818      	ldr	r0, [pc, #96]	@ (800273c <MX_GPIO_Init+0x108>)
 80026da:	f002 ff4f 	bl	800557c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80026de:	2320      	movs	r3, #32
 80026e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e2:	2301      	movs	r3, #1
 80026e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	2300      	movs	r3, #0
 80026ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80026ee:	f107 0314 	add.w	r3, r7, #20
 80026f2:	4619      	mov	r1, r3
 80026f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026f8:	f002 ff40 	bl	800557c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14
 80026fc:	f24e 0306 	movw	r3, #57350	@ 0xe006
 8002700:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002702:	2301      	movs	r3, #1
 8002704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270a:	2300      	movs	r3, #0
 800270c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270e:	f107 0314 	add.w	r3, r7, #20
 8002712:	4619      	mov	r1, r3
 8002714:	4808      	ldr	r0, [pc, #32]	@ (8002738 <MX_GPIO_Init+0x104>)
 8002716:	f002 ff31 	bl	800557c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800271a:	2200      	movs	r2, #0
 800271c:	2100      	movs	r1, #0
 800271e:	2028      	movs	r0, #40	@ 0x28
 8002720:	f002 fbb7 	bl	8004e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002724:	2028      	movs	r0, #40	@ 0x28
 8002726:	f002 fbce 	bl	8004ec6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800272a:	bf00      	nop
 800272c:	3728      	adds	r7, #40	@ 0x28
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
 8002738:	48000400 	.word	0x48000400
 800273c:	48000800 	.word	0x48000800

08002740 <LoadCell_compute_data>:

/* USER CODE BEGIN 4 */
void LoadCell_compute_data(){
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	607b      	str	r3, [r7, #4]
	for (uint32_t j =  0; j < ADC_BUFFER; j += ADC_RANK) {
 800274a:	2300      	movs	r3, #0
 800274c:	603b      	str	r3, [r7, #0]
 800274e:	e00f      	b.n	8002770 <LoadCell_compute_data+0x30>
		if (j + 2 < ADC_BUFFER) {
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	3302      	adds	r3, #2
 8002754:	2b77      	cmp	r3, #119	@ 0x77
 8002756:	d808      	bhi.n	800276a <LoadCell_compute_data+0x2a>
			sum += adc_raw[j + 2];
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	3302      	adds	r3, #2
 800275c:	4a0f      	ldr	r2, [pc, #60]	@ (800279c <LoadCell_compute_data+0x5c>)
 800275e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002762:	461a      	mov	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4413      	add	r3, r2
 8002768:	607b      	str	r3, [r7, #4]
	for (uint32_t j =  0; j < ADC_BUFFER; j += ADC_RANK) {
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	3303      	adds	r3, #3
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	2b77      	cmp	r3, #119	@ 0x77
 8002774:	d9ec      	bls.n	8002750 <LoadCell_compute_data+0x10>
		}
	}
	load_cell = (float)sum / (ADC_BUFFER/((float)ADC_RANK))  ;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	ee07 3a90 	vmov	s15, r3
 800277c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002780:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80027a0 <LoadCell_compute_data+0x60>
 8002784:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002788:	4b06      	ldr	r3, [pc, #24]	@ (80027a4 <LoadCell_compute_data+0x64>)
 800278a:	edc3 7a00 	vstr	s15, [r3]

}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	200001bc 	.word	0x200001bc
 80027a0:	42200000 	.word	0x42200000
 80027a4:	200007e0 	.word	0x200007e0

080027a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]

	if (huart == &hlpuart1) {
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a32      	ldr	r2, [pc, #200]	@ (800287c <HAL_UART_RxCpltCallback+0xd4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d15d      	bne.n	8002874 <HAL_UART_RxCpltCallback+0xcc>
		if (RxBuffer[0] == 69 ) { // PWM
 80027b8:	4b31      	ldr	r3, [pc, #196]	@ (8002880 <HAL_UART_RxCpltCallback+0xd8>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b45      	cmp	r3, #69	@ 0x45
 80027be:	d159      	bne.n	8002874 <HAL_UART_RxCpltCallback+0xcc>
//			torque_matlab = *(float *)&RxBuffer[1];
//			step_config_matlab = *(uint8_t *)&RxBuffer[5];
//			step_freq_matlab = *(int32_t *)&RxBuffer[6];
//			pwm_matlab = *(int32_t *)&RxBuffer[10];
//			freq_matlab = *(int32_t *)&RxBuffer[14];
			memcpy(&wcs1_offset_matlab, &RxBuffer[1], sizeof(float)); //4
 80027c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002880 <HAL_UART_RxCpltCallback+0xd8>)
 80027c2:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80027c6:	461a      	mov	r2, r3
 80027c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002884 <HAL_UART_RxCpltCallback+0xdc>)
 80027ca:	601a      	str	r2, [r3, #0]
			memcpy(&wcs2_offset_matlab, &RxBuffer[5], sizeof(float)); //4
 80027cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002880 <HAL_UART_RxCpltCallback+0xd8>)
 80027ce:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80027d2:	461a      	mov	r2, r3
 80027d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002888 <HAL_UART_RxCpltCallback+0xe0>)
 80027d6:	601a      	str	r2, [r3, #0]
			memcpy(&torque_matlab, &RxBuffer[9], sizeof(float)); //4
 80027d8:	4b29      	ldr	r3, [pc, #164]	@ (8002880 <HAL_UART_RxCpltCallback+0xd8>)
 80027da:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80027de:	461a      	mov	r2, r3
 80027e0:	4b2a      	ldr	r3, [pc, #168]	@ (800288c <HAL_UART_RxCpltCallback+0xe4>)
 80027e2:	601a      	str	r2, [r3, #0]
			memcpy(&step_config_matlab, &RxBuffer[13], sizeof(uint8_t)); //1
 80027e4:	4b26      	ldr	r3, [pc, #152]	@ (8002880 <HAL_UART_RxCpltCallback+0xd8>)
 80027e6:	7b5a      	ldrb	r2, [r3, #13]
 80027e8:	4b29      	ldr	r3, [pc, #164]	@ (8002890 <HAL_UART_RxCpltCallback+0xe8>)
 80027ea:	701a      	strb	r2, [r3, #0]
			memcpy(&step_freq_matlab, &RxBuffer[14], sizeof(int32_t)); //4
 80027ec:	4b24      	ldr	r3, [pc, #144]	@ (8002880 <HAL_UART_RxCpltCallback+0xd8>)
 80027ee:	f8d3 300e 	ldr.w	r3, [r3, #14]
 80027f2:	461a      	mov	r2, r3
 80027f4:	4b27      	ldr	r3, [pc, #156]	@ (8002894 <HAL_UART_RxCpltCallback+0xec>)
 80027f6:	601a      	str	r2, [r3, #0]
			memcpy(&pwm_matlab, &RxBuffer[18], sizeof(int32_t)); //4
 80027f8:	4b21      	ldr	r3, [pc, #132]	@ (8002880 <HAL_UART_RxCpltCallback+0xd8>)
 80027fa:	f8d3 3012 	ldr.w	r3, [r3, #18]
 80027fe:	461a      	mov	r2, r3
 8002800:	4b25      	ldr	r3, [pc, #148]	@ (8002898 <HAL_UART_RxCpltCallback+0xf0>)
 8002802:	601a      	str	r2, [r3, #0]
			memcpy(&freq_matlab, &RxBuffer[22], sizeof(int32_t)); //4
 8002804:	2204      	movs	r2, #4
 8002806:	4925      	ldr	r1, [pc, #148]	@ (800289c <HAL_UART_RxCpltCallback+0xf4>)
 8002808:	4825      	ldr	r0, [pc, #148]	@ (80028a0 <HAL_UART_RxCpltCallback+0xf8>)
 800280a:	f008 fadd 	bl	800adc8 <memcpy>

			wcs1.offset_voltage = wcs1_offset_matlab;
 800280e:	4b1d      	ldr	r3, [pc, #116]	@ (8002884 <HAL_UART_RxCpltCallback+0xdc>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a24      	ldr	r2, [pc, #144]	@ (80028a4 <HAL_UART_RxCpltCallback+0xfc>)
 8002814:	6253      	str	r3, [r2, #36]	@ 0x24
			wcs2.offset_voltage = wcs2_offset_matlab;
 8002816:	4b1c      	ldr	r3, [pc, #112]	@ (8002888 <HAL_UART_RxCpltCallback+0xe0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a23      	ldr	r2, [pc, #140]	@ (80028a8 <HAL_UART_RxCpltCallback+0x100>)
 800281c:	6253      	str	r3, [r2, #36]	@ 0x24

			M0 = (step_config_matlab >> 4) & 0x01;
 800281e:	4b1c      	ldr	r3, [pc, #112]	@ (8002890 <HAL_UART_RxCpltCallback+0xe8>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	091b      	lsrs	r3, r3, #4
 8002824:	b2db      	uxtb	r3, r3
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	b2da      	uxtb	r2, r3
 800282c:	4b1f      	ldr	r3, [pc, #124]	@ (80028ac <HAL_UART_RxCpltCallback+0x104>)
 800282e:	701a      	strb	r2, [r3, #0]
			M1 = (step_config_matlab >> 3) & 0x01;
 8002830:	4b17      	ldr	r3, [pc, #92]	@ (8002890 <HAL_UART_RxCpltCallback+0xe8>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	08db      	lsrs	r3, r3, #3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	b2da      	uxtb	r2, r3
 800283e:	4b1c      	ldr	r3, [pc, #112]	@ (80028b0 <HAL_UART_RxCpltCallback+0x108>)
 8002840:	701a      	strb	r2, [r3, #0]
			M2 = (step_config_matlab >> 2) & 0x01;
 8002842:	4b13      	ldr	r3, [pc, #76]	@ (8002890 <HAL_UART_RxCpltCallback+0xe8>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	089b      	lsrs	r3, r3, #2
 8002848:	b2db      	uxtb	r3, r3
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	b2da      	uxtb	r2, r3
 8002850:	4b18      	ldr	r3, [pc, #96]	@ (80028b4 <HAL_UART_RxCpltCallback+0x10c>)
 8002852:	701a      	strb	r2, [r3, #0]
			DIR = (step_config_matlab >> 1) & 0x01;
 8002854:	4b0e      	ldr	r3, [pc, #56]	@ (8002890 <HAL_UART_RxCpltCallback+0xe8>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	085b      	lsrs	r3, r3, #1
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	b2da      	uxtb	r2, r3
 8002862:	4b15      	ldr	r3, [pc, #84]	@ (80028b8 <HAL_UART_RxCpltCallback+0x110>)
 8002864:	701a      	strb	r2, [r3, #0]
			EN = (step_config_matlab >> 0) & 0x01;
 8002866:	4b0a      	ldr	r3, [pc, #40]	@ (8002890 <HAL_UART_RxCpltCallback+0xe8>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	b2da      	uxtb	r2, r3
 8002870:	4b12      	ldr	r3, [pc, #72]	@ (80028bc <HAL_UART_RxCpltCallback+0x114>)
 8002872:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	200004f4 	.word	0x200004f4
 8002880:	200002d0 	.word	0x200002d0
 8002884:	200007e4 	.word	0x200007e4
 8002888:	200007e8 	.word	0x200007e8
 800288c:	200007dc 	.word	0x200007dc
 8002890:	200007c4 	.word	0x200007c4
 8002894:	200007c8 	.word	0x200007c8
 8002898:	200007cc 	.word	0x200007cc
 800289c:	200002e6 	.word	0x200002e6
 80028a0:	200007d0 	.word	0x200007d0
 80028a4:	2000016c 	.word	0x2000016c
 80028a8:	20000194 	.word	0x20000194
 80028ac:	20000028 	.word	0x20000028
 80028b0:	20000029 	.word	0x20000029
 80028b4:	2000002a 	.word	0x2000002a
 80028b8:	2000002b 	.word	0x2000002b
 80028bc:	200007ec 	.word	0x200007ec

080028c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80028c0:	b5b0      	push	{r4, r5, r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a5c      	ldr	r2, [pc, #368]	@ (8002a3c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	f040 80b0 	bne.w	8002a32 <HAL_TIM_PeriodElapsedCallback+0x172>
		QEI_get_diff_count(&encoder);
 80028d2:	485b      	ldr	r0, [pc, #364]	@ (8002a40 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80028d4:	f7fe ff2c 	bl	8001730 <QEI_get_diff_count>
		QEI_compute_data(&encoder);
 80028d8:	4859      	ldr	r0, [pc, #356]	@ (8002a40 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80028da:	f7fe ffe5 	bl	80018a8 <QEI_compute_data>
		WCS1700_compute_data(&wcs1);
 80028de:	4859      	ldr	r0, [pc, #356]	@ (8002a44 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80028e0:	f7ff f9ae 	bl	8001c40 <WCS1700_compute_data>
		WCS1700_compute_data(&wcs2);
 80028e4:	4858      	ldr	r0, [pc, #352]	@ (8002a48 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80028e6:	f7ff f9ab 	bl	8001c40 <WCS1700_compute_data>
		LoadCell_compute_data();
 80028ea:	f7ff ff29 	bl	8002740 <LoadCell_compute_data>
//				DC_MOTOR_TORQUE_CONTROLLER_Compute(&pid_torque,
//						(torque_matlab / ZGA60FM_1200RPM_Constant.Kt)
//								- wcs1.current, encoder.radps), 65535, -65535);
		cmd_tk = PWM_Satuation(
				PID_CONTROLLER_Compute(&pid_torque,
						(torque_matlab / ZGA60FM_1200RPM_Constant.Kt)
 80028ee:	4b57      	ldr	r3, [pc, #348]	@ (8002a4c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80028f0:	edd3 6a00 	vldr	s13, [r3]
 80028f4:	4b56      	ldr	r3, [pc, #344]	@ (8002a50 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80028f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80028fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
								- wcs1.current), 65535, -65535);
 80028fe:	4b51      	ldr	r3, [pc, #324]	@ (8002a44 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002900:	edd3 7a08 	vldr	s15, [r3, #32]
		cmd_tk = PWM_Satuation(
 8002904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002908:	eeb0 0a67 	vmov.f32	s0, s15
 800290c:	4851      	ldr	r0, [pc, #324]	@ (8002a54 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800290e:	f7fe fa92 	bl	8000e36 <PID_CONTROLLER_Compute>
 8002912:	eef0 7a40 	vmov.f32	s15, s0
 8002916:	4950      	ldr	r1, [pc, #320]	@ (8002a58 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002918:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800291c:	eeb0 0a67 	vmov.f32	s0, s15
 8002920:	f7fe fa30 	bl	8000d84 <PWM_Satuation>
 8002924:	4603      	mov	r3, r0
 8002926:	4a4d      	ldr	r2, [pc, #308]	@ (8002a5c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002928:	6013      	str	r3, [r2, #0]
		MDXX_set_range(&motor1, fabs(freq_matlab), cmd_tk);
 800292a:	4b4d      	ldr	r3, [pc, #308]	@ (8002a60 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fd fdc4 	bl	80004bc <__aeabi_i2d>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4610      	mov	r0, r2
 800293a:	4619      	mov	r1, r3
 800293c:	f7fe f85a 	bl	80009f4 <__aeabi_d2f>
 8002940:	ee07 0a90 	vmov	s15, r0
 8002944:	eef0 7ae7 	vabs.f32	s15, s15
 8002948:	4b44      	ldr	r3, [pc, #272]	@ (8002a5c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	ee07 3a10 	vmov	s14, r3
 8002950:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002954:	eef0 0a47 	vmov.f32	s1, s14
 8002958:	eeb0 0a67 	vmov.f32	s0, s15
 800295c:	4841      	ldr	r0, [pc, #260]	@ (8002a64 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800295e:	f7fe fb23 	bl	8000fa8 <MDXX_set_range>
		MDXX_set_range(&motor2, fabs(freq_matlab), pwm_matlab);
 8002962:	4b3f      	ldr	r3, [pc, #252]	@ (8002a60 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7fd fda8 	bl	80004bc <__aeabi_i2d>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	f7fe f83e 	bl	80009f4 <__aeabi_d2f>
 8002978:	ee07 0a90 	vmov	s15, r0
 800297c:	eef0 7ae7 	vabs.f32	s15, s15
 8002980:	4b39      	ldr	r3, [pc, #228]	@ (8002a68 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	ee07 3a10 	vmov	s14, r3
 8002988:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800298c:	eef0 0a47 	vmov.f32	s1, s14
 8002990:	eeb0 0a67 	vmov.f32	s0, s15
 8002994:	4835      	ldr	r0, [pc, #212]	@ (8002a6c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002996:	f7fe fb07 	bl	8000fa8 <MDXX_set_range>
		DRV8825_set_speed(&drv, M0, M1, M2, DIR, EN, step_freq_matlab);
 800299a:	4b35      	ldr	r3, [pc, #212]	@ (8002a70 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800299c:	7819      	ldrb	r1, [r3, #0]
 800299e:	4b35      	ldr	r3, [pc, #212]	@ (8002a74 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80029a0:	7818      	ldrb	r0, [r3, #0]
 80029a2:	4b35      	ldr	r3, [pc, #212]	@ (8002a78 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80029a4:	781c      	ldrb	r4, [r3, #0]
 80029a6:	4b35      	ldr	r3, [pc, #212]	@ (8002a7c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	4a35      	ldr	r2, [pc, #212]	@ (8002a80 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80029ac:	7812      	ldrb	r2, [r2, #0]
 80029ae:	4d35      	ldr	r5, [pc, #212]	@ (8002a84 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80029b0:	682d      	ldr	r5, [r5, #0]
 80029b2:	ee07 5a90 	vmov	s15, r5
 80029b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ba:	9201      	str	r2, [sp, #4]
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	eeb0 0a67 	vmov.f32	s0, s15
 80029c2:	4623      	mov	r3, r4
 80029c4:	4602      	mov	r2, r0
 80029c6:	4830      	ldr	r0, [pc, #192]	@ (8002a88 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80029c8:	f7fe fbbe 	bl	8001148 <DRV8825_set_speed>

		TxBuffer[0] = 69; // Header
 80029cc:	4b2f      	ldr	r3, [pc, #188]	@ (8002a8c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80029ce:	2245      	movs	r2, #69	@ 0x45
 80029d0:	701a      	strb	r2, [r3, #0]
		memcpy(&TxBuffer[1], &wcs1.raw_voltage, sizeof(float)); //4
 80029d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a44 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	4a2d      	ldr	r2, [pc, #180]	@ (8002a8c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80029d8:	f8c2 3001 	str.w	r3, [r2, #1]
		memcpy(&TxBuffer[5], &wcs2.raw_voltage, sizeof(float)); //4
 80029dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a48 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	4a2a      	ldr	r2, [pc, #168]	@ (8002a8c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80029e2:	f8c2 3005 	str.w	r3, [r2, #5]
		memcpy(&TxBuffer[9], &wcs1.current, sizeof(float)); //4
 80029e6:	4b17      	ldr	r3, [pc, #92]	@ (8002a44 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	4a28      	ldr	r2, [pc, #160]	@ (8002a8c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80029ec:	f8c2 3009 	str.w	r3, [r2, #9]
		memcpy(&TxBuffer[13], &wcs2.current, sizeof(float)); //4
 80029f0:	4b15      	ldr	r3, [pc, #84]	@ (8002a48 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	4a25      	ldr	r2, [pc, #148]	@ (8002a8c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80029f6:	f8c2 300d 	str.w	r3, [r2, #13]
		memcpy(&TxBuffer[17], &encoder.pps, sizeof(float)); //4
 80029fa:	4b11      	ldr	r3, [pc, #68]	@ (8002a40 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80029fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fe:	4a23      	ldr	r2, [pc, #140]	@ (8002a8c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002a00:	f8c2 3011 	str.w	r3, [r2, #17]
		memcpy(&TxBuffer[21], &load_cell, sizeof(float)); //4
 8002a04:	4b22      	ldr	r3, [pc, #136]	@ (8002a90 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a20      	ldr	r2, [pc, #128]	@ (8002a8c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002a0a:	f8c2 3015 	str.w	r3, [r2, #21]
		memcpy(&TxBuffer[25], &Angle, sizeof(uint16_t)); //2
 8002a0e:	4b21      	ldr	r3, [pc, #132]	@ (8002a94 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	4a1e      	ldr	r2, [pc, #120]	@ (8002a8c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002a14:	f8a2 3019 	strh.w	r3, [r2, #25]
		memcpy(&TxBuffer[27], &encoder.pulses, sizeof(int32_t)); //4
 8002a18:	4b09      	ldr	r3, [pc, #36]	@ (8002a40 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8002a8c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002a1e:	f8c2 301b 	str.w	r3, [r2, #27]
		TxBuffer[31] = 10; // '/n' Newline or termination character
 8002a22:	4b1a      	ldr	r3, [pc, #104]	@ (8002a8c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002a24:	220a      	movs	r2, #10
 8002a26:	77da      	strb	r2, [r3, #31]
		HAL_UART_Transmit_DMA(&hlpuart1, TxBuffer, 32);
 8002a28:	2220      	movs	r2, #32
 8002a2a:	4918      	ldr	r1, [pc, #96]	@ (8002a8c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002a2c:	481a      	ldr	r0, [pc, #104]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002a2e:	f006 fcab 	bl	8009388 <HAL_UART_Transmit_DMA>

	}
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bdb0      	pop	{r4, r5, r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000648 	.word	0x20000648
 8002a40:	20000124 	.word	0x20000124
 8002a44:	2000016c 	.word	0x2000016c
 8002a48:	20000194 	.word	0x20000194
 8002a4c:	200007dc 	.word	0x200007dc
 8002a50:	20000000 	.word	0x20000000
 8002a54:	200002e8 	.word	0x200002e8
 8002a58:	ffff0001 	.word	0xffff0001
 8002a5c:	200007d4 	.word	0x200007d4
 8002a60:	200007d0 	.word	0x200007d0
 8002a64:	20000054 	.word	0x20000054
 8002a68:	200007cc 	.word	0x200007cc
 8002a6c:	20000098 	.word	0x20000098
 8002a70:	20000028 	.word	0x20000028
 8002a74:	20000029 	.word	0x20000029
 8002a78:	2000002a 	.word	0x2000002a
 8002a7c:	2000002b 	.word	0x2000002b
 8002a80:	200007ec 	.word	0x200007ec
 8002a84:	200007c8 	.word	0x200007c8
 8002a88:	200000dc 	.word	0x200000dc
 8002a8c:	200002ac 	.word	0x200002ac
 8002a90:	200007e0 	.word	0x200007e0
 8002a94:	200007d8 	.word	0x200007d8
 8002a98:	200004f4 	.word	0x200004f4

08002a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002aa0:	b672      	cpsid	i
}
 8002aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002aa4:	bf00      	nop
 8002aa6:	e7fd      	b.n	8002aa4 <Error_Handler+0x8>

08002aa8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aae:	4b0f      	ldr	r3, [pc, #60]	@ (8002aec <HAL_MspInit+0x44>)
 8002ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab2:	4a0e      	ldr	r2, [pc, #56]	@ (8002aec <HAL_MspInit+0x44>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002aba:	4b0c      	ldr	r3, [pc, #48]	@ (8002aec <HAL_MspInit+0x44>)
 8002abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	607b      	str	r3, [r7, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ac6:	4b09      	ldr	r3, [pc, #36]	@ (8002aec <HAL_MspInit+0x44>)
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aca:	4a08      	ldr	r2, [pc, #32]	@ (8002aec <HAL_MspInit+0x44>)
 8002acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ad0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ad2:	4b06      	ldr	r3, [pc, #24]	@ (8002aec <HAL_MspInit+0x44>)
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002ade:	f003 fedd 	bl	800689c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000

08002af0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b0a0      	sub	sp, #128	@ 0x80
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b08:	f107 0318 	add.w	r3, r7, #24
 8002b0c:	2254      	movs	r2, #84	@ 0x54
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4618      	mov	r0, r3
 8002b12:	f008 f92d 	bl	800ad70 <memset>
  if(hadc->Instance==ADC1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b1e:	d177      	bne.n	8002c10 <HAL_ADC_MspInit+0x120>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002b20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b24:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002b26:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002b2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b2c:	f107 0318 	add.w	r3, r7, #24
 8002b30:	4618      	mov	r0, r3
 8002b32:	f004 fbf1 	bl	8007318 <HAL_RCCEx_PeriphCLKConfig>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002b3c:	f7ff ffae 	bl	8002a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002b40:	4b35      	ldr	r3, [pc, #212]	@ (8002c18 <HAL_ADC_MspInit+0x128>)
 8002b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b44:	4a34      	ldr	r2, [pc, #208]	@ (8002c18 <HAL_ADC_MspInit+0x128>)
 8002b46:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b4c:	4b32      	ldr	r3, [pc, #200]	@ (8002c18 <HAL_ADC_MspInit+0x128>)
 8002b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b58:	4b2f      	ldr	r3, [pc, #188]	@ (8002c18 <HAL_ADC_MspInit+0x128>)
 8002b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5c:	4a2e      	ldr	r2, [pc, #184]	@ (8002c18 <HAL_ADC_MspInit+0x128>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b64:	4b2c      	ldr	r3, [pc, #176]	@ (8002c18 <HAL_ADC_MspInit+0x128>)
 8002b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b70:	4b29      	ldr	r3, [pc, #164]	@ (8002c18 <HAL_ADC_MspInit+0x128>)
 8002b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b74:	4a28      	ldr	r2, [pc, #160]	@ (8002c18 <HAL_ADC_MspInit+0x128>)
 8002b76:	f043 0302 	orr.w	r3, r3, #2
 8002b7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b7c:	4b26      	ldr	r3, [pc, #152]	@ (8002c18 <HAL_ADC_MspInit+0x128>)
 8002b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b94:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b9e:	f002 fced 	bl	800557c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bae:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4819      	ldr	r0, [pc, #100]	@ (8002c1c <HAL_ADC_MspInit+0x12c>)
 8002bb6:	f002 fce1 	bl	800557c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002bba:	4b19      	ldr	r3, [pc, #100]	@ (8002c20 <HAL_ADC_MspInit+0x130>)
 8002bbc:	4a19      	ldr	r2, [pc, #100]	@ (8002c24 <HAL_ADC_MspInit+0x134>)
 8002bbe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002bc0:	4b17      	ldr	r3, [pc, #92]	@ (8002c20 <HAL_ADC_MspInit+0x130>)
 8002bc2:	2205      	movs	r2, #5
 8002bc4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bc6:	4b16      	ldr	r3, [pc, #88]	@ (8002c20 <HAL_ADC_MspInit+0x130>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bcc:	4b14      	ldr	r3, [pc, #80]	@ (8002c20 <HAL_ADC_MspInit+0x130>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002bd2:	4b13      	ldr	r3, [pc, #76]	@ (8002c20 <HAL_ADC_MspInit+0x130>)
 8002bd4:	2280      	movs	r2, #128	@ 0x80
 8002bd6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002bd8:	4b11      	ldr	r3, [pc, #68]	@ (8002c20 <HAL_ADC_MspInit+0x130>)
 8002bda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bde:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002be0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c20 <HAL_ADC_MspInit+0x130>)
 8002be2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002be6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002be8:	4b0d      	ldr	r3, [pc, #52]	@ (8002c20 <HAL_ADC_MspInit+0x130>)
 8002bea:	2220      	movs	r2, #32
 8002bec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002bee:	4b0c      	ldr	r3, [pc, #48]	@ (8002c20 <HAL_ADC_MspInit+0x130>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002bf4:	480a      	ldr	r0, [pc, #40]	@ (8002c20 <HAL_ADC_MspInit+0x130>)
 8002bf6:	f002 f981 	bl	8004efc <HAL_DMA_Init>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8002c00:	f7ff ff4c 	bl	8002a9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a06      	ldr	r2, [pc, #24]	@ (8002c20 <HAL_ADC_MspInit+0x130>)
 8002c08:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c0a:	4a05      	ldr	r2, [pc, #20]	@ (8002c20 <HAL_ADC_MspInit+0x130>)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002c10:	bf00      	nop
 8002c12:	3780      	adds	r7, #128	@ 0x80
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	48000400 	.word	0x48000400
 8002c20:	20000380 	.word	0x20000380
 8002c24:	40020008 	.word	0x40020008

08002c28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b09e      	sub	sp, #120	@ 0x78
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c30:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	60da      	str	r2, [r3, #12]
 8002c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c40:	f107 0310 	add.w	r3, r7, #16
 8002c44:	2254      	movs	r2, #84	@ 0x54
 8002c46:	2100      	movs	r1, #0
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f008 f891 	bl	800ad70 <memset>
  if(hi2c->Instance==I2C1)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a50      	ldr	r2, [pc, #320]	@ (8002d94 <HAL_I2C_MspInit+0x16c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	f040 8099 	bne.w	8002d8c <HAL_I2C_MspInit+0x164>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c5a:	2340      	movs	r3, #64	@ 0x40
 8002c5c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c62:	f107 0310 	add.w	r3, r7, #16
 8002c66:	4618      	mov	r0, r3
 8002c68:	f004 fb56 	bl	8007318 <HAL_RCCEx_PeriphCLKConfig>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002c72:	f7ff ff13 	bl	8002a9c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c76:	4b48      	ldr	r3, [pc, #288]	@ (8002d98 <HAL_I2C_MspInit+0x170>)
 8002c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c7a:	4a47      	ldr	r2, [pc, #284]	@ (8002d98 <HAL_I2C_MspInit+0x170>)
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c82:	4b45      	ldr	r3, [pc, #276]	@ (8002d98 <HAL_I2C_MspInit+0x170>)
 8002c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c92:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c94:	2312      	movs	r3, #18
 8002c96:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ca0:	2304      	movs	r3, #4
 8002ca2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002ca8:	4619      	mov	r1, r3
 8002caa:	483c      	ldr	r0, [pc, #240]	@ (8002d9c <HAL_I2C_MspInit+0x174>)
 8002cac:	f002 fc66 	bl	800557c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cb0:	4b39      	ldr	r3, [pc, #228]	@ (8002d98 <HAL_I2C_MspInit+0x170>)
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb4:	4a38      	ldr	r2, [pc, #224]	@ (8002d98 <HAL_I2C_MspInit+0x170>)
 8002cb6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002cba:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cbc:	4b36      	ldr	r3, [pc, #216]	@ (8002d98 <HAL_I2C_MspInit+0x170>)
 8002cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel4;
 8002cc8:	4b35      	ldr	r3, [pc, #212]	@ (8002da0 <HAL_I2C_MspInit+0x178>)
 8002cca:	4a36      	ldr	r2, [pc, #216]	@ (8002da4 <HAL_I2C_MspInit+0x17c>)
 8002ccc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002cce:	4b34      	ldr	r3, [pc, #208]	@ (8002da0 <HAL_I2C_MspInit+0x178>)
 8002cd0:	2210      	movs	r2, #16
 8002cd2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cd4:	4b32      	ldr	r3, [pc, #200]	@ (8002da0 <HAL_I2C_MspInit+0x178>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cda:	4b31      	ldr	r3, [pc, #196]	@ (8002da0 <HAL_I2C_MspInit+0x178>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ce0:	4b2f      	ldr	r3, [pc, #188]	@ (8002da0 <HAL_I2C_MspInit+0x178>)
 8002ce2:	2280      	movs	r2, #128	@ 0x80
 8002ce4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ce6:	4b2e      	ldr	r3, [pc, #184]	@ (8002da0 <HAL_I2C_MspInit+0x178>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cec:	4b2c      	ldr	r3, [pc, #176]	@ (8002da0 <HAL_I2C_MspInit+0x178>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002cf2:	4b2b      	ldr	r3, [pc, #172]	@ (8002da0 <HAL_I2C_MspInit+0x178>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002cf8:	4b29      	ldr	r3, [pc, #164]	@ (8002da0 <HAL_I2C_MspInit+0x178>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002cfe:	4828      	ldr	r0, [pc, #160]	@ (8002da0 <HAL_I2C_MspInit+0x178>)
 8002d00:	f002 f8fc 	bl	8004efc <HAL_DMA_Init>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_I2C_MspInit+0xe6>
    {
      Error_Handler();
 8002d0a:	f7ff fec7 	bl	8002a9c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a23      	ldr	r2, [pc, #140]	@ (8002da0 <HAL_I2C_MspInit+0x178>)
 8002d12:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d14:	4a22      	ldr	r2, [pc, #136]	@ (8002da0 <HAL_I2C_MspInit+0x178>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel5;
 8002d1a:	4b23      	ldr	r3, [pc, #140]	@ (8002da8 <HAL_I2C_MspInit+0x180>)
 8002d1c:	4a23      	ldr	r2, [pc, #140]	@ (8002dac <HAL_I2C_MspInit+0x184>)
 8002d1e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002d20:	4b21      	ldr	r3, [pc, #132]	@ (8002da8 <HAL_I2C_MspInit+0x180>)
 8002d22:	2211      	movs	r2, #17
 8002d24:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d26:	4b20      	ldr	r3, [pc, #128]	@ (8002da8 <HAL_I2C_MspInit+0x180>)
 8002d28:	2210      	movs	r2, #16
 8002d2a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002da8 <HAL_I2C_MspInit+0x180>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d32:	4b1d      	ldr	r3, [pc, #116]	@ (8002da8 <HAL_I2C_MspInit+0x180>)
 8002d34:	2280      	movs	r2, #128	@ 0x80
 8002d36:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d38:	4b1b      	ldr	r3, [pc, #108]	@ (8002da8 <HAL_I2C_MspInit+0x180>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8002da8 <HAL_I2C_MspInit+0x180>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002d44:	4b18      	ldr	r3, [pc, #96]	@ (8002da8 <HAL_I2C_MspInit+0x180>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d4a:	4b17      	ldr	r3, [pc, #92]	@ (8002da8 <HAL_I2C_MspInit+0x180>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002d50:	4815      	ldr	r0, [pc, #84]	@ (8002da8 <HAL_I2C_MspInit+0x180>)
 8002d52:	f002 f8d3 	bl	8004efc <HAL_DMA_Init>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_I2C_MspInit+0x138>
    {
      Error_Handler();
 8002d5c:	f7ff fe9e 	bl	8002a9c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a11      	ldr	r2, [pc, #68]	@ (8002da8 <HAL_I2C_MspInit+0x180>)
 8002d64:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d66:	4a10      	ldr	r2, [pc, #64]	@ (8002da8 <HAL_I2C_MspInit+0x180>)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2100      	movs	r1, #0
 8002d70:	201f      	movs	r0, #31
 8002d72:	f002 f88e 	bl	8004e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002d76:	201f      	movs	r0, #31
 8002d78:	f002 f8a5 	bl	8004ec6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2100      	movs	r1, #0
 8002d80:	2020      	movs	r0, #32
 8002d82:	f002 f886 	bl	8004e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002d86:	2020      	movs	r0, #32
 8002d88:	f002 f89d 	bl	8004ec6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002d8c:	bf00      	nop
 8002d8e:	3778      	adds	r7, #120	@ 0x78
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40005400 	.word	0x40005400
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	48000400 	.word	0x48000400
 8002da0:	20000434 	.word	0x20000434
 8002da4:	40020044 	.word	0x40020044
 8002da8:	20000494 	.word	0x20000494
 8002dac:	40020058 	.word	0x40020058

08002db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b09e      	sub	sp, #120	@ 0x78
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dc8:	f107 0310 	add.w	r3, r7, #16
 8002dcc:	2254      	movs	r2, #84	@ 0x54
 8002dce:	2100      	movs	r1, #0
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f007 ffcd 	bl	800ad70 <memset>
  if(huart->Instance==LPUART1)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a4d      	ldr	r2, [pc, #308]	@ (8002f10 <HAL_UART_MspInit+0x160>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	f040 8092 	bne.w	8002f06 <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002de2:	2320      	movs	r3, #32
 8002de4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002de6:	2300      	movs	r3, #0
 8002de8:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dea:	f107 0310 	add.w	r3, r7, #16
 8002dee:	4618      	mov	r0, r3
 8002df0:	f004 fa92 	bl	8007318 <HAL_RCCEx_PeriphCLKConfig>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002dfa:	f7ff fe4f 	bl	8002a9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002dfe:	4b45      	ldr	r3, [pc, #276]	@ (8002f14 <HAL_UART_MspInit+0x164>)
 8002e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e02:	4a44      	ldr	r2, [pc, #272]	@ (8002f14 <HAL_UART_MspInit+0x164>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002e0a:	4b42      	ldr	r3, [pc, #264]	@ (8002f14 <HAL_UART_MspInit+0x164>)
 8002e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e16:	4b3f      	ldr	r3, [pc, #252]	@ (8002f14 <HAL_UART_MspInit+0x164>)
 8002e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e1a:	4a3e      	ldr	r2, [pc, #248]	@ (8002f14 <HAL_UART_MspInit+0x164>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e22:	4b3c      	ldr	r3, [pc, #240]	@ (8002f14 <HAL_UART_MspInit+0x164>)
 8002e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002e2e:	230c      	movs	r3, #12
 8002e30:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e32:	2302      	movs	r3, #2
 8002e34:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002e3e:	230c      	movs	r3, #12
 8002e40:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e42:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002e46:	4619      	mov	r1, r3
 8002e48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e4c:	f002 fb96 	bl	800557c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8002e50:	4b31      	ldr	r3, [pc, #196]	@ (8002f18 <HAL_UART_MspInit+0x168>)
 8002e52:	4a32      	ldr	r2, [pc, #200]	@ (8002f1c <HAL_UART_MspInit+0x16c>)
 8002e54:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002e56:	4b30      	ldr	r3, [pc, #192]	@ (8002f18 <HAL_UART_MspInit+0x168>)
 8002e58:	2222      	movs	r2, #34	@ 0x22
 8002e5a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f18 <HAL_UART_MspInit+0x168>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e62:	4b2d      	ldr	r3, [pc, #180]	@ (8002f18 <HAL_UART_MspInit+0x168>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e68:	4b2b      	ldr	r3, [pc, #172]	@ (8002f18 <HAL_UART_MspInit+0x168>)
 8002e6a:	2280      	movs	r2, #128	@ 0x80
 8002e6c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8002f18 <HAL_UART_MspInit+0x168>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e74:	4b28      	ldr	r3, [pc, #160]	@ (8002f18 <HAL_UART_MspInit+0x168>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8002e7a:	4b27      	ldr	r3, [pc, #156]	@ (8002f18 <HAL_UART_MspInit+0x168>)
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e80:	4b25      	ldr	r3, [pc, #148]	@ (8002f18 <HAL_UART_MspInit+0x168>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002e86:	4824      	ldr	r0, [pc, #144]	@ (8002f18 <HAL_UART_MspInit+0x168>)
 8002e88:	f002 f838 	bl	8004efc <HAL_DMA_Init>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002e92:	f7ff fe03 	bl	8002a9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a1f      	ldr	r2, [pc, #124]	@ (8002f18 <HAL_UART_MspInit+0x168>)
 8002e9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002e9e:	4a1e      	ldr	r2, [pc, #120]	@ (8002f18 <HAL_UART_MspInit+0x168>)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel3;
 8002ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8002f20 <HAL_UART_MspInit+0x170>)
 8002ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8002f24 <HAL_UART_MspInit+0x174>)
 8002ea8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8002f20 <HAL_UART_MspInit+0x170>)
 8002eac:	2223      	movs	r2, #35	@ 0x23
 8002eae:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f20 <HAL_UART_MspInit+0x170>)
 8002eb2:	2210      	movs	r2, #16
 8002eb4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f20 <HAL_UART_MspInit+0x170>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ebc:	4b18      	ldr	r3, [pc, #96]	@ (8002f20 <HAL_UART_MspInit+0x170>)
 8002ebe:	2280      	movs	r2, #128	@ 0x80
 8002ec0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ec2:	4b17      	ldr	r3, [pc, #92]	@ (8002f20 <HAL_UART_MspInit+0x170>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ec8:	4b15      	ldr	r3, [pc, #84]	@ (8002f20 <HAL_UART_MspInit+0x170>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002ece:	4b14      	ldr	r3, [pc, #80]	@ (8002f20 <HAL_UART_MspInit+0x170>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ed4:	4b12      	ldr	r3, [pc, #72]	@ (8002f20 <HAL_UART_MspInit+0x170>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002eda:	4811      	ldr	r0, [pc, #68]	@ (8002f20 <HAL_UART_MspInit+0x170>)
 8002edc:	f002 f80e 	bl	8004efc <HAL_DMA_Init>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8002ee6:	f7ff fdd9 	bl	8002a9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a0c      	ldr	r2, [pc, #48]	@ (8002f20 <HAL_UART_MspInit+0x170>)
 8002eee:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8002f20 <HAL_UART_MspInit+0x170>)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2100      	movs	r1, #0
 8002efa:	205b      	movs	r0, #91	@ 0x5b
 8002efc:	f001 ffc9 	bl	8004e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002f00:	205b      	movs	r0, #91	@ 0x5b
 8002f02:	f001 ffe0 	bl	8004ec6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8002f06:	bf00      	nop
 8002f08:	3778      	adds	r7, #120	@ 0x78
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40008000 	.word	0x40008000
 8002f14:	40021000 	.word	0x40021000
 8002f18:	20000588 	.word	0x20000588
 8002f1c:	4002001c 	.word	0x4002001c
 8002f20:	200005e8 	.word	0x200005e8
 8002f24:	40020030 	.word	0x40020030

08002f28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f38:	d114      	bne.n	8002f64 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f3a:	4b27      	ldr	r3, [pc, #156]	@ (8002fd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f3e:	4a26      	ldr	r2, [pc, #152]	@ (8002fd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f46:	4b24      	ldr	r3, [pc, #144]	@ (8002fd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f52:	2200      	movs	r2, #0
 8002f54:	2100      	movs	r1, #0
 8002f56:	201c      	movs	r0, #28
 8002f58:	f001 ff9b 	bl	8004e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f5c:	201c      	movs	r0, #28
 8002f5e:	f001 ffb2 	bl	8004ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8002f62:	e034      	b.n	8002fce <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a1c      	ldr	r2, [pc, #112]	@ (8002fdc <HAL_TIM_Base_MspInit+0xb4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d10c      	bne.n	8002f88 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f72:	4a19      	ldr	r2, [pc, #100]	@ (8002fd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002f74:	f043 0304 	orr.w	r3, r3, #4
 8002f78:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f7a:	4b17      	ldr	r3, [pc, #92]	@ (8002fd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	693b      	ldr	r3, [r7, #16]
}
 8002f86:	e022      	b.n	8002fce <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a14      	ldr	r2, [pc, #80]	@ (8002fe0 <HAL_TIM_Base_MspInit+0xb8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d10c      	bne.n	8002fac <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f92:	4b11      	ldr	r3, [pc, #68]	@ (8002fd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f96:	4a10      	ldr	r2, [pc, #64]	@ (8002fd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002f98:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
}
 8002faa:	e010      	b.n	8002fce <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM20)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a0c      	ldr	r2, [pc, #48]	@ (8002fe4 <HAL_TIM_Base_MspInit+0xbc>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d10b      	bne.n	8002fce <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8002fb6:	4b08      	ldr	r3, [pc, #32]	@ (8002fd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fba:	4a07      	ldr	r2, [pc, #28]	@ (8002fd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002fbc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fc2:	4b05      	ldr	r3, [pc, #20]	@ (8002fd8 <HAL_TIM_Base_MspInit+0xb0>)
 8002fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
}
 8002fce:	bf00      	nop
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40000800 	.word	0x40000800
 8002fe0:	40013400 	.word	0x40013400
 8002fe4:	40015000 	.word	0x40015000

08002fe8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08a      	sub	sp, #40	@ 0x28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff0:	f107 0314 	add.w	r3, r7, #20
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a17      	ldr	r2, [pc, #92]	@ (8003064 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d128      	bne.n	800305c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800300a:	4b17      	ldr	r3, [pc, #92]	@ (8003068 <HAL_TIM_Encoder_MspInit+0x80>)
 800300c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300e:	4a16      	ldr	r2, [pc, #88]	@ (8003068 <HAL_TIM_Encoder_MspInit+0x80>)
 8003010:	f043 0302 	orr.w	r3, r3, #2
 8003014:	6593      	str	r3, [r2, #88]	@ 0x58
 8003016:	4b14      	ldr	r3, [pc, #80]	@ (8003068 <HAL_TIM_Encoder_MspInit+0x80>)
 8003018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	613b      	str	r3, [r7, #16]
 8003020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003022:	4b11      	ldr	r3, [pc, #68]	@ (8003068 <HAL_TIM_Encoder_MspInit+0x80>)
 8003024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003026:	4a10      	ldr	r2, [pc, #64]	@ (8003068 <HAL_TIM_Encoder_MspInit+0x80>)
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800302e:	4b0e      	ldr	r3, [pc, #56]	@ (8003068 <HAL_TIM_Encoder_MspInit+0x80>)
 8003030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800303a:	23c0      	movs	r3, #192	@ 0xc0
 800303c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303e:	2302      	movs	r3, #2
 8003040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003046:	2300      	movs	r3, #0
 8003048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800304a:	2302      	movs	r3, #2
 800304c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304e:	f107 0314 	add.w	r3, r7, #20
 8003052:	4619      	mov	r1, r3
 8003054:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003058:	f002 fa90 	bl	800557c <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800305c:	bf00      	nop
 800305e:	3728      	adds	r7, #40	@ 0x28
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40000400 	.word	0x40000400
 8003068:	40021000 	.word	0x40021000

0800306c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08a      	sub	sp, #40	@ 0x28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003074:	f107 0314 	add.w	r3, r7, #20
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a34      	ldr	r2, [pc, #208]	@ (800315c <HAL_TIM_MspPostInit+0xf0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d11e      	bne.n	80030cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800308e:	4b34      	ldr	r3, [pc, #208]	@ (8003160 <HAL_TIM_MspPostInit+0xf4>)
 8003090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003092:	4a33      	ldr	r2, [pc, #204]	@ (8003160 <HAL_TIM_MspPostInit+0xf4>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800309a:	4b31      	ldr	r3, [pc, #196]	@ (8003160 <HAL_TIM_MspPostInit+0xf4>)
 800309c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80030a6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80030aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ac:	2302      	movs	r3, #2
 80030ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b4:	2300      	movs	r3, #0
 80030b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80030b8:	230a      	movs	r3, #10
 80030ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030bc:	f107 0314 	add.w	r3, r7, #20
 80030c0:	4619      	mov	r1, r3
 80030c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030c6:	f002 fa59 	bl	800557c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 80030ca:	e043      	b.n	8003154 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM8)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a24      	ldr	r2, [pc, #144]	@ (8003164 <HAL_TIM_MspPostInit+0xf8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d11c      	bne.n	8003110 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030d6:	4b22      	ldr	r3, [pc, #136]	@ (8003160 <HAL_TIM_MspPostInit+0xf4>)
 80030d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030da:	4a21      	ldr	r2, [pc, #132]	@ (8003160 <HAL_TIM_MspPostInit+0xf4>)
 80030dc:	f043 0304 	orr.w	r3, r3, #4
 80030e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030e2:	4b1f      	ldr	r3, [pc, #124]	@ (8003160 <HAL_TIM_MspPostInit+0xf4>)
 80030e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030ee:	23c0      	movs	r3, #192	@ 0xc0
 80030f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f2:	2302      	movs	r3, #2
 80030f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fa:	2300      	movs	r3, #0
 80030fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80030fe:	2304      	movs	r3, #4
 8003100:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003102:	f107 0314 	add.w	r3, r7, #20
 8003106:	4619      	mov	r1, r3
 8003108:	4817      	ldr	r0, [pc, #92]	@ (8003168 <HAL_TIM_MspPostInit+0xfc>)
 800310a:	f002 fa37 	bl	800557c <HAL_GPIO_Init>
}
 800310e:	e021      	b.n	8003154 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM20)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a15      	ldr	r2, [pc, #84]	@ (800316c <HAL_TIM_MspPostInit+0x100>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d11c      	bne.n	8003154 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800311a:	4b11      	ldr	r3, [pc, #68]	@ (8003160 <HAL_TIM_MspPostInit+0xf4>)
 800311c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800311e:	4a10      	ldr	r2, [pc, #64]	@ (8003160 <HAL_TIM_MspPostInit+0xf4>)
 8003120:	f043 0304 	orr.w	r3, r3, #4
 8003124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003126:	4b0e      	ldr	r3, [pc, #56]	@ (8003160 <HAL_TIM_MspPostInit+0xf4>)
 8003128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	60bb      	str	r3, [r7, #8]
 8003130:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003132:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003138:	2302      	movs	r3, #2
 800313a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	2300      	movs	r3, #0
 800313e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003140:	2300      	movs	r3, #0
 8003142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8003144:	2306      	movs	r3, #6
 8003146:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003148:	f107 0314 	add.w	r3, r7, #20
 800314c:	4619      	mov	r1, r3
 800314e:	4806      	ldr	r0, [pc, #24]	@ (8003168 <HAL_TIM_MspPostInit+0xfc>)
 8003150:	f002 fa14 	bl	800557c <HAL_GPIO_Init>
}
 8003154:	bf00      	nop
 8003156:	3728      	adds	r7, #40	@ 0x28
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40000800 	.word	0x40000800
 8003160:	40021000 	.word	0x40021000
 8003164:	40013400 	.word	0x40013400
 8003168:	48000800 	.word	0x48000800
 800316c:	40015000 	.word	0x40015000

08003170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003174:	bf00      	nop
 8003176:	e7fd      	b.n	8003174 <NMI_Handler+0x4>

08003178 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800317c:	bf00      	nop
 800317e:	e7fd      	b.n	800317c <HardFault_Handler+0x4>

08003180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003184:	bf00      	nop
 8003186:	e7fd      	b.n	8003184 <MemManage_Handler+0x4>

08003188 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800318c:	bf00      	nop
 800318e:	e7fd      	b.n	800318c <BusFault_Handler+0x4>

08003190 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003194:	bf00      	nop
 8003196:	e7fd      	b.n	8003194 <UsageFault_Handler+0x4>

08003198 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800319c:	bf00      	nop
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031a6:	b480      	push	{r7}
 80031a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031aa:	bf00      	nop
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031b8:	bf00      	nop
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031c6:	f000 f8f3 	bl	80033b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80031d4:	4802      	ldr	r0, [pc, #8]	@ (80031e0 <DMA1_Channel1_IRQHandler+0x10>)
 80031d6:	f002 f874 	bl	80052c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000380 	.word	0x20000380

080031e4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80031e8:	4802      	ldr	r0, [pc, #8]	@ (80031f4 <DMA1_Channel2_IRQHandler+0x10>)
 80031ea:	f002 f86a 	bl	80052c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000588 	.word	0x20000588

080031f8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80031fc:	4802      	ldr	r0, [pc, #8]	@ (8003208 <DMA1_Channel3_IRQHandler+0x10>)
 80031fe:	f002 f860 	bl	80052c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	200005e8 	.word	0x200005e8

0800320c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003210:	4802      	ldr	r0, [pc, #8]	@ (800321c <DMA1_Channel4_IRQHandler+0x10>)
 8003212:	f002 f856 	bl	80052c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000434 	.word	0x20000434

08003220 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003224:	4802      	ldr	r0, [pc, #8]	@ (8003230 <DMA1_Channel5_IRQHandler+0x10>)
 8003226:	f002 f84c 	bl	80052c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20000494 	.word	0x20000494

08003234 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003238:	4802      	ldr	r0, [pc, #8]	@ (8003244 <TIM2_IRQHandler+0x10>)
 800323a:	f004 fea3 	bl	8007f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000648 	.word	0x20000648

08003248 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800324c:	4802      	ldr	r0, [pc, #8]	@ (8003258 <I2C1_EV_IRQHandler+0x10>)
 800324e:	f002 fbed 	bl	8005a2c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	200003e0 	.word	0x200003e0

0800325c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003260:	4802      	ldr	r0, [pc, #8]	@ (800326c <I2C1_ER_IRQHandler+0x10>)
 8003262:	f002 fbfd 	bl	8005a60 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003266:	bf00      	nop
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	200003e0 	.word	0x200003e0

08003270 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003274:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003278:	f002 fb1a 	bl	80058b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800327c:	bf00      	nop
 800327e:	bd80      	pop	{r7, pc}

08003280 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003284:	4802      	ldr	r0, [pc, #8]	@ (8003290 <LPUART1_IRQHandler+0x10>)
 8003286:	f006 f94b 	bl	8009520 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800328a:	bf00      	nop
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	200004f4 	.word	0x200004f4

08003294 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003298:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <SystemInit+0x20>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800329e:	4a05      	ldr	r2, [pc, #20]	@ (80032b4 <SystemInit+0x20>)
 80032a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032a8:	bf00      	nop
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032b8:	480d      	ldr	r0, [pc, #52]	@ (80032f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80032bc:	f7ff ffea 	bl	8003294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032c0:	480c      	ldr	r0, [pc, #48]	@ (80032f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80032c2:	490d      	ldr	r1, [pc, #52]	@ (80032f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032c4:	4a0d      	ldr	r2, [pc, #52]	@ (80032fc <LoopForever+0xe>)
  movs r3, #0
 80032c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80032c8:	e002      	b.n	80032d0 <LoopCopyDataInit>

080032ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ce:	3304      	adds	r3, #4

080032d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032d4:	d3f9      	bcc.n	80032ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032d8:	4c0a      	ldr	r4, [pc, #40]	@ (8003304 <LoopForever+0x16>)
  movs r3, #0
 80032da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032dc:	e001      	b.n	80032e2 <LoopFillZerobss>

080032de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032e0:	3204      	adds	r2, #4

080032e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032e4:	d3fb      	bcc.n	80032de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032e6:	f007 fd4b 	bl	800ad80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032ea:	f7fe fd39 	bl	8001d60 <main>

080032ee <LoopForever>:

LoopForever:
    b LoopForever
 80032ee:	e7fe      	b.n	80032ee <LoopForever>
  ldr   r0, =_estack
 80032f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032f8:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 80032fc:	0800ae4c 	.word	0x0800ae4c
  ldr r2, =_sbss
 8003300:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8003304:	200007f4 	.word	0x200007f4

08003308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003308:	e7fe      	b.n	8003308 <ADC1_2_IRQHandler>

0800330a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003314:	2003      	movs	r0, #3
 8003316:	f001 fdb1 	bl	8004e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800331a:	2000      	movs	r0, #0
 800331c:	f000 f80e 	bl	800333c <HAL_InitTick>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	71fb      	strb	r3, [r7, #7]
 800332a:	e001      	b.n	8003330 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800332c:	f7ff fbbc 	bl	8002aa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003330:	79fb      	ldrb	r3, [r7, #7]

}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003348:	4b16      	ldr	r3, [pc, #88]	@ (80033a4 <HAL_InitTick+0x68>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d022      	beq.n	8003396 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003350:	4b15      	ldr	r3, [pc, #84]	@ (80033a8 <HAL_InitTick+0x6c>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	4b13      	ldr	r3, [pc, #76]	@ (80033a4 <HAL_InitTick+0x68>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800335c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003360:	fbb2 f3f3 	udiv	r3, r2, r3
 8003364:	4618      	mov	r0, r3
 8003366:	f001 fdbc 	bl	8004ee2 <HAL_SYSTICK_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10f      	bne.n	8003390 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b0f      	cmp	r3, #15
 8003374:	d809      	bhi.n	800338a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003376:	2200      	movs	r2, #0
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	f04f 30ff 	mov.w	r0, #4294967295
 800337e:	f001 fd88 	bl	8004e92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003382:	4a0a      	ldr	r2, [pc, #40]	@ (80033ac <HAL_InitTick+0x70>)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	e007      	b.n	800339a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	73fb      	strb	r3, [r7, #15]
 800338e:	e004      	b.n	800339a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
 8003394:	e001      	b.n	800339a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800339a:	7bfb      	ldrb	r3, [r7, #15]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	20000034 	.word	0x20000034
 80033a8:	2000002c 	.word	0x2000002c
 80033ac:	20000030 	.word	0x20000030

080033b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033b4:	4b05      	ldr	r3, [pc, #20]	@ (80033cc <HAL_IncTick+0x1c>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b05      	ldr	r3, [pc, #20]	@ (80033d0 <HAL_IncTick+0x20>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4413      	add	r3, r2
 80033be:	4a03      	ldr	r2, [pc, #12]	@ (80033cc <HAL_IncTick+0x1c>)
 80033c0:	6013      	str	r3, [r2, #0]
}
 80033c2:	bf00      	nop
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	200007f0 	.word	0x200007f0
 80033d0:	20000034 	.word	0x20000034

080033d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  return uwTick;
 80033d8:	4b03      	ldr	r3, [pc, #12]	@ (80033e8 <HAL_GetTick+0x14>)
 80033da:	681b      	ldr	r3, [r3, #0]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	200007f0 	.word	0x200007f0

080033ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	609a      	str	r2, [r3, #8]
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	609a      	str	r2, [r3, #8]
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	3360      	adds	r3, #96	@ 0x60
 8003466:	461a      	mov	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b08      	ldr	r3, [pc, #32]	@ (8003498 <LL_ADC_SetOffset+0x44>)
 8003476:	4013      	ands	r3, r2
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	4313      	orrs	r3, r2
 8003484:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800348c:	bf00      	nop
 800348e:	371c      	adds	r7, #28
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	03fff000 	.word	0x03fff000

0800349c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3360      	adds	r3, #96	@ 0x60
 80034aa:	461a      	mov	r2, r3
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	3360      	adds	r3, #96	@ 0x60
 80034d8:	461a      	mov	r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80034fe:	b480      	push	{r7}
 8003500:	b087      	sub	sp, #28
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	3360      	adds	r3, #96	@ 0x60
 800350e:	461a      	mov	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	431a      	orrs	r2, r3
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003528:	bf00      	nop
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	3360      	adds	r3, #96	@ 0x60
 8003544:	461a      	mov	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	431a      	orrs	r2, r3
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800355e:	bf00      	nop
 8003560:	371c      	adds	r7, #28
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	615a      	str	r2, [r3, #20]
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80035a4:	2301      	movs	r3, #1
 80035a6:	e000      	b.n	80035aa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b087      	sub	sp, #28
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	3330      	adds	r3, #48	@ 0x30
 80035c6:	461a      	mov	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	0a1b      	lsrs	r3, r3, #8
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	f003 030c 	and.w	r3, r3, #12
 80035d2:	4413      	add	r3, r2
 80035d4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	211f      	movs	r1, #31
 80035e2:	fa01 f303 	lsl.w	r3, r1, r3
 80035e6:	43db      	mvns	r3, r3
 80035e8:	401a      	ands	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	0e9b      	lsrs	r3, r3, #26
 80035ee:	f003 011f 	and.w	r1, r3, #31
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	fa01 f303 	lsl.w	r3, r1, r3
 80035fc:	431a      	orrs	r2, r3
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003602:	bf00      	nop
 8003604:	371c      	adds	r7, #28
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800360e:	b480      	push	{r7}
 8003610:	b087      	sub	sp, #28
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	3314      	adds	r3, #20
 800361e:	461a      	mov	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	0e5b      	lsrs	r3, r3, #25
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	4413      	add	r3, r2
 800362c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	0d1b      	lsrs	r3, r3, #20
 8003636:	f003 031f 	and.w	r3, r3, #31
 800363a:	2107      	movs	r1, #7
 800363c:	fa01 f303 	lsl.w	r3, r1, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	401a      	ands	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	0d1b      	lsrs	r3, r3, #20
 8003648:	f003 031f 	and.w	r3, r3, #31
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	fa01 f303 	lsl.w	r3, r1, r3
 8003652:	431a      	orrs	r2, r3
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003658:	bf00      	nop
 800365a:	371c      	adds	r7, #28
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800367c:	43db      	mvns	r3, r3
 800367e:	401a      	ands	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f003 0318 	and.w	r3, r3, #24
 8003686:	4908      	ldr	r1, [pc, #32]	@ (80036a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003688:	40d9      	lsrs	r1, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	400b      	ands	r3, r1
 800368e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003692:	431a      	orrs	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800369a:	bf00      	nop
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	0007ffff 	.word	0x0007ffff

080036ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 031f 	and.w	r3, r3, #31
}
 80036bc:	4618      	mov	r0, r3
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80036d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6093      	str	r3, [r2, #8]
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003700:	d101      	bne.n	8003706 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003724:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003728:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800374c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003750:	d101      	bne.n	8003756 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003774:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003778:	f043 0201 	orr.w	r2, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800379c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80037a0:	f043 0202 	orr.w	r2, r3, #2
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <LL_ADC_IsEnabled+0x18>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <LL_ADC_IsEnabled+0x1a>
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d101      	bne.n	80037f2 <LL_ADC_IsDisableOngoing+0x18>
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <LL_ADC_IsDisableOngoing+0x1a>
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003810:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003814:	f043 0204 	orr.w	r2, r3, #4
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b04      	cmp	r3, #4
 800383a:	d101      	bne.n	8003840 <LL_ADC_REG_IsConversionOngoing+0x18>
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b08      	cmp	r3, #8
 8003860:	d101      	bne.n	8003866 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b089      	sub	sp, #36	@ 0x24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e1a9      	b.n	8003be2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003898:	2b00      	cmp	r3, #0
 800389a:	d109      	bne.n	80038b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff f927 	bl	8002af0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff ff19 	bl	80036ec <LL_ADC_IsDeepPowerDownEnabled>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d004      	beq.n	80038ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff feff 	bl	80036c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff ff34 	bl	800373c <LL_ADC_IsInternalRegulatorEnabled>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d115      	bne.n	8003906 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff ff18 	bl	8003714 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038e4:	4b9c      	ldr	r3, [pc, #624]	@ (8003b58 <HAL_ADC_Init+0x2e4>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	099b      	lsrs	r3, r3, #6
 80038ea:	4a9c      	ldr	r2, [pc, #624]	@ (8003b5c <HAL_ADC_Init+0x2e8>)
 80038ec:	fba2 2303 	umull	r2, r3, r2, r3
 80038f0:	099b      	lsrs	r3, r3, #6
 80038f2:	3301      	adds	r3, #1
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80038f8:	e002      	b.n	8003900 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f9      	bne.n	80038fa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff ff16 	bl	800373c <LL_ADC_IsInternalRegulatorEnabled>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10d      	bne.n	8003932 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391a:	f043 0210 	orr.w	r2, r3, #16
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003926:	f043 0201 	orr.w	r2, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff ff76 	bl	8003828 <LL_ADC_REG_IsConversionOngoing>
 800393c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	2b00      	cmp	r3, #0
 8003948:	f040 8142 	bne.w	8003bd0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2b00      	cmp	r3, #0
 8003950:	f040 813e 	bne.w	8003bd0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003958:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800395c:	f043 0202 	orr.w	r2, r3, #2
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff ff23 	bl	80037b4 <LL_ADC_IsEnabled>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d141      	bne.n	80039f8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800397c:	d004      	beq.n	8003988 <HAL_ADC_Init+0x114>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a77      	ldr	r2, [pc, #476]	@ (8003b60 <HAL_ADC_Init+0x2ec>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d10f      	bne.n	80039a8 <HAL_ADC_Init+0x134>
 8003988:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800398c:	f7ff ff12 	bl	80037b4 <LL_ADC_IsEnabled>
 8003990:	4604      	mov	r4, r0
 8003992:	4873      	ldr	r0, [pc, #460]	@ (8003b60 <HAL_ADC_Init+0x2ec>)
 8003994:	f7ff ff0e 	bl	80037b4 <LL_ADC_IsEnabled>
 8003998:	4603      	mov	r3, r0
 800399a:	4323      	orrs	r3, r4
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	e012      	b.n	80039ce <HAL_ADC_Init+0x15a>
 80039a8:	486e      	ldr	r0, [pc, #440]	@ (8003b64 <HAL_ADC_Init+0x2f0>)
 80039aa:	f7ff ff03 	bl	80037b4 <LL_ADC_IsEnabled>
 80039ae:	4604      	mov	r4, r0
 80039b0:	486d      	ldr	r0, [pc, #436]	@ (8003b68 <HAL_ADC_Init+0x2f4>)
 80039b2:	f7ff feff 	bl	80037b4 <LL_ADC_IsEnabled>
 80039b6:	4603      	mov	r3, r0
 80039b8:	431c      	orrs	r4, r3
 80039ba:	486c      	ldr	r0, [pc, #432]	@ (8003b6c <HAL_ADC_Init+0x2f8>)
 80039bc:	f7ff fefa 	bl	80037b4 <LL_ADC_IsEnabled>
 80039c0:	4603      	mov	r3, r0
 80039c2:	4323      	orrs	r3, r4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	bf0c      	ite	eq
 80039c8:	2301      	moveq	r3, #1
 80039ca:	2300      	movne	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d012      	beq.n	80039f8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039da:	d004      	beq.n	80039e6 <HAL_ADC_Init+0x172>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a5f      	ldr	r2, [pc, #380]	@ (8003b60 <HAL_ADC_Init+0x2ec>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d101      	bne.n	80039ea <HAL_ADC_Init+0x176>
 80039e6:	4a62      	ldr	r2, [pc, #392]	@ (8003b70 <HAL_ADC_Init+0x2fc>)
 80039e8:	e000      	b.n	80039ec <HAL_ADC_Init+0x178>
 80039ea:	4a62      	ldr	r2, [pc, #392]	@ (8003b74 <HAL_ADC_Init+0x300>)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	4619      	mov	r1, r3
 80039f2:	4610      	mov	r0, r2
 80039f4:	f7ff fcfa 	bl	80033ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	7f5b      	ldrb	r3, [r3, #29]
 80039fc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a02:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003a08:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003a0e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a16:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d106      	bne.n	8003a34 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	045b      	lsls	r3, r3, #17
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d009      	beq.n	8003a50 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a40:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a48:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	4b48      	ldr	r3, [pc, #288]	@ (8003b78 <HAL_ADC_Init+0x304>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6812      	ldr	r2, [r2, #0]
 8003a5e:	69b9      	ldr	r1, [r7, #24]
 8003a60:	430b      	orrs	r3, r1
 8003a62:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff fee5 	bl	800384e <LL_ADC_INJ_IsConversionOngoing>
 8003a84:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d17f      	bne.n	8003b8c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d17c      	bne.n	8003b8c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a96:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a9e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003aae:	f023 0302 	bic.w	r3, r3, #2
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6812      	ldr	r2, [r2, #0]
 8003ab6:	69b9      	ldr	r1, [r7, #24]
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d017      	beq.n	8003af4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691a      	ldr	r2, [r3, #16]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003ad2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003adc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003ae0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6911      	ldr	r1, [r2, #16]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6812      	ldr	r2, [r2, #0]
 8003aec:	430b      	orrs	r3, r1
 8003aee:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003af2:	e013      	b.n	8003b1c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691a      	ldr	r2, [r3, #16]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003b02:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003b14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b18:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d12a      	bne.n	8003b7c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003b30:	f023 0304 	bic.w	r3, r3, #4
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003b3c:	4311      	orrs	r1, r2
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003b42:	4311      	orrs	r1, r2
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0201 	orr.w	r2, r2, #1
 8003b54:	611a      	str	r2, [r3, #16]
 8003b56:	e019      	b.n	8003b8c <HAL_ADC_Init+0x318>
 8003b58:	2000002c 	.word	0x2000002c
 8003b5c:	053e2d63 	.word	0x053e2d63
 8003b60:	50000100 	.word	0x50000100
 8003b64:	50000400 	.word	0x50000400
 8003b68:	50000500 	.word	0x50000500
 8003b6c:	50000600 	.word	0x50000600
 8003b70:	50000300 	.word	0x50000300
 8003b74:	50000700 	.word	0x50000700
 8003b78:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0201 	bic.w	r2, r2, #1
 8003b8a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d10c      	bne.n	8003bae <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9a:	f023 010f 	bic.w	r1, r3, #15
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	1e5a      	subs	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	631a      	str	r2, [r3, #48]	@ 0x30
 8003bac:	e007      	b.n	8003bbe <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 020f 	bic.w	r2, r2, #15
 8003bbc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc2:	f023 0303 	bic.w	r3, r3, #3
 8003bc6:	f043 0201 	orr.w	r2, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003bce:	e007      	b.n	8003be0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd4:	f043 0210 	orr.w	r2, r3, #16
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003be0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3724      	adds	r7, #36	@ 0x24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd90      	pop	{r4, r7, pc}
 8003bea:	bf00      	nop

08003bec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c00:	d004      	beq.n	8003c0c <HAL_ADC_Start_DMA+0x20>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a5a      	ldr	r2, [pc, #360]	@ (8003d70 <HAL_ADC_Start_DMA+0x184>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d101      	bne.n	8003c10 <HAL_ADC_Start_DMA+0x24>
 8003c0c:	4b59      	ldr	r3, [pc, #356]	@ (8003d74 <HAL_ADC_Start_DMA+0x188>)
 8003c0e:	e000      	b.n	8003c12 <HAL_ADC_Start_DMA+0x26>
 8003c10:	4b59      	ldr	r3, [pc, #356]	@ (8003d78 <HAL_ADC_Start_DMA+0x18c>)
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fd4a 	bl	80036ac <LL_ADC_GetMultimode>
 8003c18:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff fe02 	bl	8003828 <LL_ADC_REG_IsConversionOngoing>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f040 809b 	bne.w	8003d62 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_ADC_Start_DMA+0x4e>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e096      	b.n	8003d68 <HAL_ADC_Start_DMA+0x17c>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a4d      	ldr	r2, [pc, #308]	@ (8003d7c <HAL_ADC_Start_DMA+0x190>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d008      	beq.n	8003c5e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d005      	beq.n	8003c5e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b05      	cmp	r3, #5
 8003c56:	d002      	beq.n	8003c5e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	2b09      	cmp	r3, #9
 8003c5c:	d17a      	bne.n	8003d54 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 fcf6 	bl	8004650 <ADC_Enable>
 8003c64:	4603      	mov	r3, r0
 8003c66:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003c68:	7dfb      	ldrb	r3, [r7, #23]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d16d      	bne.n	8003d4a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c72:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c76:	f023 0301 	bic.w	r3, r3, #1
 8003c7a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a3a      	ldr	r2, [pc, #232]	@ (8003d70 <HAL_ADC_Start_DMA+0x184>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d009      	beq.n	8003ca0 <HAL_ADC_Start_DMA+0xb4>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a3b      	ldr	r2, [pc, #236]	@ (8003d80 <HAL_ADC_Start_DMA+0x194>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d002      	beq.n	8003c9c <HAL_ADC_Start_DMA+0xb0>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	e003      	b.n	8003ca4 <HAL_ADC_Start_DMA+0xb8>
 8003c9c:	4b39      	ldr	r3, [pc, #228]	@ (8003d84 <HAL_ADC_Start_DMA+0x198>)
 8003c9e:	e001      	b.n	8003ca4 <HAL_ADC_Start_DMA+0xb8>
 8003ca0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	6812      	ldr	r2, [r2, #0]
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d002      	beq.n	8003cb2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d105      	bne.n	8003cbe <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d006      	beq.n	8003cd8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cce:	f023 0206 	bic.w	r2, r3, #6
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	661a      	str	r2, [r3, #96]	@ 0x60
 8003cd6:	e002      	b.n	8003cde <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce2:	4a29      	ldr	r2, [pc, #164]	@ (8003d88 <HAL_ADC_Start_DMA+0x19c>)
 8003ce4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cea:	4a28      	ldr	r2, [pc, #160]	@ (8003d8c <HAL_ADC_Start_DMA+0x1a0>)
 8003cec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf2:	4a27      	ldr	r2, [pc, #156]	@ (8003d90 <HAL_ADC_Start_DMA+0x1a4>)
 8003cf4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	221c      	movs	r2, #28
 8003cfc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0210 	orr.w	r2, r2, #16
 8003d14:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 0201 	orr.w	r2, r2, #1
 8003d24:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3340      	adds	r3, #64	@ 0x40
 8003d30:	4619      	mov	r1, r3
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f001 f989 	bl	800504c <HAL_DMA_Start_IT>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff fd5c 	bl	8003800 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003d48:	e00d      	b.n	8003d66 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003d52:	e008      	b.n	8003d66 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003d60:	e001      	b.n	8003d66 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d62:	2302      	movs	r3, #2
 8003d64:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	50000100 	.word	0x50000100
 8003d74:	50000300 	.word	0x50000300
 8003d78:	50000700 	.word	0x50000700
 8003d7c:	50000600 	.word	0x50000600
 8003d80:	50000500 	.word	0x50000500
 8003d84:	50000400 	.word	0x50000400
 8003d88:	0800483b 	.word	0x0800483b
 8003d8c:	08004913 	.word	0x08004913
 8003d90:	0800492f 	.word	0x0800492f

08003d94 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b0b6      	sub	sp, #216	@ 0xd8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d102      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x24>
 8003dee:	2302      	movs	r3, #2
 8003df0:	f000 bc13 	b.w	800461a <HAL_ADC_ConfigChannel+0x84a>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff fd11 	bl	8003828 <LL_ADC_REG_IsConversionOngoing>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f040 83f3 	bne.w	80045f4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	6859      	ldr	r1, [r3, #4]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f7ff fbcb 	bl	80035b6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff fcff 	bl	8003828 <LL_ADC_REG_IsConversionOngoing>
 8003e2a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff fd0b 	bl	800384e <LL_ADC_INJ_IsConversionOngoing>
 8003e38:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e3c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f040 81d9 	bne.w	80041f8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f040 81d4 	bne.w	80041f8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e58:	d10f      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2200      	movs	r2, #0
 8003e64:	4619      	mov	r1, r3
 8003e66:	f7ff fbd2 	bl	800360e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff fb79 	bl	800356a <LL_ADC_SetSamplingTimeCommonConfig>
 8003e78:	e00e      	b.n	8003e98 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	6819      	ldr	r1, [r3, #0]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	461a      	mov	r2, r3
 8003e88:	f7ff fbc1 	bl	800360e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2100      	movs	r1, #0
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff fb69 	bl	800356a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	695a      	ldr	r2, [r3, #20]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	08db      	lsrs	r3, r3, #3
 8003ea4:	f003 0303 	and.w	r3, r3, #3
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d022      	beq.n	8003f00 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	6919      	ldr	r1, [r3, #16]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003eca:	f7ff fac3 	bl	8003454 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	6919      	ldr	r1, [r3, #16]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	461a      	mov	r2, r3
 8003edc:	f7ff fb0f 	bl	80034fe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6818      	ldr	r0, [r3, #0]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d102      	bne.n	8003ef6 <HAL_ADC_ConfigChannel+0x126>
 8003ef0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ef4:	e000      	b.n	8003ef8 <HAL_ADC_ConfigChannel+0x128>
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f7ff fb1b 	bl	8003534 <LL_ADC_SetOffsetSaturation>
 8003efe:	e17b      	b.n	80041f8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2100      	movs	r1, #0
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff fac8 	bl	800349c <LL_ADC_GetOffsetChannel>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10a      	bne.n	8003f2c <HAL_ADC_ConfigChannel+0x15c>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff fabd 	bl	800349c <LL_ADC_GetOffsetChannel>
 8003f22:	4603      	mov	r3, r0
 8003f24:	0e9b      	lsrs	r3, r3, #26
 8003f26:	f003 021f 	and.w	r2, r3, #31
 8003f2a:	e01e      	b.n	8003f6a <HAL_ADC_ConfigChannel+0x19a>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2100      	movs	r1, #0
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff fab2 	bl	800349c <LL_ADC_GetOffsetChannel>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003f42:	fa93 f3a3 	rbit	r3, r3
 8003f46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003f5a:	2320      	movs	r3, #32
 8003f5c:	e004      	b.n	8003f68 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003f5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f62:	fab3 f383 	clz	r3, r3
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d105      	bne.n	8003f82 <HAL_ADC_ConfigChannel+0x1b2>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	0e9b      	lsrs	r3, r3, #26
 8003f7c:	f003 031f 	and.w	r3, r3, #31
 8003f80:	e018      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0x1e4>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003f8e:	fa93 f3a3 	rbit	r3, r3
 8003f92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003f9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003fa6:	2320      	movs	r3, #32
 8003fa8:	e004      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003faa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003fae:	fab3 f383 	clz	r3, r3
 8003fb2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d106      	bne.n	8003fc6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff fa81 	bl	80034c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2101      	movs	r1, #1
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff fa65 	bl	800349c <LL_ADC_GetOffsetChannel>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10a      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x222>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff fa5a 	bl	800349c <LL_ADC_GetOffsetChannel>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	0e9b      	lsrs	r3, r3, #26
 8003fec:	f003 021f 	and.w	r2, r3, #31
 8003ff0:	e01e      	b.n	8004030 <HAL_ADC_ConfigChannel+0x260>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff fa4f 	bl	800349c <LL_ADC_GetOffsetChannel>
 8003ffe:	4603      	mov	r3, r0
 8004000:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004004:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004008:	fa93 f3a3 	rbit	r3, r3
 800400c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004010:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004014:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004018:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004020:	2320      	movs	r3, #32
 8004022:	e004      	b.n	800402e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004024:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004028:	fab3 f383 	clz	r3, r3
 800402c:	b2db      	uxtb	r3, r3
 800402e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004038:	2b00      	cmp	r3, #0
 800403a:	d105      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x278>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	0e9b      	lsrs	r3, r3, #26
 8004042:	f003 031f 	and.w	r3, r3, #31
 8004046:	e018      	b.n	800407a <HAL_ADC_ConfigChannel+0x2aa>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004050:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004054:	fa93 f3a3 	rbit	r3, r3
 8004058:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800405c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004060:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004064:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800406c:	2320      	movs	r3, #32
 800406e:	e004      	b.n	800407a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004070:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004074:	fab3 f383 	clz	r3, r3
 8004078:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800407a:	429a      	cmp	r2, r3
 800407c:	d106      	bne.n	800408c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2200      	movs	r2, #0
 8004084:	2101      	movs	r1, #1
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff fa1e 	bl	80034c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2102      	movs	r1, #2
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff fa02 	bl	800349c <LL_ADC_GetOffsetChannel>
 8004098:	4603      	mov	r3, r0
 800409a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x2e8>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2102      	movs	r1, #2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff f9f7 	bl	800349c <LL_ADC_GetOffsetChannel>
 80040ae:	4603      	mov	r3, r0
 80040b0:	0e9b      	lsrs	r3, r3, #26
 80040b2:	f003 021f 	and.w	r2, r3, #31
 80040b6:	e01e      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x326>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2102      	movs	r1, #2
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff f9ec 	bl	800349c <LL_ADC_GetOffsetChannel>
 80040c4:	4603      	mov	r3, r0
 80040c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040ce:	fa93 f3a3 	rbit	r3, r3
 80040d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80040d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80040de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80040e6:	2320      	movs	r3, #32
 80040e8:	e004      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80040ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040ee:	fab3 f383 	clz	r3, r3
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d105      	bne.n	800410e <HAL_ADC_ConfigChannel+0x33e>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	0e9b      	lsrs	r3, r3, #26
 8004108:	f003 031f 	and.w	r3, r3, #31
 800410c:	e016      	b.n	800413c <HAL_ADC_ConfigChannel+0x36c>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004116:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800411a:	fa93 f3a3 	rbit	r3, r3
 800411e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004120:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004122:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004126:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800412e:	2320      	movs	r3, #32
 8004130:	e004      	b.n	800413c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004132:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004136:	fab3 f383 	clz	r3, r3
 800413a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800413c:	429a      	cmp	r2, r3
 800413e:	d106      	bne.n	800414e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2200      	movs	r2, #0
 8004146:	2102      	movs	r1, #2
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff f9bd 	bl	80034c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2103      	movs	r1, #3
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff f9a1 	bl	800349c <LL_ADC_GetOffsetChannel>
 800415a:	4603      	mov	r3, r0
 800415c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <HAL_ADC_ConfigChannel+0x3aa>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2103      	movs	r1, #3
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff f996 	bl	800349c <LL_ADC_GetOffsetChannel>
 8004170:	4603      	mov	r3, r0
 8004172:	0e9b      	lsrs	r3, r3, #26
 8004174:	f003 021f 	and.w	r2, r3, #31
 8004178:	e017      	b.n	80041aa <HAL_ADC_ConfigChannel+0x3da>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2103      	movs	r1, #3
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff f98b 	bl	800349c <LL_ADC_GetOffsetChannel>
 8004186:	4603      	mov	r3, r0
 8004188:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800418c:	fa93 f3a3 	rbit	r3, r3
 8004190:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004192:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004194:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004196:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800419c:	2320      	movs	r3, #32
 800419e:	e003      	b.n	80041a8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80041a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041a2:	fab3 f383 	clz	r3, r3
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d105      	bne.n	80041c2 <HAL_ADC_ConfigChannel+0x3f2>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	0e9b      	lsrs	r3, r3, #26
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	e011      	b.n	80041e6 <HAL_ADC_ConfigChannel+0x416>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041ca:	fa93 f3a3 	rbit	r3, r3
 80041ce:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80041d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80041d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80041da:	2320      	movs	r3, #32
 80041dc:	e003      	b.n	80041e6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80041de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041e0:	fab3 f383 	clz	r3, r3
 80041e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d106      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2200      	movs	r2, #0
 80041f0:	2103      	movs	r1, #3
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff f968 	bl	80034c8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff fad9 	bl	80037b4 <LL_ADC_IsEnabled>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	f040 813d 	bne.w	8004484 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6818      	ldr	r0, [r3, #0]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	6819      	ldr	r1, [r3, #0]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	461a      	mov	r2, r3
 8004218:	f7ff fa24 	bl	8003664 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4aa2      	ldr	r2, [pc, #648]	@ (80044ac <HAL_ADC_ConfigChannel+0x6dc>)
 8004222:	4293      	cmp	r3, r2
 8004224:	f040 812e 	bne.w	8004484 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10b      	bne.n	8004250 <HAL_ADC_ConfigChannel+0x480>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	0e9b      	lsrs	r3, r3, #26
 800423e:	3301      	adds	r3, #1
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	2b09      	cmp	r3, #9
 8004246:	bf94      	ite	ls
 8004248:	2301      	movls	r3, #1
 800424a:	2300      	movhi	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	e019      	b.n	8004284 <HAL_ADC_ConfigChannel+0x4b4>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004256:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004258:	fa93 f3a3 	rbit	r3, r3
 800425c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800425e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004260:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004262:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004268:	2320      	movs	r3, #32
 800426a:	e003      	b.n	8004274 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800426c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800426e:	fab3 f383 	clz	r3, r3
 8004272:	b2db      	uxtb	r3, r3
 8004274:	3301      	adds	r3, #1
 8004276:	f003 031f 	and.w	r3, r3, #31
 800427a:	2b09      	cmp	r3, #9
 800427c:	bf94      	ite	ls
 800427e:	2301      	movls	r3, #1
 8004280:	2300      	movhi	r3, #0
 8004282:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004284:	2b00      	cmp	r3, #0
 8004286:	d079      	beq.n	800437c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004290:	2b00      	cmp	r3, #0
 8004292:	d107      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x4d4>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	0e9b      	lsrs	r3, r3, #26
 800429a:	3301      	adds	r3, #1
 800429c:	069b      	lsls	r3, r3, #26
 800429e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042a2:	e015      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x500>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042ac:	fa93 f3a3 	rbit	r3, r3
 80042b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80042b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042b4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80042b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80042bc:	2320      	movs	r3, #32
 80042be:	e003      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80042c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c2:	fab3 f383 	clz	r3, r3
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	3301      	adds	r3, #1
 80042ca:	069b      	lsls	r3, r3, #26
 80042cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d109      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x520>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	0e9b      	lsrs	r3, r3, #26
 80042e2:	3301      	adds	r3, #1
 80042e4:	f003 031f 	and.w	r3, r3, #31
 80042e8:	2101      	movs	r1, #1
 80042ea:	fa01 f303 	lsl.w	r3, r1, r3
 80042ee:	e017      	b.n	8004320 <HAL_ADC_ConfigChannel+0x550>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042f8:	fa93 f3a3 	rbit	r3, r3
 80042fc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80042fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004300:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004308:	2320      	movs	r3, #32
 800430a:	e003      	b.n	8004314 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800430c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800430e:	fab3 f383 	clz	r3, r3
 8004312:	b2db      	uxtb	r3, r3
 8004314:	3301      	adds	r3, #1
 8004316:	f003 031f 	and.w	r3, r3, #31
 800431a:	2101      	movs	r1, #1
 800431c:	fa01 f303 	lsl.w	r3, r1, r3
 8004320:	ea42 0103 	orr.w	r1, r2, r3
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10a      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x576>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	0e9b      	lsrs	r3, r3, #26
 8004336:	3301      	adds	r3, #1
 8004338:	f003 021f 	and.w	r2, r3, #31
 800433c:	4613      	mov	r3, r2
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	4413      	add	r3, r2
 8004342:	051b      	lsls	r3, r3, #20
 8004344:	e018      	b.n	8004378 <HAL_ADC_ConfigChannel+0x5a8>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800434e:	fa93 f3a3 	rbit	r3, r3
 8004352:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004356:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800435e:	2320      	movs	r3, #32
 8004360:	e003      	b.n	800436a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004364:	fab3 f383 	clz	r3, r3
 8004368:	b2db      	uxtb	r3, r3
 800436a:	3301      	adds	r3, #1
 800436c:	f003 021f 	and.w	r2, r3, #31
 8004370:	4613      	mov	r3, r2
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	4413      	add	r3, r2
 8004376:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004378:	430b      	orrs	r3, r1
 800437a:	e07e      	b.n	800447a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004384:	2b00      	cmp	r3, #0
 8004386:	d107      	bne.n	8004398 <HAL_ADC_ConfigChannel+0x5c8>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	0e9b      	lsrs	r3, r3, #26
 800438e:	3301      	adds	r3, #1
 8004390:	069b      	lsls	r3, r3, #26
 8004392:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004396:	e015      	b.n	80043c4 <HAL_ADC_ConfigChannel+0x5f4>
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a0:	fa93 f3a3 	rbit	r3, r3
 80043a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80043a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80043aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80043b0:	2320      	movs	r3, #32
 80043b2:	e003      	b.n	80043bc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80043b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b6:	fab3 f383 	clz	r3, r3
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	3301      	adds	r3, #1
 80043be:	069b      	lsls	r3, r3, #26
 80043c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d109      	bne.n	80043e4 <HAL_ADC_ConfigChannel+0x614>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	0e9b      	lsrs	r3, r3, #26
 80043d6:	3301      	adds	r3, #1
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	2101      	movs	r1, #1
 80043de:	fa01 f303 	lsl.w	r3, r1, r3
 80043e2:	e017      	b.n	8004414 <HAL_ADC_ConfigChannel+0x644>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	fa93 f3a3 	rbit	r3, r3
 80043f0:	61fb      	str	r3, [r7, #28]
  return result;
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80043f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80043fc:	2320      	movs	r3, #32
 80043fe:	e003      	b.n	8004408 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004402:	fab3 f383 	clz	r3, r3
 8004406:	b2db      	uxtb	r3, r3
 8004408:	3301      	adds	r3, #1
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	2101      	movs	r1, #1
 8004410:	fa01 f303 	lsl.w	r3, r1, r3
 8004414:	ea42 0103 	orr.w	r1, r2, r3
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10d      	bne.n	8004440 <HAL_ADC_ConfigChannel+0x670>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	0e9b      	lsrs	r3, r3, #26
 800442a:	3301      	adds	r3, #1
 800442c:	f003 021f 	and.w	r2, r3, #31
 8004430:	4613      	mov	r3, r2
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	4413      	add	r3, r2
 8004436:	3b1e      	subs	r3, #30
 8004438:	051b      	lsls	r3, r3, #20
 800443a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800443e:	e01b      	b.n	8004478 <HAL_ADC_ConfigChannel+0x6a8>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	fa93 f3a3 	rbit	r3, r3
 800444c:	613b      	str	r3, [r7, #16]
  return result;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004458:	2320      	movs	r3, #32
 800445a:	e003      	b.n	8004464 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	fab3 f383 	clz	r3, r3
 8004462:	b2db      	uxtb	r3, r3
 8004464:	3301      	adds	r3, #1
 8004466:	f003 021f 	and.w	r2, r3, #31
 800446a:	4613      	mov	r3, r2
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	4413      	add	r3, r2
 8004470:	3b1e      	subs	r3, #30
 8004472:	051b      	lsls	r3, r3, #20
 8004474:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004478:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800447e:	4619      	mov	r1, r3
 8004480:	f7ff f8c5 	bl	800360e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	4b09      	ldr	r3, [pc, #36]	@ (80044b0 <HAL_ADC_ConfigChannel+0x6e0>)
 800448a:	4013      	ands	r3, r2
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 80be 	beq.w	800460e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800449a:	d004      	beq.n	80044a6 <HAL_ADC_ConfigChannel+0x6d6>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a04      	ldr	r2, [pc, #16]	@ (80044b4 <HAL_ADC_ConfigChannel+0x6e4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d10a      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x6ec>
 80044a6:	4b04      	ldr	r3, [pc, #16]	@ (80044b8 <HAL_ADC_ConfigChannel+0x6e8>)
 80044a8:	e009      	b.n	80044be <HAL_ADC_ConfigChannel+0x6ee>
 80044aa:	bf00      	nop
 80044ac:	407f0000 	.word	0x407f0000
 80044b0:	80080000 	.word	0x80080000
 80044b4:	50000100 	.word	0x50000100
 80044b8:	50000300 	.word	0x50000300
 80044bc:	4b59      	ldr	r3, [pc, #356]	@ (8004624 <HAL_ADC_ConfigChannel+0x854>)
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fe ffba 	bl	8003438 <LL_ADC_GetCommonPathInternalCh>
 80044c4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a56      	ldr	r2, [pc, #344]	@ (8004628 <HAL_ADC_ConfigChannel+0x858>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d004      	beq.n	80044dc <HAL_ADC_ConfigChannel+0x70c>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a55      	ldr	r2, [pc, #340]	@ (800462c <HAL_ADC_ConfigChannel+0x85c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d13a      	bne.n	8004552 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d134      	bne.n	8004552 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044f0:	d005      	beq.n	80044fe <HAL_ADC_ConfigChannel+0x72e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a4e      	ldr	r2, [pc, #312]	@ (8004630 <HAL_ADC_ConfigChannel+0x860>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	f040 8085 	bne.w	8004608 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004506:	d004      	beq.n	8004512 <HAL_ADC_ConfigChannel+0x742>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a49      	ldr	r2, [pc, #292]	@ (8004634 <HAL_ADC_ConfigChannel+0x864>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d101      	bne.n	8004516 <HAL_ADC_ConfigChannel+0x746>
 8004512:	4a49      	ldr	r2, [pc, #292]	@ (8004638 <HAL_ADC_ConfigChannel+0x868>)
 8004514:	e000      	b.n	8004518 <HAL_ADC_ConfigChannel+0x748>
 8004516:	4a43      	ldr	r2, [pc, #268]	@ (8004624 <HAL_ADC_ConfigChannel+0x854>)
 8004518:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800451c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004520:	4619      	mov	r1, r3
 8004522:	4610      	mov	r0, r2
 8004524:	f7fe ff75 	bl	8003412 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004528:	4b44      	ldr	r3, [pc, #272]	@ (800463c <HAL_ADC_ConfigChannel+0x86c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	099b      	lsrs	r3, r3, #6
 800452e:	4a44      	ldr	r2, [pc, #272]	@ (8004640 <HAL_ADC_ConfigChannel+0x870>)
 8004530:	fba2 2303 	umull	r2, r3, r2, r3
 8004534:	099b      	lsrs	r3, r3, #6
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	4613      	mov	r3, r2
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	4413      	add	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004542:	e002      	b.n	800454a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	3b01      	subs	r3, #1
 8004548:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1f9      	bne.n	8004544 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004550:	e05a      	b.n	8004608 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a3b      	ldr	r2, [pc, #236]	@ (8004644 <HAL_ADC_ConfigChannel+0x874>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d125      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800455c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004560:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d11f      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a31      	ldr	r2, [pc, #196]	@ (8004634 <HAL_ADC_ConfigChannel+0x864>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d104      	bne.n	800457c <HAL_ADC_ConfigChannel+0x7ac>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a34      	ldr	r2, [pc, #208]	@ (8004648 <HAL_ADC_ConfigChannel+0x878>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d047      	beq.n	800460c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004584:	d004      	beq.n	8004590 <HAL_ADC_ConfigChannel+0x7c0>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a2a      	ldr	r2, [pc, #168]	@ (8004634 <HAL_ADC_ConfigChannel+0x864>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d101      	bne.n	8004594 <HAL_ADC_ConfigChannel+0x7c4>
 8004590:	4a29      	ldr	r2, [pc, #164]	@ (8004638 <HAL_ADC_ConfigChannel+0x868>)
 8004592:	e000      	b.n	8004596 <HAL_ADC_ConfigChannel+0x7c6>
 8004594:	4a23      	ldr	r2, [pc, #140]	@ (8004624 <HAL_ADC_ConfigChannel+0x854>)
 8004596:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800459a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800459e:	4619      	mov	r1, r3
 80045a0:	4610      	mov	r0, r2
 80045a2:	f7fe ff36 	bl	8003412 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045a6:	e031      	b.n	800460c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a27      	ldr	r2, [pc, #156]	@ (800464c <HAL_ADC_ConfigChannel+0x87c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d12d      	bne.n	800460e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d127      	bne.n	800460e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a1c      	ldr	r2, [pc, #112]	@ (8004634 <HAL_ADC_ConfigChannel+0x864>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d022      	beq.n	800460e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045d0:	d004      	beq.n	80045dc <HAL_ADC_ConfigChannel+0x80c>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a17      	ldr	r2, [pc, #92]	@ (8004634 <HAL_ADC_ConfigChannel+0x864>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d101      	bne.n	80045e0 <HAL_ADC_ConfigChannel+0x810>
 80045dc:	4a16      	ldr	r2, [pc, #88]	@ (8004638 <HAL_ADC_ConfigChannel+0x868>)
 80045de:	e000      	b.n	80045e2 <HAL_ADC_ConfigChannel+0x812>
 80045e0:	4a10      	ldr	r2, [pc, #64]	@ (8004624 <HAL_ADC_ConfigChannel+0x854>)
 80045e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80045e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80045ea:	4619      	mov	r1, r3
 80045ec:	4610      	mov	r0, r2
 80045ee:	f7fe ff10 	bl	8003412 <LL_ADC_SetCommonPathInternalCh>
 80045f2:	e00c      	b.n	800460e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f8:	f043 0220 	orr.w	r2, r3, #32
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004606:	e002      	b.n	800460e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004608:	bf00      	nop
 800460a:	e000      	b.n	800460e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800460c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004616:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800461a:	4618      	mov	r0, r3
 800461c:	37d8      	adds	r7, #216	@ 0xd8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	50000700 	.word	0x50000700
 8004628:	c3210000 	.word	0xc3210000
 800462c:	90c00010 	.word	0x90c00010
 8004630:	50000600 	.word	0x50000600
 8004634:	50000100 	.word	0x50000100
 8004638:	50000300 	.word	0x50000300
 800463c:	2000002c 	.word	0x2000002c
 8004640:	053e2d63 	.word	0x053e2d63
 8004644:	c7520000 	.word	0xc7520000
 8004648:	50000500 	.word	0x50000500
 800464c:	cb840000 	.word	0xcb840000

08004650 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004658:	2300      	movs	r3, #0
 800465a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff f8a7 	bl	80037b4 <LL_ADC_IsEnabled>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d176      	bne.n	800475a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	4b3c      	ldr	r3, [pc, #240]	@ (8004764 <ADC_Enable+0x114>)
 8004674:	4013      	ands	r3, r2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00d      	beq.n	8004696 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800467e:	f043 0210 	orr.w	r2, r3, #16
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800468a:	f043 0201 	orr.w	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e062      	b.n	800475c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff f862 	bl	8003764 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046a8:	d004      	beq.n	80046b4 <ADC_Enable+0x64>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a2e      	ldr	r2, [pc, #184]	@ (8004768 <ADC_Enable+0x118>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d101      	bne.n	80046b8 <ADC_Enable+0x68>
 80046b4:	4b2d      	ldr	r3, [pc, #180]	@ (800476c <ADC_Enable+0x11c>)
 80046b6:	e000      	b.n	80046ba <ADC_Enable+0x6a>
 80046b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004770 <ADC_Enable+0x120>)
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fe febc 	bl	8003438 <LL_ADC_GetCommonPathInternalCh>
 80046c0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80046c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d013      	beq.n	80046f2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004774 <ADC_Enable+0x124>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	099b      	lsrs	r3, r3, #6
 80046d0:	4a29      	ldr	r2, [pc, #164]	@ (8004778 <ADC_Enable+0x128>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	099b      	lsrs	r3, r3, #6
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	4613      	mov	r3, r2
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80046e4:	e002      	b.n	80046ec <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	3b01      	subs	r3, #1
 80046ea:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f9      	bne.n	80046e6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80046f2:	f7fe fe6f 	bl	80033d4 <HAL_GetTick>
 80046f6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046f8:	e028      	b.n	800474c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff f858 	bl	80037b4 <LL_ADC_IsEnabled>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d104      	bne.n	8004714 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff f828 	bl	8003764 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004714:	f7fe fe5e 	bl	80033d4 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d914      	bls.n	800474c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b01      	cmp	r3, #1
 800472e:	d00d      	beq.n	800474c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004734:	f043 0210 	orr.w	r2, r3, #16
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004740:	f043 0201 	orr.w	r2, r3, #1
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e007      	b.n	800475c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b01      	cmp	r3, #1
 8004758:	d1cf      	bne.n	80046fa <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	8000003f 	.word	0x8000003f
 8004768:	50000100 	.word	0x50000100
 800476c:	50000300 	.word	0x50000300
 8004770:	50000700 	.word	0x50000700
 8004774:	2000002c 	.word	0x2000002c
 8004778:	053e2d63 	.word	0x053e2d63

0800477c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff f826 	bl	80037da <LL_ADC_IsDisableOngoing>
 800478e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff f80d 	bl	80037b4 <LL_ADC_IsEnabled>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d047      	beq.n	8004830 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d144      	bne.n	8004830 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 030d 	and.w	r3, r3, #13
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d10c      	bne.n	80047ce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fe ffe7 	bl	800378c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2203      	movs	r2, #3
 80047c4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80047c6:	f7fe fe05 	bl	80033d4 <HAL_GetTick>
 80047ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80047cc:	e029      	b.n	8004822 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d2:	f043 0210 	orr.w	r2, r3, #16
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047de:	f043 0201 	orr.w	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e023      	b.n	8004832 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80047ea:	f7fe fdf3 	bl	80033d4 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d914      	bls.n	8004822 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00d      	beq.n	8004822 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800480a:	f043 0210 	orr.w	r2, r3, #16
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004816:	f043 0201 	orr.w	r2, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e007      	b.n	8004832 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1dc      	bne.n	80047ea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b084      	sub	sp, #16
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004846:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800484c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004850:	2b00      	cmp	r3, #0
 8004852:	d14b      	bne.n	80048ec <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004858:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	2b00      	cmp	r3, #0
 800486c:	d021      	beq.n	80048b2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4618      	mov	r0, r3
 8004874:	f7fe fe8c 	bl	8003590 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d032      	beq.n	80048e4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d12b      	bne.n	80048e4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004890:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d11f      	bne.n	80048e4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a8:	f043 0201 	orr.w	r2, r3, #1
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80048b0:	e018      	b.n	80048e4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d111      	bne.n	80048e4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d105      	bne.n	80048e4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048dc:	f043 0201 	orr.w	r2, r3, #1
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f7ff fa55 	bl	8003d94 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80048ea:	e00e      	b.n	800490a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f7ff fa5f 	bl	8003dbc <HAL_ADC_ErrorCallback>
}
 80048fe:	e004      	b.n	800490a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	4798      	blx	r3
}
 800490a:	bf00      	nop
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f7ff fa41 	bl	8003da8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004926:	bf00      	nop
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b084      	sub	sp, #16
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004940:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800494c:	f043 0204 	orr.w	r2, r3, #4
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f7ff fa31 	bl	8003dbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800495a:	bf00      	nop
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <LL_ADC_IsEnabled>:
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <LL_ADC_IsEnabled+0x18>
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <LL_ADC_IsEnabled+0x1a>
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <LL_ADC_StartCalibration>:
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800499a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	609a      	str	r2, [r3, #8]
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <LL_ADC_IsCalibrationOnGoing>:
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049ce:	d101      	bne.n	80049d4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <LL_ADC_REG_IsConversionOngoing>:
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 0304 	and.w	r3, r3, #4
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d101      	bne.n	80049fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004a12:	2300      	movs	r3, #0
 8004a14:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_ADCEx_Calibration_Start+0x1c>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e04d      	b.n	8004ac0 <HAL_ADCEx_Calibration_Start+0xb8>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff fea5 	bl	800477c <ADC_Disable>
 8004a32:	4603      	mov	r3, r0
 8004a34:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d136      	bne.n	8004aaa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a40:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004a44:	f023 0302 	bic.w	r3, r3, #2
 8004a48:	f043 0202 	orr.w	r2, r3, #2
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6839      	ldr	r1, [r7, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff ff96 	bl	8004988 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004a5c:	e014      	b.n	8004a88 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	3301      	adds	r3, #1
 8004a62:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	4a18      	ldr	r2, [pc, #96]	@ (8004ac8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d90d      	bls.n	8004a88 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a70:	f023 0312 	bic.w	r3, r3, #18
 8004a74:	f043 0210 	orr.w	r2, r3, #16
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e01b      	b.n	8004ac0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff ff94 	bl	80049ba <LL_ADC_IsCalibrationOnGoing>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e2      	bne.n	8004a5e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a9c:	f023 0303 	bic.w	r3, r3, #3
 8004aa0:	f043 0201 	orr.w	r2, r3, #1
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004aa8:	e005      	b.n	8004ab6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aae:	f043 0210 	orr.w	r2, r3, #16
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	0004de01 	.word	0x0004de01

08004acc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004acc:	b590      	push	{r4, r7, lr}
 8004ace:	b0a1      	sub	sp, #132	@ 0x84
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d101      	bne.n	8004aea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	e0e7      	b.n	8004cba <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004af2:	2300      	movs	r3, #0
 8004af4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004af6:	2300      	movs	r3, #0
 8004af8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b02:	d102      	bne.n	8004b0a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004b04:	4b6f      	ldr	r3, [pc, #444]	@ (8004cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b06:	60bb      	str	r3, [r7, #8]
 8004b08:	e009      	b.n	8004b1e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a6e      	ldr	r2, [pc, #440]	@ (8004cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d102      	bne.n	8004b1a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004b14:	4b6d      	ldr	r3, [pc, #436]	@ (8004ccc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004b16:	60bb      	str	r3, [r7, #8]
 8004b18:	e001      	b.n	8004b1e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10b      	bne.n	8004b3c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b28:	f043 0220 	orr.w	r2, r3, #32
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e0be      	b.n	8004cba <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff ff4f 	bl	80049e2 <LL_ADC_REG_IsConversionOngoing>
 8004b44:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff ff49 	bl	80049e2 <LL_ADC_REG_IsConversionOngoing>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f040 80a0 	bne.w	8004c98 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004b58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f040 809c 	bne.w	8004c98 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b68:	d004      	beq.n	8004b74 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a55      	ldr	r2, [pc, #340]	@ (8004cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d101      	bne.n	8004b78 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004b74:	4b56      	ldr	r3, [pc, #344]	@ (8004cd0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004b76:	e000      	b.n	8004b7a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004b78:	4b56      	ldr	r3, [pc, #344]	@ (8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004b7a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d04b      	beq.n	8004c1c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004b84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	6859      	ldr	r1, [r3, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004b96:	035b      	lsls	r3, r3, #13
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b9e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ba8:	d004      	beq.n	8004bb4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a45      	ldr	r2, [pc, #276]	@ (8004cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d10f      	bne.n	8004bd4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004bb4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004bb8:	f7ff fed3 	bl	8004962 <LL_ADC_IsEnabled>
 8004bbc:	4604      	mov	r4, r0
 8004bbe:	4841      	ldr	r0, [pc, #260]	@ (8004cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004bc0:	f7ff fecf 	bl	8004962 <LL_ADC_IsEnabled>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	4323      	orrs	r3, r4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bf0c      	ite	eq
 8004bcc:	2301      	moveq	r3, #1
 8004bce:	2300      	movne	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	e012      	b.n	8004bfa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004bd4:	483c      	ldr	r0, [pc, #240]	@ (8004cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004bd6:	f7ff fec4 	bl	8004962 <LL_ADC_IsEnabled>
 8004bda:	4604      	mov	r4, r0
 8004bdc:	483b      	ldr	r0, [pc, #236]	@ (8004ccc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004bde:	f7ff fec0 	bl	8004962 <LL_ADC_IsEnabled>
 8004be2:	4603      	mov	r3, r0
 8004be4:	431c      	orrs	r4, r3
 8004be6:	483c      	ldr	r0, [pc, #240]	@ (8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004be8:	f7ff febb 	bl	8004962 <LL_ADC_IsEnabled>
 8004bec:	4603      	mov	r3, r0
 8004bee:	4323      	orrs	r3, r4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	bf0c      	ite	eq
 8004bf4:	2301      	moveq	r3, #1
 8004bf6:	2300      	movne	r3, #0
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d056      	beq.n	8004cac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004bfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004c06:	f023 030f 	bic.w	r3, r3, #15
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	6811      	ldr	r1, [r2, #0]
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	6892      	ldr	r2, [r2, #8]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	431a      	orrs	r2, r3
 8004c16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c18:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c1a:	e047      	b.n	8004cac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004c1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c26:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c30:	d004      	beq.n	8004c3c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a23      	ldr	r2, [pc, #140]	@ (8004cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d10f      	bne.n	8004c5c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004c3c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004c40:	f7ff fe8f 	bl	8004962 <LL_ADC_IsEnabled>
 8004c44:	4604      	mov	r4, r0
 8004c46:	481f      	ldr	r0, [pc, #124]	@ (8004cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c48:	f7ff fe8b 	bl	8004962 <LL_ADC_IsEnabled>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	4323      	orrs	r3, r4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	bf0c      	ite	eq
 8004c54:	2301      	moveq	r3, #1
 8004c56:	2300      	movne	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	e012      	b.n	8004c82 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004c5c:	481a      	ldr	r0, [pc, #104]	@ (8004cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004c5e:	f7ff fe80 	bl	8004962 <LL_ADC_IsEnabled>
 8004c62:	4604      	mov	r4, r0
 8004c64:	4819      	ldr	r0, [pc, #100]	@ (8004ccc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004c66:	f7ff fe7c 	bl	8004962 <LL_ADC_IsEnabled>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	431c      	orrs	r4, r3
 8004c6e:	481a      	ldr	r0, [pc, #104]	@ (8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004c70:	f7ff fe77 	bl	8004962 <LL_ADC_IsEnabled>
 8004c74:	4603      	mov	r3, r0
 8004c76:	4323      	orrs	r3, r4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	bf0c      	ite	eq
 8004c7c:	2301      	moveq	r3, #1
 8004c7e:	2300      	movne	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d012      	beq.n	8004cac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004c86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004c8e:	f023 030f 	bic.w	r3, r3, #15
 8004c92:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004c94:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c96:	e009      	b.n	8004cac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c9c:	f043 0220 	orr.w	r2, r3, #32
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004caa:	e000      	b.n	8004cae <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004cac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004cb6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3784      	adds	r7, #132	@ 0x84
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd90      	pop	{r4, r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	50000100 	.word	0x50000100
 8004cc8:	50000400 	.word	0x50000400
 8004ccc:	50000500 	.word	0x50000500
 8004cd0:	50000300 	.word	0x50000300
 8004cd4:	50000700 	.word	0x50000700
 8004cd8:	50000600 	.word	0x50000600

08004cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cec:	4b0c      	ldr	r3, [pc, #48]	@ (8004d20 <__NVIC_SetPriorityGrouping+0x44>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d0e:	4a04      	ldr	r2, [pc, #16]	@ (8004d20 <__NVIC_SetPriorityGrouping+0x44>)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	60d3      	str	r3, [r2, #12]
}
 8004d14:	bf00      	nop
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	e000ed00 	.word	0xe000ed00

08004d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d28:	4b04      	ldr	r3, [pc, #16]	@ (8004d3c <__NVIC_GetPriorityGrouping+0x18>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	0a1b      	lsrs	r3, r3, #8
 8004d2e:	f003 0307 	and.w	r3, r3, #7
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	e000ed00 	.word	0xe000ed00

08004d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4603      	mov	r3, r0
 8004d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	db0b      	blt.n	8004d6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d52:	79fb      	ldrb	r3, [r7, #7]
 8004d54:	f003 021f 	and.w	r2, r3, #31
 8004d58:	4907      	ldr	r1, [pc, #28]	@ (8004d78 <__NVIC_EnableIRQ+0x38>)
 8004d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d5e:	095b      	lsrs	r3, r3, #5
 8004d60:	2001      	movs	r0, #1
 8004d62:	fa00 f202 	lsl.w	r2, r0, r2
 8004d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	e000e100 	.word	0xe000e100

08004d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4603      	mov	r3, r0
 8004d84:	6039      	str	r1, [r7, #0]
 8004d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	db0a      	blt.n	8004da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	490c      	ldr	r1, [pc, #48]	@ (8004dc8 <__NVIC_SetPriority+0x4c>)
 8004d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d9a:	0112      	lsls	r2, r2, #4
 8004d9c:	b2d2      	uxtb	r2, r2
 8004d9e:	440b      	add	r3, r1
 8004da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004da4:	e00a      	b.n	8004dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	4908      	ldr	r1, [pc, #32]	@ (8004dcc <__NVIC_SetPriority+0x50>)
 8004dac:	79fb      	ldrb	r3, [r7, #7]
 8004dae:	f003 030f 	and.w	r3, r3, #15
 8004db2:	3b04      	subs	r3, #4
 8004db4:	0112      	lsls	r2, r2, #4
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	440b      	add	r3, r1
 8004dba:	761a      	strb	r2, [r3, #24]
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	e000e100 	.word	0xe000e100
 8004dcc:	e000ed00 	.word	0xe000ed00

08004dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b089      	sub	sp, #36	@ 0x24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f003 0307 	and.w	r3, r3, #7
 8004de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	f1c3 0307 	rsb	r3, r3, #7
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	bf28      	it	cs
 8004dee:	2304      	movcs	r3, #4
 8004df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	3304      	adds	r3, #4
 8004df6:	2b06      	cmp	r3, #6
 8004df8:	d902      	bls.n	8004e00 <NVIC_EncodePriority+0x30>
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	3b03      	subs	r3, #3
 8004dfe:	e000      	b.n	8004e02 <NVIC_EncodePriority+0x32>
 8004e00:	2300      	movs	r3, #0
 8004e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e04:	f04f 32ff 	mov.w	r2, #4294967295
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	43da      	mvns	r2, r3
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	401a      	ands	r2, r3
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e18:	f04f 31ff 	mov.w	r1, #4294967295
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e22:	43d9      	mvns	r1, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e28:	4313      	orrs	r3, r2
         );
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3724      	adds	r7, #36	@ 0x24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
	...

08004e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e48:	d301      	bcc.n	8004e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e00f      	b.n	8004e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e78 <SysTick_Config+0x40>)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e56:	210f      	movs	r1, #15
 8004e58:	f04f 30ff 	mov.w	r0, #4294967295
 8004e5c:	f7ff ff8e 	bl	8004d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e60:	4b05      	ldr	r3, [pc, #20]	@ (8004e78 <SysTick_Config+0x40>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e66:	4b04      	ldr	r3, [pc, #16]	@ (8004e78 <SysTick_Config+0x40>)
 8004e68:	2207      	movs	r2, #7
 8004e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	e000e010 	.word	0xe000e010

08004e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff ff29 	bl	8004cdc <__NVIC_SetPriorityGrouping>
}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b086      	sub	sp, #24
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	4603      	mov	r3, r0
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	607a      	str	r2, [r7, #4]
 8004e9e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ea0:	f7ff ff40 	bl	8004d24 <__NVIC_GetPriorityGrouping>
 8004ea4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	68b9      	ldr	r1, [r7, #8]
 8004eaa:	6978      	ldr	r0, [r7, #20]
 8004eac:	f7ff ff90 	bl	8004dd0 <NVIC_EncodePriority>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eb6:	4611      	mov	r1, r2
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff ff5f 	bl	8004d7c <__NVIC_SetPriority>
}
 8004ebe:	bf00      	nop
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b082      	sub	sp, #8
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	4603      	mov	r3, r0
 8004ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff ff33 	bl	8004d40 <__NVIC_EnableIRQ>
}
 8004eda:	bf00      	nop
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff ffa4 	bl	8004e38 <SysTick_Config>
 8004ef0:	4603      	mov	r3, r0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e08d      	b.n	800502a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	461a      	mov	r2, r3
 8004f14:	4b47      	ldr	r3, [pc, #284]	@ (8005034 <HAL_DMA_Init+0x138>)
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d80f      	bhi.n	8004f3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	4b45      	ldr	r3, [pc, #276]	@ (8005038 <HAL_DMA_Init+0x13c>)
 8004f22:	4413      	add	r3, r2
 8004f24:	4a45      	ldr	r2, [pc, #276]	@ (800503c <HAL_DMA_Init+0x140>)
 8004f26:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2a:	091b      	lsrs	r3, r3, #4
 8004f2c:	009a      	lsls	r2, r3, #2
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a42      	ldr	r2, [pc, #264]	@ (8005040 <HAL_DMA_Init+0x144>)
 8004f36:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f38:	e00e      	b.n	8004f58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	4b40      	ldr	r3, [pc, #256]	@ (8005044 <HAL_DMA_Init+0x148>)
 8004f42:	4413      	add	r3, r2
 8004f44:	4a3d      	ldr	r2, [pc, #244]	@ (800503c <HAL_DMA_Init+0x140>)
 8004f46:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4a:	091b      	lsrs	r3, r3, #4
 8004f4c:	009a      	lsls	r2, r3, #2
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a3c      	ldr	r2, [pc, #240]	@ (8005048 <HAL_DMA_Init+0x14c>)
 8004f56:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fa84 	bl	80054b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fb8:	d102      	bne.n	8004fc0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004fd4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d010      	beq.n	8005000 <HAL_DMA_Init+0x104>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d80c      	bhi.n	8005000 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 faa4 	bl	8005534 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ffc:	605a      	str	r2, [r3, #4]
 8004ffe:	e008      	b.n	8005012 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40020407 	.word	0x40020407
 8005038:	bffdfff8 	.word	0xbffdfff8
 800503c:	cccccccd 	.word	0xcccccccd
 8005040:	40020000 	.word	0x40020000
 8005044:	bffdfbf8 	.word	0xbffdfbf8
 8005048:	40020400 	.word	0x40020400

0800504c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005064:	2b01      	cmp	r3, #1
 8005066:	d101      	bne.n	800506c <HAL_DMA_Start_IT+0x20>
 8005068:	2302      	movs	r3, #2
 800506a:	e066      	b.n	800513a <HAL_DMA_Start_IT+0xee>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b01      	cmp	r3, #1
 800507e:	d155      	bne.n	800512c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0201 	bic.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	68b9      	ldr	r1, [r7, #8]
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 f9c9 	bl	800543c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d008      	beq.n	80050c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f042 020e 	orr.w	r2, r2, #14
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	e00f      	b.n	80050e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0204 	bic.w	r2, r2, #4
 80050d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 020a 	orr.w	r2, r2, #10
 80050e2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d007      	beq.n	8005102 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005100:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005106:	2b00      	cmp	r3, #0
 8005108:	d007      	beq.n	800511a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005114:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005118:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f042 0201 	orr.w	r2, r2, #1
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	e005      	b.n	8005138 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005134:	2302      	movs	r3, #2
 8005136:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005138:	7dfb      	ldrb	r3, [r7, #23]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005142:	b480      	push	{r7}
 8005144:	b085      	sub	sp, #20
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d005      	beq.n	8005166 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2204      	movs	r2, #4
 800515e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	73fb      	strb	r3, [r7, #15]
 8005164:	e037      	b.n	80051d6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 020e 	bic.w	r2, r2, #14
 8005174:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005180:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005184:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0201 	bic.w	r2, r2, #1
 8005194:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800519a:	f003 021f 	and.w	r2, r3, #31
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a2:	2101      	movs	r1, #1
 80051a4:	fa01 f202 	lsl.w	r2, r1, r2
 80051a8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80051b2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00c      	beq.n	80051d6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051ca:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80051d4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051fc:	2300      	movs	r3, #0
 80051fe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d00d      	beq.n	8005228 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2204      	movs	r2, #4
 8005210:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	73fb      	strb	r3, [r7, #15]
 8005226:	e047      	b.n	80052b8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 020e 	bic.w	r2, r2, #14
 8005236:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0201 	bic.w	r2, r2, #1
 8005246:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005252:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005256:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800525c:	f003 021f 	and.w	r2, r3, #31
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005264:	2101      	movs	r1, #1
 8005266:	fa01 f202 	lsl.w	r2, r1, r2
 800526a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005274:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00c      	beq.n	8005298 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005288:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800528c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005296:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d003      	beq.n	80052b8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	4798      	blx	r3
    }
  }
  return status;
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052de:	f003 031f 	and.w	r3, r3, #31
 80052e2:	2204      	movs	r2, #4
 80052e4:	409a      	lsls	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4013      	ands	r3, r2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d026      	beq.n	800533c <HAL_DMA_IRQHandler+0x7a>
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d021      	beq.n	800533c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0320 	and.w	r3, r3, #32
 8005302:	2b00      	cmp	r3, #0
 8005304:	d107      	bne.n	8005316 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 0204 	bic.w	r2, r2, #4
 8005314:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531a:	f003 021f 	and.w	r2, r3, #31
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005322:	2104      	movs	r1, #4
 8005324:	fa01 f202 	lsl.w	r2, r1, r2
 8005328:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800532e:	2b00      	cmp	r3, #0
 8005330:	d071      	beq.n	8005416 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800533a:	e06c      	b.n	8005416 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005340:	f003 031f 	and.w	r3, r3, #31
 8005344:	2202      	movs	r2, #2
 8005346:	409a      	lsls	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4013      	ands	r3, r2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d02e      	beq.n	80053ae <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d029      	beq.n	80053ae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10b      	bne.n	8005380 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 020a 	bic.w	r2, r2, #10
 8005376:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005384:	f003 021f 	and.w	r2, r3, #31
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538c:	2102      	movs	r1, #2
 800538e:	fa01 f202 	lsl.w	r2, r1, r2
 8005392:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d038      	beq.n	8005416 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80053ac:	e033      	b.n	8005416 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b2:	f003 031f 	and.w	r3, r3, #31
 80053b6:	2208      	movs	r2, #8
 80053b8:	409a      	lsls	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	4013      	ands	r3, r2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d02a      	beq.n	8005418 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f003 0308 	and.w	r3, r3, #8
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d025      	beq.n	8005418 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 020e 	bic.w	r2, r2, #14
 80053da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e0:	f003 021f 	and.w	r2, r3, #31
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e8:	2101      	movs	r1, #1
 80053ea:	fa01 f202 	lsl.w	r2, r1, r2
 80053ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800540a:	2b00      	cmp	r3, #0
 800540c:	d004      	beq.n	8005418 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005416:	bf00      	nop
 8005418:	bf00      	nop
}
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800542e:	b2db      	uxtb	r3, r3
}
 8005430:	4618      	mov	r0, r3
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005452:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005458:	2b00      	cmp	r3, #0
 800545a:	d004      	beq.n	8005466 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005464:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546a:	f003 021f 	and.w	r2, r3, #31
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005472:	2101      	movs	r1, #1
 8005474:	fa01 f202 	lsl.w	r2, r1, r2
 8005478:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	2b10      	cmp	r3, #16
 8005488:	d108      	bne.n	800549c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800549a:	e007      	b.n	80054ac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	60da      	str	r2, [r3, #12]
}
 80054ac:	bf00      	nop
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	461a      	mov	r2, r3
 80054c6:	4b16      	ldr	r3, [pc, #88]	@ (8005520 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d802      	bhi.n	80054d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80054cc:	4b15      	ldr	r3, [pc, #84]	@ (8005524 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	e001      	b.n	80054d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80054d2:	4b15      	ldr	r3, [pc, #84]	@ (8005528 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80054d4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	3b08      	subs	r3, #8
 80054e2:	4a12      	ldr	r2, [pc, #72]	@ (800552c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80054e4:	fba2 2303 	umull	r2, r3, r2, r3
 80054e8:	091b      	lsrs	r3, r3, #4
 80054ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f0:	089b      	lsrs	r3, r3, #2
 80054f2:	009a      	lsls	r2, r3, #2
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	4413      	add	r3, r2
 80054f8:	461a      	mov	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a0b      	ldr	r2, [pc, #44]	@ (8005530 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005502:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f003 031f 	and.w	r3, r3, #31
 800550a:	2201      	movs	r2, #1
 800550c:	409a      	lsls	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005512:	bf00      	nop
 8005514:	371c      	adds	r7, #28
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40020407 	.word	0x40020407
 8005524:	40020800 	.word	0x40020800
 8005528:	40020820 	.word	0x40020820
 800552c:	cccccccd 	.word	0xcccccccd
 8005530:	40020880 	.word	0x40020880

08005534 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	b2db      	uxtb	r3, r3
 8005542:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4b0b      	ldr	r3, [pc, #44]	@ (8005574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005548:	4413      	add	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	461a      	mov	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a08      	ldr	r2, [pc, #32]	@ (8005578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005556:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	3b01      	subs	r3, #1
 800555c:	f003 031f 	and.w	r3, r3, #31
 8005560:	2201      	movs	r2, #1
 8005562:	409a      	lsls	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005568:	bf00      	nop
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	1000823f 	.word	0x1000823f
 8005578:	40020940 	.word	0x40020940

0800557c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005586:	2300      	movs	r3, #0
 8005588:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800558a:	e15a      	b.n	8005842 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	2101      	movs	r1, #1
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	fa01 f303 	lsl.w	r3, r1, r3
 8005598:	4013      	ands	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 814c 	beq.w	800583c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f003 0303 	and.w	r3, r3, #3
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d005      	beq.n	80055bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d130      	bne.n	800561e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	2203      	movs	r2, #3
 80055c8:	fa02 f303 	lsl.w	r3, r2, r3
 80055cc:	43db      	mvns	r3, r3
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	4013      	ands	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	68da      	ldr	r2, [r3, #12]
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055f2:	2201      	movs	r2, #1
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	43db      	mvns	r3, r3
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4013      	ands	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	091b      	lsrs	r3, r3, #4
 8005608:	f003 0201 	and.w	r2, r3, #1
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4313      	orrs	r3, r2
 8005616:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	2b03      	cmp	r3, #3
 8005628:	d017      	beq.n	800565a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	2203      	movs	r2, #3
 8005636:	fa02 f303 	lsl.w	r3, r2, r3
 800563a:	43db      	mvns	r3, r3
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4013      	ands	r3, r2
 8005640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	689a      	ldr	r2, [r3, #8]
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d123      	bne.n	80056ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	08da      	lsrs	r2, r3, #3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	3208      	adds	r2, #8
 800566e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005672:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	220f      	movs	r2, #15
 800567e:	fa02 f303 	lsl.w	r3, r2, r3
 8005682:	43db      	mvns	r3, r3
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	4013      	ands	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	691a      	ldr	r2, [r3, #16]
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	fa02 f303 	lsl.w	r3, r2, r3
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	4313      	orrs	r3, r2
 800569e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	08da      	lsrs	r2, r3, #3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3208      	adds	r2, #8
 80056a8:	6939      	ldr	r1, [r7, #16]
 80056aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	2203      	movs	r2, #3
 80056ba:	fa02 f303 	lsl.w	r3, r2, r3
 80056be:	43db      	mvns	r3, r3
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4013      	ands	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f003 0203 	and.w	r2, r3, #3
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	fa02 f303 	lsl.w	r3, r2, r3
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 80a6 	beq.w	800583c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056f0:	4b5b      	ldr	r3, [pc, #364]	@ (8005860 <HAL_GPIO_Init+0x2e4>)
 80056f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056f4:	4a5a      	ldr	r2, [pc, #360]	@ (8005860 <HAL_GPIO_Init+0x2e4>)
 80056f6:	f043 0301 	orr.w	r3, r3, #1
 80056fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80056fc:	4b58      	ldr	r3, [pc, #352]	@ (8005860 <HAL_GPIO_Init+0x2e4>)
 80056fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	60bb      	str	r3, [r7, #8]
 8005706:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005708:	4a56      	ldr	r2, [pc, #344]	@ (8005864 <HAL_GPIO_Init+0x2e8>)
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	089b      	lsrs	r3, r3, #2
 800570e:	3302      	adds	r3, #2
 8005710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005714:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f003 0303 	and.w	r3, r3, #3
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	220f      	movs	r2, #15
 8005720:	fa02 f303 	lsl.w	r3, r2, r3
 8005724:	43db      	mvns	r3, r3
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	4013      	ands	r3, r2
 800572a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005732:	d01f      	beq.n	8005774 <HAL_GPIO_Init+0x1f8>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a4c      	ldr	r2, [pc, #304]	@ (8005868 <HAL_GPIO_Init+0x2ec>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d019      	beq.n	8005770 <HAL_GPIO_Init+0x1f4>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a4b      	ldr	r2, [pc, #300]	@ (800586c <HAL_GPIO_Init+0x2f0>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d013      	beq.n	800576c <HAL_GPIO_Init+0x1f0>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a4a      	ldr	r2, [pc, #296]	@ (8005870 <HAL_GPIO_Init+0x2f4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d00d      	beq.n	8005768 <HAL_GPIO_Init+0x1ec>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a49      	ldr	r2, [pc, #292]	@ (8005874 <HAL_GPIO_Init+0x2f8>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d007      	beq.n	8005764 <HAL_GPIO_Init+0x1e8>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a48      	ldr	r2, [pc, #288]	@ (8005878 <HAL_GPIO_Init+0x2fc>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d101      	bne.n	8005760 <HAL_GPIO_Init+0x1e4>
 800575c:	2305      	movs	r3, #5
 800575e:	e00a      	b.n	8005776 <HAL_GPIO_Init+0x1fa>
 8005760:	2306      	movs	r3, #6
 8005762:	e008      	b.n	8005776 <HAL_GPIO_Init+0x1fa>
 8005764:	2304      	movs	r3, #4
 8005766:	e006      	b.n	8005776 <HAL_GPIO_Init+0x1fa>
 8005768:	2303      	movs	r3, #3
 800576a:	e004      	b.n	8005776 <HAL_GPIO_Init+0x1fa>
 800576c:	2302      	movs	r3, #2
 800576e:	e002      	b.n	8005776 <HAL_GPIO_Init+0x1fa>
 8005770:	2301      	movs	r3, #1
 8005772:	e000      	b.n	8005776 <HAL_GPIO_Init+0x1fa>
 8005774:	2300      	movs	r3, #0
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	f002 0203 	and.w	r2, r2, #3
 800577c:	0092      	lsls	r2, r2, #2
 800577e:	4093      	lsls	r3, r2
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005786:	4937      	ldr	r1, [pc, #220]	@ (8005864 <HAL_GPIO_Init+0x2e8>)
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	089b      	lsrs	r3, r3, #2
 800578c:	3302      	adds	r3, #2
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005794:	4b39      	ldr	r3, [pc, #228]	@ (800587c <HAL_GPIO_Init+0x300>)
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	43db      	mvns	r3, r3
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	4013      	ands	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80057b8:	4a30      	ldr	r2, [pc, #192]	@ (800587c <HAL_GPIO_Init+0x300>)
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80057be:	4b2f      	ldr	r3, [pc, #188]	@ (800587c <HAL_GPIO_Init+0x300>)
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	43db      	mvns	r3, r3
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	4013      	ands	r3, r2
 80057cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80057e2:	4a26      	ldr	r2, [pc, #152]	@ (800587c <HAL_GPIO_Init+0x300>)
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80057e8:	4b24      	ldr	r3, [pc, #144]	@ (800587c <HAL_GPIO_Init+0x300>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	43db      	mvns	r3, r3
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4013      	ands	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4313      	orrs	r3, r2
 800580a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800580c:	4a1b      	ldr	r2, [pc, #108]	@ (800587c <HAL_GPIO_Init+0x300>)
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005812:	4b1a      	ldr	r3, [pc, #104]	@ (800587c <HAL_GPIO_Init+0x300>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	43db      	mvns	r3, r3
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	4013      	ands	r3, r2
 8005820:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005836:	4a11      	ldr	r2, [pc, #68]	@ (800587c <HAL_GPIO_Init+0x300>)
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	3301      	adds	r3, #1
 8005840:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	fa22 f303 	lsr.w	r3, r2, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	f47f ae9d 	bne.w	800558c <HAL_GPIO_Init+0x10>
  }
}
 8005852:	bf00      	nop
 8005854:	bf00      	nop
 8005856:	371c      	adds	r7, #28
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	40021000 	.word	0x40021000
 8005864:	40010000 	.word	0x40010000
 8005868:	48000400 	.word	0x48000400
 800586c:	48000800 	.word	0x48000800
 8005870:	48000c00 	.word	0x48000c00
 8005874:	48001000 	.word	0x48001000
 8005878:	48001400 	.word	0x48001400
 800587c:	40010400 	.word	0x40010400

08005880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	460b      	mov	r3, r1
 800588a:	807b      	strh	r3, [r7, #2]
 800588c:	4613      	mov	r3, r2
 800588e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005890:	787b      	ldrb	r3, [r7, #1]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005896:	887a      	ldrh	r2, [r7, #2]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800589c:	e002      	b.n	80058a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800589e:	887a      	ldrh	r2, [r7, #2]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4603      	mov	r3, r0
 80058b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80058ba:	4b08      	ldr	r3, [pc, #32]	@ (80058dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058bc:	695a      	ldr	r2, [r3, #20]
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	4013      	ands	r3, r2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d006      	beq.n	80058d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80058c6:	4a05      	ldr	r2, [pc, #20]	@ (80058dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058c8:	88fb      	ldrh	r3, [r7, #6]
 80058ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80058cc:	88fb      	ldrh	r3, [r7, #6]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 f806 	bl	80058e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80058d4:	bf00      	nop
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40010400 	.word	0x40010400

080058e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	4603      	mov	r3, r0
 80058e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80058ea:	bf00      	nop
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e08d      	b.n	8005a24 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d106      	bne.n	8005922 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7fd f983 	bl	8002c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2224      	movs	r2, #36	@ 0x24
 8005926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 0201 	bic.w	r2, r2, #1
 8005938:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005946:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005956:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d107      	bne.n	8005970 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800596c:	609a      	str	r2, [r3, #8]
 800596e:	e006      	b.n	800597e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800597c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	2b02      	cmp	r3, #2
 8005984:	d108      	bne.n	8005998 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005994:	605a      	str	r2, [r3, #4]
 8005996:	e007      	b.n	80059a8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6812      	ldr	r2, [r2, #0]
 80059b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80059b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059ba:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059ca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69d9      	ldr	r1, [r3, #28]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1a      	ldr	r2, [r3, #32]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f042 0201 	orr.w	r2, r2, #1
 8005a04:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d005      	beq.n	8005a58 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	68f9      	ldr	r1, [r7, #12]
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	4798      	blx	r3
  }
}
 8005a58:	bf00      	nop
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00f      	beq.n	8005aa2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00a      	beq.n	8005aa2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a90:	f043 0201 	orr.w	r2, r3, #1
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005aa0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00f      	beq.n	8005acc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aba:	f043 0208 	orr.w	r2, r3, #8
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005aca:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00f      	beq.n	8005af6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00a      	beq.n	8005af6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ae4:	f043 0202 	orr.w	r2, r3, #2
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005af4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f003 030b 	and.w	r3, r3, #11
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005b06:	68f9      	ldr	r1, [r7, #12]
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fbd5 	bl	80062b8 <I2C_ITError>
  }
}
 8005b0e:	bf00      	nop
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005b1e:	bf00      	nop
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	460b      	mov	r3, r1
 8005b48:	70fb      	strb	r3, [r7, #3]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005b8a:	bf00      	nop
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b086      	sub	sp, #24
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d101      	bne.n	8005bba <I2C_Slave_ISR_IT+0x24>
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	e0e2      	b.n	8005d80 <I2C_Slave_ISR_IT+0x1ea>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f003 0320 	and.w	r3, r3, #32
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d009      	beq.n	8005be0 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d004      	beq.n	8005be0 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005bd6:	6939      	ldr	r1, [r7, #16]
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f000 f9b5 	bl	8005f48 <I2C_ITSlaveCplt>
 8005bde:	e0ca      	b.n	8005d76 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f003 0310 	and.w	r3, r3, #16
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d04b      	beq.n	8005c82 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d046      	beq.n	8005c82 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d128      	bne.n	8005c50 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b28      	cmp	r3, #40	@ 0x28
 8005c08:	d108      	bne.n	8005c1c <I2C_Slave_ISR_IT+0x86>
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c10:	d104      	bne.n	8005c1c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005c12:	6939      	ldr	r1, [r7, #16]
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 fafb 	bl	8006210 <I2C_ITListenCplt>
 8005c1a:	e031      	b.n	8005c80 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b29      	cmp	r3, #41	@ 0x29
 8005c26:	d10e      	bne.n	8005c46 <I2C_Slave_ISR_IT+0xb0>
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005c2e:	d00a      	beq.n	8005c46 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2210      	movs	r2, #16
 8005c36:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 fc54 	bl	80064e6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 f926 	bl	8005e90 <I2C_ITSlaveSeqCplt>
 8005c44:	e01c      	b.n	8005c80 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2210      	movs	r2, #16
 8005c4c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005c4e:	e08f      	b.n	8005d70 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2210      	movs	r2, #16
 8005c56:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c5c:	f043 0204 	orr.w	r2, r3, #4
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <I2C_Slave_ISR_IT+0xdc>
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c70:	d17e      	bne.n	8005d70 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c76:	4619      	mov	r1, r3
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 fb1d 	bl	80062b8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005c7e:	e077      	b.n	8005d70 <I2C_Slave_ISR_IT+0x1da>
 8005c80:	e076      	b.n	8005d70 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d02f      	beq.n	8005cec <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d02a      	beq.n	8005cec <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d018      	beq.n	8005cd2 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d14b      	bne.n	8005d74 <I2C_Slave_ISR_IT+0x1de>
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005ce2:	d047      	beq.n	8005d74 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 f8d3 	bl	8005e90 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005cea:	e043      	b.n	8005d74 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	f003 0308 	and.w	r3, r3, #8
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d009      	beq.n	8005d0a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d004      	beq.n	8005d0a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005d00:	6939      	ldr	r1, [r7, #16]
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 f840 	bl	8005d88 <I2C_ITAddrCplt>
 8005d08:	e035      	b.n	8005d76 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d030      	beq.n	8005d76 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d02b      	beq.n	8005d76 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d018      	beq.n	8005d5a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2c:	781a      	ldrb	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d38:	1c5a      	adds	r2, r3, #1
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	3b01      	subs	r3, #1
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d50:	3b01      	subs	r3, #1
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005d58:	e00d      	b.n	8005d76 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d60:	d002      	beq.n	8005d68 <I2C_Slave_ISR_IT+0x1d2>
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d106      	bne.n	8005d76 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 f891 	bl	8005e90 <I2C_ITSlaveSeqCplt>
 8005d6e:	e002      	b.n	8005d76 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8005d70:	bf00      	nop
 8005d72:	e000      	b.n	8005d76 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8005d74:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3718      	adds	r7, #24
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005d9e:	2b28      	cmp	r3, #40	@ 0x28
 8005da0:	d16a      	bne.n	8005e78 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	0c1b      	lsrs	r3, r3, #16
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	0c1b      	lsrs	r3, r3, #16
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005dc0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dce:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005ddc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d138      	bne.n	8005e58 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005de6:	897b      	ldrh	r3, [r7, #10]
 8005de8:	09db      	lsrs	r3, r3, #7
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	89bb      	ldrh	r3, [r7, #12]
 8005dee:	4053      	eors	r3, r2
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	f003 0306 	and.w	r3, r3, #6
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d11c      	bne.n	8005e34 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005dfa:	897b      	ldrh	r3, [r7, #10]
 8005dfc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d13b      	bne.n	8005e88 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2208      	movs	r2, #8
 8005e1c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005e26:	89ba      	ldrh	r2, [r7, #12]
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7ff fe86 	bl	8005b3e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005e32:	e029      	b.n	8005e88 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005e34:	893b      	ldrh	r3, [r7, #8]
 8005e36:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005e38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 fb94 	bl	800656a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005e4a:	89ba      	ldrh	r2, [r7, #12]
 8005e4c:	7bfb      	ldrb	r3, [r7, #15]
 8005e4e:	4619      	mov	r1, r3
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7ff fe74 	bl	8005b3e <HAL_I2C_AddrCallback>
}
 8005e56:	e017      	b.n	8005e88 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005e58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fb84 	bl	800656a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005e6a:	89ba      	ldrh	r2, [r7, #12]
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7ff fe64 	bl	8005b3e <HAL_I2C_AddrCallback>
}
 8005e76:	e007      	b.n	8005e88 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2208      	movs	r2, #8
 8005e7e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005e88:	bf00      	nop
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d008      	beq.n	8005ec4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	e00c      	b.n	8005ede <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d007      	beq.n	8005ede <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005edc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b29      	cmp	r3, #41	@ 0x29
 8005ee8:	d112      	bne.n	8005f10 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2228      	movs	r2, #40	@ 0x28
 8005eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2221      	movs	r2, #33	@ 0x21
 8005ef6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005ef8:	2101      	movs	r1, #1
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fb35 	bl	800656a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7ff fe04 	bl	8005b16 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005f0e:	e017      	b.n	8005f40 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f1a:	d111      	bne.n	8005f40 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2228      	movs	r2, #40	@ 0x28
 8005f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2222      	movs	r2, #34	@ 0x22
 8005f28:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005f2a:	2102      	movs	r1, #2
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 fb1c 	bl	800656a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7ff fdf5 	bl	8005b2a <HAL_I2C_SlaveRxCpltCallback>
}
 8005f40:	bf00      	nop
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f62:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f6a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2220      	movs	r2, #32
 8005f72:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005f74:	7afb      	ldrb	r3, [r7, #11]
 8005f76:	2b21      	cmp	r3, #33	@ 0x21
 8005f78:	d002      	beq.n	8005f80 <I2C_ITSlaveCplt+0x38>
 8005f7a:	7afb      	ldrb	r3, [r7, #11]
 8005f7c:	2b29      	cmp	r3, #41	@ 0x29
 8005f7e:	d108      	bne.n	8005f92 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005f80:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 faf0 	bl	800656a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2221      	movs	r2, #33	@ 0x21
 8005f8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f90:	e019      	b.n	8005fc6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005f92:	7afb      	ldrb	r3, [r7, #11]
 8005f94:	2b22      	cmp	r3, #34	@ 0x22
 8005f96:	d002      	beq.n	8005f9e <I2C_ITSlaveCplt+0x56>
 8005f98:	7afb      	ldrb	r3, [r7, #11]
 8005f9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f9c:	d108      	bne.n	8005fb0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005f9e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fae1 	bl	800656a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2222      	movs	r2, #34	@ 0x22
 8005fac:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fae:	e00a      	b.n	8005fc6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005fb0:	7afb      	ldrb	r3, [r7, #11]
 8005fb2:	2b28      	cmp	r3, #40	@ 0x28
 8005fb4:	d107      	bne.n	8005fc6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005fb6:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fad5 	bl	800656a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fd4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6859      	ldr	r1, [r3, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	4b89      	ldr	r3, [pc, #548]	@ (8006208 <I2C_ITSlaveCplt+0x2c0>)
 8005fe2:	400b      	ands	r3, r1
 8005fe4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fa7d 	bl	80064e6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d013      	beq.n	800601e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006004:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800600a:	2b00      	cmp	r3, #0
 800600c:	d01f      	beq.n	800604e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	b29a      	uxth	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800601c:	e017      	b.n	800604e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d012      	beq.n	800604e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006036:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800603c:	2b00      	cmp	r3, #0
 800603e:	d006      	beq.n	800604e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	b29a      	uxth	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f003 0304 	and.w	r3, r3, #4
 8006054:	2b00      	cmp	r3, #0
 8006056:	d020      	beq.n	800609a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f023 0304 	bic.w	r3, r3, #4
 800605e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00c      	beq.n	800609a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006084:	3b01      	subs	r3, #1
 8006086:	b29a      	uxth	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006090:	b29b      	uxth	r3, r3
 8006092:	3b01      	subs	r3, #1
 8006094:	b29a      	uxth	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800609e:	b29b      	uxth	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d005      	beq.n	80060b0 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a8:	f043 0204 	orr.w	r2, r3, #4
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f003 0310 	and.w	r3, r3, #16
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d049      	beq.n	800614e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d044      	beq.n	800614e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d128      	bne.n	8006120 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b28      	cmp	r3, #40	@ 0x28
 80060d8:	d108      	bne.n	80060ec <I2C_ITSlaveCplt+0x1a4>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060e0:	d104      	bne.n	80060ec <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80060e2:	6979      	ldr	r1, [r7, #20]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f893 	bl	8006210 <I2C_ITListenCplt>
 80060ea:	e030      	b.n	800614e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b29      	cmp	r3, #41	@ 0x29
 80060f6:	d10e      	bne.n	8006116 <I2C_ITSlaveCplt+0x1ce>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80060fe:	d00a      	beq.n	8006116 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2210      	movs	r2, #16
 8006106:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f9ec 	bl	80064e6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7ff febe 	bl	8005e90 <I2C_ITSlaveSeqCplt>
 8006114:	e01b      	b.n	800614e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2210      	movs	r2, #16
 800611c:	61da      	str	r2, [r3, #28]
 800611e:	e016      	b.n	800614e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2210      	movs	r2, #16
 8006126:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800612c:	f043 0204 	orr.w	r2, r3, #4
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <I2C_ITSlaveCplt+0x1fa>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006140:	d105      	bne.n	800614e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006146:	4619      	mov	r1, r3
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 f8b5 	bl	80062b8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006160:	2b00      	cmp	r3, #0
 8006162:	d010      	beq.n	8006186 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f8a4 	bl	80062b8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b28      	cmp	r3, #40	@ 0x28
 800617a:	d141      	bne.n	8006200 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800617c:	6979      	ldr	r1, [r7, #20]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f846 	bl	8006210 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006184:	e03c      	b.n	8006200 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800618e:	d014      	beq.n	80061ba <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7ff fe7d 	bl	8005e90 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a1c      	ldr	r2, [pc, #112]	@ (800620c <I2C_ITSlaveCplt+0x2c4>)
 800619a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2220      	movs	r2, #32
 80061a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff fcd1 	bl	8005b5a <HAL_I2C_ListenCpltCallback>
}
 80061b8:	e022      	b.n	8006200 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b22      	cmp	r3, #34	@ 0x22
 80061c4:	d10e      	bne.n	80061e4 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7ff fca4 	bl	8005b2a <HAL_I2C_SlaveRxCpltCallback>
}
 80061e2:	e00d      	b.n	8006200 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7ff fc8b 	bl	8005b16 <HAL_I2C_SlaveTxCpltCallback>
}
 8006200:	bf00      	nop
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	fe00e800 	.word	0xfe00e800
 800620c:	ffff0000 	.word	0xffff0000

08006210 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a25      	ldr	r2, [pc, #148]	@ (80062b4 <I2C_ITListenCplt+0xa4>)
 800621e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2220      	movs	r2, #32
 800622a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	f003 0304 	and.w	r3, r3, #4
 8006242:	2b00      	cmp	r3, #0
 8006244:	d022      	beq.n	800628c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006250:	b2d2      	uxtb	r2, r2
 8006252:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006258:	1c5a      	adds	r2, r3, #1
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006262:	2b00      	cmp	r3, #0
 8006264:	d012      	beq.n	800628c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800626a:	3b01      	subs	r3, #1
 800626c:	b29a      	uxth	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006276:	b29b      	uxth	r3, r3
 8006278:	3b01      	subs	r3, #1
 800627a:	b29a      	uxth	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006284:	f043 0204 	orr.w	r2, r3, #4
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800628c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 f96a 	bl	800656a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2210      	movs	r2, #16
 800629c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7ff fc57 	bl	8005b5a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80062ac:	bf00      	nop
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	ffff0000 	.word	0xffff0000

080062b8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062c8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a6d      	ldr	r2, [pc, #436]	@ (800648c <I2C_ITError+0x1d4>)
 80062d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	431a      	orrs	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	2b28      	cmp	r3, #40	@ 0x28
 80062ee:	d005      	beq.n	80062fc <I2C_ITError+0x44>
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
 80062f2:	2b29      	cmp	r3, #41	@ 0x29
 80062f4:	d002      	beq.n	80062fc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
 80062f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80062fa:	d10b      	bne.n	8006314 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80062fc:	2103      	movs	r1, #3
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f933 	bl	800656a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2228      	movs	r2, #40	@ 0x28
 8006308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a60      	ldr	r2, [pc, #384]	@ (8006490 <I2C_ITError+0x1d8>)
 8006310:	635a      	str	r2, [r3, #52]	@ 0x34
 8006312:	e030      	b.n	8006376 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006314:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f926 	bl	800656a <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f8e1 	bl	80064e6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b60      	cmp	r3, #96	@ 0x60
 800632e:	d01f      	beq.n	8006370 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2220      	movs	r2, #32
 8006334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	f003 0320 	and.w	r3, r3, #32
 8006342:	2b20      	cmp	r3, #32
 8006344:	d114      	bne.n	8006370 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	f003 0310 	and.w	r3, r3, #16
 8006350:	2b10      	cmp	r3, #16
 8006352:	d109      	bne.n	8006368 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2210      	movs	r2, #16
 800635a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006360:	f043 0204 	orr.w	r2, r3, #4
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2220      	movs	r2, #32
 800636e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800637a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006380:	2b00      	cmp	r3, #0
 8006382:	d039      	beq.n	80063f8 <I2C_ITError+0x140>
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2b11      	cmp	r3, #17
 8006388:	d002      	beq.n	8006390 <I2C_ITError+0xd8>
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	2b21      	cmp	r3, #33	@ 0x21
 800638e:	d133      	bne.n	80063f8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800639a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800639e:	d107      	bne.n	80063b0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80063ae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff f833 	bl	8005420 <HAL_DMA_GetState>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d017      	beq.n	80063f0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c4:	4a33      	ldr	r2, [pc, #204]	@ (8006494 <I2C_ITError+0x1dc>)
 80063c6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fe ff0d 	bl	80051f4 <HAL_DMA_Abort_IT>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d04d      	beq.n	800647c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80063ea:	4610      	mov	r0, r2
 80063ec:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80063ee:	e045      	b.n	800647c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f851 	bl	8006498 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80063f6:	e041      	b.n	800647c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d039      	beq.n	8006474 <I2C_ITError+0x1bc>
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	2b12      	cmp	r3, #18
 8006404:	d002      	beq.n	800640c <I2C_ITError+0x154>
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2b22      	cmp	r3, #34	@ 0x22
 800640a:	d133      	bne.n	8006474 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006416:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800641a:	d107      	bne.n	800642c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800642a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006430:	4618      	mov	r0, r3
 8006432:	f7fe fff5 	bl	8005420 <HAL_DMA_GetState>
 8006436:	4603      	mov	r3, r0
 8006438:	2b01      	cmp	r3, #1
 800643a:	d017      	beq.n	800646c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006440:	4a14      	ldr	r2, [pc, #80]	@ (8006494 <I2C_ITError+0x1dc>)
 8006442:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006450:	4618      	mov	r0, r3
 8006452:	f7fe fecf 	bl	80051f4 <HAL_DMA_Abort_IT>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d011      	beq.n	8006480 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006466:	4610      	mov	r0, r2
 8006468:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800646a:	e009      	b.n	8006480 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f813 	bl	8006498 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006472:	e005      	b.n	8006480 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f80f 	bl	8006498 <I2C_TreatErrorCallback>
  }
}
 800647a:	e002      	b.n	8006482 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800647c:	bf00      	nop
 800647e:	e000      	b.n	8006482 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006480:	bf00      	nop
}
 8006482:	bf00      	nop
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	ffff0000 	.word	0xffff0000
 8006490:	08005b97 	.word	0x08005b97
 8006494:	0800652f 	.word	0x0800652f

08006498 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b60      	cmp	r3, #96	@ 0x60
 80064aa:	d10e      	bne.n	80064ca <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2220      	movs	r2, #32
 80064b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff fb5d 	bl	8005b82 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80064c8:	e009      	b.n	80064de <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff fb48 	bl	8005b6e <HAL_I2C_ErrorCallback>
}
 80064de:	bf00      	nop
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b083      	sub	sp, #12
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	f003 0302 	and.w	r3, r3, #2
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d103      	bne.n	8006504 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2200      	movs	r2, #0
 8006502:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b01      	cmp	r3, #1
 8006510:	d007      	beq.n	8006522 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	699a      	ldr	r2, [r3, #24]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f042 0201 	orr.w	r2, r2, #1
 8006520:	619a      	str	r2, [r3, #24]
  }
}
 8006522:	bf00      	nop
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b084      	sub	sp, #16
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800653a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006540:	2b00      	cmp	r3, #0
 8006542:	d003      	beq.n	800654c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006548:	2200      	movs	r2, #0
 800654a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006558:	2200      	movs	r2, #0
 800655a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f7ff ff9b 	bl	8006498 <I2C_TreatErrorCallback>
}
 8006562:	bf00      	nop
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800656a:	b480      	push	{r7}
 800656c:	b085      	sub	sp, #20
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	460b      	mov	r3, r1
 8006574:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800657a:	887b      	ldrh	r3, [r7, #2]
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00f      	beq.n	80065a4 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800658a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006592:	b2db      	uxtb	r3, r3
 8006594:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006598:	2b28      	cmp	r3, #40	@ 0x28
 800659a:	d003      	beq.n	80065a4 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80065a2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80065a4:	887b      	ldrh	r3, [r7, #2]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00f      	beq.n	80065ce <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80065b4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80065c2:	2b28      	cmp	r3, #40	@ 0x28
 80065c4:	d003      	beq.n	80065ce <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80065cc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80065ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	da03      	bge.n	80065de <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80065dc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80065de:	887b      	ldrh	r3, [r7, #2]
 80065e0:	2b10      	cmp	r3, #16
 80065e2:	d103      	bne.n	80065ec <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80065ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80065ec:	887b      	ldrh	r3, [r7, #2]
 80065ee:	2b20      	cmp	r3, #32
 80065f0:	d103      	bne.n	80065fa <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f043 0320 	orr.w	r3, r3, #32
 80065f8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80065fa:	887b      	ldrh	r3, [r7, #2]
 80065fc:	2b40      	cmp	r3, #64	@ 0x40
 80065fe:	d103      	bne.n	8006608 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006606:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6819      	ldr	r1, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	43da      	mvns	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	400a      	ands	r2, r1
 8006618:	601a      	str	r2, [r3, #0]
}
 800661a:	bf00      	nop
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006626:	b480      	push	{r7}
 8006628:	b083      	sub	sp, #12
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b20      	cmp	r3, #32
 800663a:	d138      	bne.n	80066ae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006642:	2b01      	cmp	r3, #1
 8006644:	d101      	bne.n	800664a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006646:	2302      	movs	r3, #2
 8006648:	e032      	b.n	80066b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2224      	movs	r2, #36	@ 0x24
 8006656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0201 	bic.w	r2, r2, #1
 8006668:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006678:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6819      	ldr	r1, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f042 0201 	orr.w	r2, r2, #1
 8006698:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2220      	movs	r2, #32
 800669e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	e000      	b.n	80066b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066ae:	2302      	movs	r3, #2
  }
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b20      	cmp	r3, #32
 80066d0:	d139      	bne.n	8006746 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d101      	bne.n	80066e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80066dc:	2302      	movs	r3, #2
 80066de:	e033      	b.n	8006748 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2224      	movs	r2, #36	@ 0x24
 80066ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0201 	bic.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800670e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	021b      	lsls	r3, r3, #8
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f042 0201 	orr.w	r2, r2, #1
 8006730:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2220      	movs	r2, #32
 8006736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	e000      	b.n	8006748 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006746:	2302      	movs	r3, #2
  }
}
 8006748:	4618      	mov	r0, r3
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d141      	bne.n	80067e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006762:	4b4b      	ldr	r3, [pc, #300]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800676a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800676e:	d131      	bne.n	80067d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006770:	4b47      	ldr	r3, [pc, #284]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006776:	4a46      	ldr	r2, [pc, #280]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006778:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800677c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006780:	4b43      	ldr	r3, [pc, #268]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006788:	4a41      	ldr	r2, [pc, #260]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800678a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800678e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006790:	4b40      	ldr	r3, [pc, #256]	@ (8006894 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2232      	movs	r2, #50	@ 0x32
 8006796:	fb02 f303 	mul.w	r3, r2, r3
 800679a:	4a3f      	ldr	r2, [pc, #252]	@ (8006898 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800679c:	fba2 2303 	umull	r2, r3, r2, r3
 80067a0:	0c9b      	lsrs	r3, r3, #18
 80067a2:	3301      	adds	r3, #1
 80067a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067a6:	e002      	b.n	80067ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067ae:	4b38      	ldr	r3, [pc, #224]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067ba:	d102      	bne.n	80067c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1f2      	bne.n	80067a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067c2:	4b33      	ldr	r3, [pc, #204]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067ce:	d158      	bne.n	8006882 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e057      	b.n	8006884 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067d4:	4b2e      	ldr	r3, [pc, #184]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067da:	4a2d      	ldr	r2, [pc, #180]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80067e4:	e04d      	b.n	8006882 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067ec:	d141      	bne.n	8006872 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80067ee:	4b28      	ldr	r3, [pc, #160]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80067f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067fa:	d131      	bne.n	8006860 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067fc:	4b24      	ldr	r3, [pc, #144]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006802:	4a23      	ldr	r2, [pc, #140]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006808:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800680c:	4b20      	ldr	r3, [pc, #128]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006814:	4a1e      	ldr	r2, [pc, #120]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006816:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800681a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800681c:	4b1d      	ldr	r3, [pc, #116]	@ (8006894 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2232      	movs	r2, #50	@ 0x32
 8006822:	fb02 f303 	mul.w	r3, r2, r3
 8006826:	4a1c      	ldr	r2, [pc, #112]	@ (8006898 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006828:	fba2 2303 	umull	r2, r3, r2, r3
 800682c:	0c9b      	lsrs	r3, r3, #18
 800682e:	3301      	adds	r3, #1
 8006830:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006832:	e002      	b.n	800683a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3b01      	subs	r3, #1
 8006838:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800683a:	4b15      	ldr	r3, [pc, #84]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006842:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006846:	d102      	bne.n	800684e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1f2      	bne.n	8006834 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800684e:	4b10      	ldr	r3, [pc, #64]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006856:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800685a:	d112      	bne.n	8006882 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e011      	b.n	8006884 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006860:	4b0b      	ldr	r3, [pc, #44]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006866:	4a0a      	ldr	r2, [pc, #40]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006868:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800686c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006870:	e007      	b.n	8006882 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006872:	4b07      	ldr	r3, [pc, #28]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800687a:	4a05      	ldr	r2, [pc, #20]	@ (8006890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800687c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006880:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	40007000 	.word	0x40007000
 8006894:	2000002c 	.word	0x2000002c
 8006898:	431bde83 	.word	0x431bde83

0800689c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800689c:	b480      	push	{r7}
 800689e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80068a0:	4b05      	ldr	r3, [pc, #20]	@ (80068b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	4a04      	ldr	r2, [pc, #16]	@ (80068b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80068a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80068aa:	6093      	str	r3, [r2, #8]
}
 80068ac:	bf00      	nop
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	40007000 	.word	0x40007000

080068bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e2fe      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d075      	beq.n	80069c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068da:	4b97      	ldr	r3, [pc, #604]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f003 030c 	and.w	r3, r3, #12
 80068e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068e4:	4b94      	ldr	r3, [pc, #592]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f003 0303 	and.w	r3, r3, #3
 80068ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	2b0c      	cmp	r3, #12
 80068f2:	d102      	bne.n	80068fa <HAL_RCC_OscConfig+0x3e>
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	d002      	beq.n	8006900 <HAL_RCC_OscConfig+0x44>
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	2b08      	cmp	r3, #8
 80068fe:	d10b      	bne.n	8006918 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006900:	4b8d      	ldr	r3, [pc, #564]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d05b      	beq.n	80069c4 <HAL_RCC_OscConfig+0x108>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d157      	bne.n	80069c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e2d9      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006920:	d106      	bne.n	8006930 <HAL_RCC_OscConfig+0x74>
 8006922:	4b85      	ldr	r3, [pc, #532]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a84      	ldr	r2, [pc, #528]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800692c:	6013      	str	r3, [r2, #0]
 800692e:	e01d      	b.n	800696c <HAL_RCC_OscConfig+0xb0>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006938:	d10c      	bne.n	8006954 <HAL_RCC_OscConfig+0x98>
 800693a:	4b7f      	ldr	r3, [pc, #508]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a7e      	ldr	r2, [pc, #504]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006940:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	4b7c      	ldr	r3, [pc, #496]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a7b      	ldr	r2, [pc, #492]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 800694c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	e00b      	b.n	800696c <HAL_RCC_OscConfig+0xb0>
 8006954:	4b78      	ldr	r3, [pc, #480]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a77      	ldr	r2, [pc, #476]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 800695a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	4b75      	ldr	r3, [pc, #468]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a74      	ldr	r2, [pc, #464]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800696a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d013      	beq.n	800699c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006974:	f7fc fd2e 	bl	80033d4 <HAL_GetTick>
 8006978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800697a:	e008      	b.n	800698e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800697c:	f7fc fd2a 	bl	80033d4 <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	2b64      	cmp	r3, #100	@ 0x64
 8006988:	d901      	bls.n	800698e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e29e      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800698e:	4b6a      	ldr	r3, [pc, #424]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d0f0      	beq.n	800697c <HAL_RCC_OscConfig+0xc0>
 800699a:	e014      	b.n	80069c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699c:	f7fc fd1a 	bl	80033d4 <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069a4:	f7fc fd16 	bl	80033d4 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b64      	cmp	r3, #100	@ 0x64
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e28a      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069b6:	4b60      	ldr	r3, [pc, #384]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1f0      	bne.n	80069a4 <HAL_RCC_OscConfig+0xe8>
 80069c2:	e000      	b.n	80069c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d075      	beq.n	8006abe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069d2:	4b59      	ldr	r3, [pc, #356]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f003 030c 	and.w	r3, r3, #12
 80069da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069dc:	4b56      	ldr	r3, [pc, #344]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f003 0303 	and.w	r3, r3, #3
 80069e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	2b0c      	cmp	r3, #12
 80069ea:	d102      	bne.n	80069f2 <HAL_RCC_OscConfig+0x136>
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d002      	beq.n	80069f8 <HAL_RCC_OscConfig+0x13c>
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	2b04      	cmp	r3, #4
 80069f6:	d11f      	bne.n	8006a38 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069f8:	4b4f      	ldr	r3, [pc, #316]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d005      	beq.n	8006a10 <HAL_RCC_OscConfig+0x154>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e25d      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a10:	4b49      	ldr	r3, [pc, #292]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	061b      	lsls	r3, r3, #24
 8006a1e:	4946      	ldr	r1, [pc, #280]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a24:	4b45      	ldr	r3, [pc, #276]	@ (8006b3c <HAL_RCC_OscConfig+0x280>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7fc fc87 	bl	800333c <HAL_InitTick>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d043      	beq.n	8006abc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e249      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d023      	beq.n	8006a88 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a40:	4b3d      	ldr	r3, [pc, #244]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a3c      	ldr	r2, [pc, #240]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a4c:	f7fc fcc2 	bl	80033d4 <HAL_GetTick>
 8006a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a54:	f7fc fcbe 	bl	80033d4 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e232      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a66:	4b34      	ldr	r3, [pc, #208]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d0f0      	beq.n	8006a54 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a72:	4b31      	ldr	r3, [pc, #196]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	061b      	lsls	r3, r3, #24
 8006a80:	492d      	ldr	r1, [pc, #180]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	604b      	str	r3, [r1, #4]
 8006a86:	e01a      	b.n	8006abe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a88:	4b2b      	ldr	r3, [pc, #172]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a2a      	ldr	r2, [pc, #168]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006a8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a94:	f7fc fc9e 	bl	80033d4 <HAL_GetTick>
 8006a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a9a:	e008      	b.n	8006aae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a9c:	f7fc fc9a 	bl	80033d4 <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d901      	bls.n	8006aae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e20e      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006aae:	4b22      	ldr	r3, [pc, #136]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1f0      	bne.n	8006a9c <HAL_RCC_OscConfig+0x1e0>
 8006aba:	e000      	b.n	8006abe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006abc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0308 	and.w	r3, r3, #8
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d041      	beq.n	8006b4e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d01c      	beq.n	8006b0c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ad2:	4b19      	ldr	r3, [pc, #100]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ad8:	4a17      	ldr	r2, [pc, #92]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006ada:	f043 0301 	orr.w	r3, r3, #1
 8006ade:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ae2:	f7fc fc77 	bl	80033d4 <HAL_GetTick>
 8006ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ae8:	e008      	b.n	8006afc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006aea:	f7fc fc73 	bl	80033d4 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d901      	bls.n	8006afc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e1e7      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006afc:	4b0e      	ldr	r3, [pc, #56]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d0ef      	beq.n	8006aea <HAL_RCC_OscConfig+0x22e>
 8006b0a:	e020      	b.n	8006b4e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b12:	4a09      	ldr	r2, [pc, #36]	@ (8006b38 <HAL_RCC_OscConfig+0x27c>)
 8006b14:	f023 0301 	bic.w	r3, r3, #1
 8006b18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b1c:	f7fc fc5a 	bl	80033d4 <HAL_GetTick>
 8006b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b22:	e00d      	b.n	8006b40 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b24:	f7fc fc56 	bl	80033d4 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d906      	bls.n	8006b40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e1ca      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
 8006b36:	bf00      	nop
 8006b38:	40021000 	.word	0x40021000
 8006b3c:	20000030 	.word	0x20000030
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b40:	4b8c      	ldr	r3, [pc, #560]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1ea      	bne.n	8006b24 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0304 	and.w	r3, r3, #4
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 80a6 	beq.w	8006ca8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006b60:	4b84      	ldr	r3, [pc, #528]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <HAL_RCC_OscConfig+0x2b4>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e000      	b.n	8006b72 <HAL_RCC_OscConfig+0x2b6>
 8006b70:	2300      	movs	r3, #0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00d      	beq.n	8006b92 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b76:	4b7f      	ldr	r3, [pc, #508]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b7a:	4a7e      	ldr	r2, [pc, #504]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b80:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b82:	4b7c      	ldr	r3, [pc, #496]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b8a:	60fb      	str	r3, [r7, #12]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b92:	4b79      	ldr	r3, [pc, #484]	@ (8006d78 <HAL_RCC_OscConfig+0x4bc>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d118      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b9e:	4b76      	ldr	r3, [pc, #472]	@ (8006d78 <HAL_RCC_OscConfig+0x4bc>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a75      	ldr	r2, [pc, #468]	@ (8006d78 <HAL_RCC_OscConfig+0x4bc>)
 8006ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006baa:	f7fc fc13 	bl	80033d4 <HAL_GetTick>
 8006bae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bb0:	e008      	b.n	8006bc4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bb2:	f7fc fc0f 	bl	80033d4 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d901      	bls.n	8006bc4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e183      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bc4:	4b6c      	ldr	r3, [pc, #432]	@ (8006d78 <HAL_RCC_OscConfig+0x4bc>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d0f0      	beq.n	8006bb2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d108      	bne.n	8006bea <HAL_RCC_OscConfig+0x32e>
 8006bd8:	4b66      	ldr	r3, [pc, #408]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bde:	4a65      	ldr	r2, [pc, #404]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006be0:	f043 0301 	orr.w	r3, r3, #1
 8006be4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006be8:	e024      	b.n	8006c34 <HAL_RCC_OscConfig+0x378>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	2b05      	cmp	r3, #5
 8006bf0:	d110      	bne.n	8006c14 <HAL_RCC_OscConfig+0x358>
 8006bf2:	4b60      	ldr	r3, [pc, #384]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bf8:	4a5e      	ldr	r2, [pc, #376]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006bfa:	f043 0304 	orr.w	r3, r3, #4
 8006bfe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c02:	4b5c      	ldr	r3, [pc, #368]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c08:	4a5a      	ldr	r2, [pc, #360]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006c0a:	f043 0301 	orr.w	r3, r3, #1
 8006c0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c12:	e00f      	b.n	8006c34 <HAL_RCC_OscConfig+0x378>
 8006c14:	4b57      	ldr	r3, [pc, #348]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c1a:	4a56      	ldr	r2, [pc, #344]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006c1c:	f023 0301 	bic.w	r3, r3, #1
 8006c20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c24:	4b53      	ldr	r3, [pc, #332]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c2a:	4a52      	ldr	r2, [pc, #328]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006c2c:	f023 0304 	bic.w	r3, r3, #4
 8006c30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d016      	beq.n	8006c6a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c3c:	f7fc fbca 	bl	80033d4 <HAL_GetTick>
 8006c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c42:	e00a      	b.n	8006c5a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c44:	f7fc fbc6 	bl	80033d4 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e138      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c5a:	4b46      	ldr	r3, [pc, #280]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c60:	f003 0302 	and.w	r3, r3, #2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d0ed      	beq.n	8006c44 <HAL_RCC_OscConfig+0x388>
 8006c68:	e015      	b.n	8006c96 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c6a:	f7fc fbb3 	bl	80033d4 <HAL_GetTick>
 8006c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c70:	e00a      	b.n	8006c88 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c72:	f7fc fbaf 	bl	80033d4 <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d901      	bls.n	8006c88 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	e121      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c88:	4b3a      	ldr	r3, [pc, #232]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1ed      	bne.n	8006c72 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c96:	7ffb      	ldrb	r3, [r7, #31]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d105      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c9c:	4b35      	ldr	r3, [pc, #212]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ca0:	4a34      	ldr	r2, [pc, #208]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006ca2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ca6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0320 	and.w	r3, r3, #32
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d03c      	beq.n	8006d2e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d01c      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cc2:	4a2c      	ldr	r2, [pc, #176]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006cc4:	f043 0301 	orr.w	r3, r3, #1
 8006cc8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ccc:	f7fc fb82 	bl	80033d4 <HAL_GetTick>
 8006cd0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006cd2:	e008      	b.n	8006ce6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cd4:	f7fc fb7e 	bl	80033d4 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e0f2      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006ce6:	4b23      	ldr	r3, [pc, #140]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006ce8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cec:	f003 0302 	and.w	r3, r3, #2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d0ef      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x418>
 8006cf4:	e01b      	b.n	8006d2e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006cf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006cfe:	f023 0301 	bic.w	r3, r3, #1
 8006d02:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d06:	f7fc fb65 	bl	80033d4 <HAL_GetTick>
 8006d0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d0c:	e008      	b.n	8006d20 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d0e:	f7fc fb61 	bl	80033d4 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d901      	bls.n	8006d20 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e0d5      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d20:	4b14      	ldr	r3, [pc, #80]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006d22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1ef      	bne.n	8006d0e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	69db      	ldr	r3, [r3, #28]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 80c9 	beq.w	8006eca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d38:	4b0e      	ldr	r3, [pc, #56]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f003 030c 	and.w	r3, r3, #12
 8006d40:	2b0c      	cmp	r3, #12
 8006d42:	f000 8083 	beq.w	8006e4c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d15e      	bne.n	8006e0c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d4e:	4b09      	ldr	r3, [pc, #36]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a08      	ldr	r2, [pc, #32]	@ (8006d74 <HAL_RCC_OscConfig+0x4b8>)
 8006d54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d5a:	f7fc fb3b 	bl	80033d4 <HAL_GetTick>
 8006d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d60:	e00c      	b.n	8006d7c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d62:	f7fc fb37 	bl	80033d4 <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d905      	bls.n	8006d7c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e0ab      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
 8006d74:	40021000 	.word	0x40021000
 8006d78:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d7c:	4b55      	ldr	r3, [pc, #340]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1ec      	bne.n	8006d62 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d88:	4b52      	ldr	r3, [pc, #328]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	4b52      	ldr	r3, [pc, #328]	@ (8006ed8 <HAL_RCC_OscConfig+0x61c>)
 8006d8e:	4013      	ands	r3, r2
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	6a11      	ldr	r1, [r2, #32]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006d98:	3a01      	subs	r2, #1
 8006d9a:	0112      	lsls	r2, r2, #4
 8006d9c:	4311      	orrs	r1, r2
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006da2:	0212      	lsls	r2, r2, #8
 8006da4:	4311      	orrs	r1, r2
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006daa:	0852      	lsrs	r2, r2, #1
 8006dac:	3a01      	subs	r2, #1
 8006dae:	0552      	lsls	r2, r2, #21
 8006db0:	4311      	orrs	r1, r2
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006db6:	0852      	lsrs	r2, r2, #1
 8006db8:	3a01      	subs	r2, #1
 8006dba:	0652      	lsls	r2, r2, #25
 8006dbc:	4311      	orrs	r1, r2
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006dc2:	06d2      	lsls	r2, r2, #27
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	4943      	ldr	r1, [pc, #268]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dcc:	4b41      	ldr	r3, [pc, #260]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a40      	ldr	r2, [pc, #256]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006dd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006dd6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006dd8:	4b3e      	ldr	r3, [pc, #248]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	4a3d      	ldr	r2, [pc, #244]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006dde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006de2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de4:	f7fc faf6 	bl	80033d4 <HAL_GetTick>
 8006de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dea:	e008      	b.n	8006dfe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dec:	f7fc faf2 	bl	80033d4 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e066      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dfe:	4b35      	ldr	r3, [pc, #212]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d0f0      	beq.n	8006dec <HAL_RCC_OscConfig+0x530>
 8006e0a:	e05e      	b.n	8006eca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e0c:	4b31      	ldr	r3, [pc, #196]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a30      	ldr	r2, [pc, #192]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006e12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e18:	f7fc fadc 	bl	80033d4 <HAL_GetTick>
 8006e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e1e:	e008      	b.n	8006e32 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e20:	f7fc fad8 	bl	80033d4 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e04c      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e32:	4b28      	ldr	r3, [pc, #160]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1f0      	bne.n	8006e20 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006e3e:	4b25      	ldr	r3, [pc, #148]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006e40:	68da      	ldr	r2, [r3, #12]
 8006e42:	4924      	ldr	r1, [pc, #144]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006e44:	4b25      	ldr	r3, [pc, #148]	@ (8006edc <HAL_RCC_OscConfig+0x620>)
 8006e46:	4013      	ands	r3, r2
 8006e48:	60cb      	str	r3, [r1, #12]
 8006e4a:	e03e      	b.n	8006eca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	69db      	ldr	r3, [r3, #28]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d101      	bne.n	8006e58 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e039      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006e58:	4b1e      	ldr	r3, [pc, #120]	@ (8006ed4 <HAL_RCC_OscConfig+0x618>)
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f003 0203 	and.w	r2, r3, #3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d12c      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e76:	3b01      	subs	r3, #1
 8006e78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d123      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e88:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d11b      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e98:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d113      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ea8:	085b      	lsrs	r3, r3, #1
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d109      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ebc:	085b      	lsrs	r3, r3, #1
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d001      	beq.n	8006eca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e000      	b.n	8006ecc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3720      	adds	r7, #32
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	40021000 	.word	0x40021000
 8006ed8:	019f800c 	.word	0x019f800c
 8006edc:	feeefffc 	.word	0xfeeefffc

08006ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006eea:	2300      	movs	r3, #0
 8006eec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e11e      	b.n	8007136 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ef8:	4b91      	ldr	r3, [pc, #580]	@ (8007140 <HAL_RCC_ClockConfig+0x260>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 030f 	and.w	r3, r3, #15
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d910      	bls.n	8006f28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f06:	4b8e      	ldr	r3, [pc, #568]	@ (8007140 <HAL_RCC_ClockConfig+0x260>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f023 020f 	bic.w	r2, r3, #15
 8006f0e:	498c      	ldr	r1, [pc, #560]	@ (8007140 <HAL_RCC_ClockConfig+0x260>)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f16:	4b8a      	ldr	r3, [pc, #552]	@ (8007140 <HAL_RCC_ClockConfig+0x260>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 030f 	and.w	r3, r3, #15
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d001      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e106      	b.n	8007136 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d073      	beq.n	800701c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	2b03      	cmp	r3, #3
 8006f3a:	d129      	bne.n	8006f90 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f3c:	4b81      	ldr	r3, [pc, #516]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e0f4      	b.n	8007136 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006f4c:	f000 f99e 	bl	800728c <RCC_GetSysClockFreqFromPLLSource>
 8006f50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	4a7c      	ldr	r2, [pc, #496]	@ (8007148 <HAL_RCC_ClockConfig+0x268>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d93f      	bls.n	8006fda <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f5a:	4b7a      	ldr	r3, [pc, #488]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d009      	beq.n	8006f7a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d033      	beq.n	8006fda <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d12f      	bne.n	8006fda <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006f7a:	4b72      	ldr	r3, [pc, #456]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f82:	4a70      	ldr	r2, [pc, #448]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8006f84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f88:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006f8a:	2380      	movs	r3, #128	@ 0x80
 8006f8c:	617b      	str	r3, [r7, #20]
 8006f8e:	e024      	b.n	8006fda <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d107      	bne.n	8006fa8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f98:	4b6a      	ldr	r3, [pc, #424]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d109      	bne.n	8006fb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e0c6      	b.n	8007136 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fa8:	4b66      	ldr	r3, [pc, #408]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e0be      	b.n	8007136 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006fb8:	f000 f8ce 	bl	8007158 <HAL_RCC_GetSysClockFreq>
 8006fbc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	4a61      	ldr	r2, [pc, #388]	@ (8007148 <HAL_RCC_ClockConfig+0x268>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d909      	bls.n	8006fda <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006fc6:	4b5f      	ldr	r3, [pc, #380]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fce:	4a5d      	ldr	r2, [pc, #372]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8006fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fd4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006fd6:	2380      	movs	r3, #128	@ 0x80
 8006fd8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006fda:	4b5a      	ldr	r3, [pc, #360]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f023 0203 	bic.w	r2, r3, #3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	4957      	ldr	r1, [pc, #348]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fec:	f7fc f9f2 	bl	80033d4 <HAL_GetTick>
 8006ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ff2:	e00a      	b.n	800700a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ff4:	f7fc f9ee 	bl	80033d4 <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007002:	4293      	cmp	r3, r2
 8007004:	d901      	bls.n	800700a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e095      	b.n	8007136 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800700a:	4b4e      	ldr	r3, [pc, #312]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f003 020c 	and.w	r2, r3, #12
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	429a      	cmp	r2, r3
 800701a:	d1eb      	bne.n	8006ff4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0302 	and.w	r3, r3, #2
 8007024:	2b00      	cmp	r3, #0
 8007026:	d023      	beq.n	8007070 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0304 	and.w	r3, r3, #4
 8007030:	2b00      	cmp	r3, #0
 8007032:	d005      	beq.n	8007040 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007034:	4b43      	ldr	r3, [pc, #268]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	4a42      	ldr	r2, [pc, #264]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 800703a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800703e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0308 	and.w	r3, r3, #8
 8007048:	2b00      	cmp	r3, #0
 800704a:	d007      	beq.n	800705c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800704c:	4b3d      	ldr	r3, [pc, #244]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007054:	4a3b      	ldr	r2, [pc, #236]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8007056:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800705a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800705c:	4b39      	ldr	r3, [pc, #228]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	4936      	ldr	r1, [pc, #216]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 800706a:	4313      	orrs	r3, r2
 800706c:	608b      	str	r3, [r1, #8]
 800706e:	e008      	b.n	8007082 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	2b80      	cmp	r3, #128	@ 0x80
 8007074:	d105      	bne.n	8007082 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007076:	4b33      	ldr	r3, [pc, #204]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	4a32      	ldr	r2, [pc, #200]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 800707c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007080:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007082:	4b2f      	ldr	r3, [pc, #188]	@ (8007140 <HAL_RCC_ClockConfig+0x260>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 030f 	and.w	r3, r3, #15
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	429a      	cmp	r2, r3
 800708e:	d21d      	bcs.n	80070cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007090:	4b2b      	ldr	r3, [pc, #172]	@ (8007140 <HAL_RCC_ClockConfig+0x260>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f023 020f 	bic.w	r2, r3, #15
 8007098:	4929      	ldr	r1, [pc, #164]	@ (8007140 <HAL_RCC_ClockConfig+0x260>)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	4313      	orrs	r3, r2
 800709e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80070a0:	f7fc f998 	bl	80033d4 <HAL_GetTick>
 80070a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070a6:	e00a      	b.n	80070be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070a8:	f7fc f994 	bl	80033d4 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d901      	bls.n	80070be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e03b      	b.n	8007136 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070be:	4b20      	ldr	r3, [pc, #128]	@ (8007140 <HAL_RCC_ClockConfig+0x260>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 030f 	and.w	r3, r3, #15
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d1ed      	bne.n	80070a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d008      	beq.n	80070ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	4917      	ldr	r1, [pc, #92]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0308 	and.w	r3, r3, #8
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d009      	beq.n	800710a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070f6:	4b13      	ldr	r3, [pc, #76]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	00db      	lsls	r3, r3, #3
 8007104:	490f      	ldr	r1, [pc, #60]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8007106:	4313      	orrs	r3, r2
 8007108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800710a:	f000 f825 	bl	8007158 <HAL_RCC_GetSysClockFreq>
 800710e:	4602      	mov	r2, r0
 8007110:	4b0c      	ldr	r3, [pc, #48]	@ (8007144 <HAL_RCC_ClockConfig+0x264>)
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	091b      	lsrs	r3, r3, #4
 8007116:	f003 030f 	and.w	r3, r3, #15
 800711a:	490c      	ldr	r1, [pc, #48]	@ (800714c <HAL_RCC_ClockConfig+0x26c>)
 800711c:	5ccb      	ldrb	r3, [r1, r3]
 800711e:	f003 031f 	and.w	r3, r3, #31
 8007122:	fa22 f303 	lsr.w	r3, r2, r3
 8007126:	4a0a      	ldr	r2, [pc, #40]	@ (8007150 <HAL_RCC_ClockConfig+0x270>)
 8007128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800712a:	4b0a      	ldr	r3, [pc, #40]	@ (8007154 <HAL_RCC_ClockConfig+0x274>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4618      	mov	r0, r3
 8007130:	f7fc f904 	bl	800333c <HAL_InitTick>
 8007134:	4603      	mov	r3, r0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	40022000 	.word	0x40022000
 8007144:	40021000 	.word	0x40021000
 8007148:	04c4b400 	.word	0x04c4b400
 800714c:	0800adfc 	.word	0x0800adfc
 8007150:	2000002c 	.word	0x2000002c
 8007154:	20000030 	.word	0x20000030

08007158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007158:	b480      	push	{r7}
 800715a:	b087      	sub	sp, #28
 800715c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800715e:	4b2c      	ldr	r3, [pc, #176]	@ (8007210 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f003 030c 	and.w	r3, r3, #12
 8007166:	2b04      	cmp	r3, #4
 8007168:	d102      	bne.n	8007170 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800716a:	4b2a      	ldr	r3, [pc, #168]	@ (8007214 <HAL_RCC_GetSysClockFreq+0xbc>)
 800716c:	613b      	str	r3, [r7, #16]
 800716e:	e047      	b.n	8007200 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007170:	4b27      	ldr	r3, [pc, #156]	@ (8007210 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f003 030c 	and.w	r3, r3, #12
 8007178:	2b08      	cmp	r3, #8
 800717a:	d102      	bne.n	8007182 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800717c:	4b26      	ldr	r3, [pc, #152]	@ (8007218 <HAL_RCC_GetSysClockFreq+0xc0>)
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	e03e      	b.n	8007200 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007182:	4b23      	ldr	r3, [pc, #140]	@ (8007210 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f003 030c 	and.w	r3, r3, #12
 800718a:	2b0c      	cmp	r3, #12
 800718c:	d136      	bne.n	80071fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800718e:	4b20      	ldr	r3, [pc, #128]	@ (8007210 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f003 0303 	and.w	r3, r3, #3
 8007196:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007198:	4b1d      	ldr	r3, [pc, #116]	@ (8007210 <HAL_RCC_GetSysClockFreq+0xb8>)
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	091b      	lsrs	r3, r3, #4
 800719e:	f003 030f 	and.w	r3, r3, #15
 80071a2:	3301      	adds	r3, #1
 80071a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2b03      	cmp	r3, #3
 80071aa:	d10c      	bne.n	80071c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071ac:	4a1a      	ldr	r2, [pc, #104]	@ (8007218 <HAL_RCC_GetSysClockFreq+0xc0>)
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b4:	4a16      	ldr	r2, [pc, #88]	@ (8007210 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071b6:	68d2      	ldr	r2, [r2, #12]
 80071b8:	0a12      	lsrs	r2, r2, #8
 80071ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80071be:	fb02 f303 	mul.w	r3, r2, r3
 80071c2:	617b      	str	r3, [r7, #20]
      break;
 80071c4:	e00c      	b.n	80071e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071c6:	4a13      	ldr	r2, [pc, #76]	@ (8007214 <HAL_RCC_GetSysClockFreq+0xbc>)
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ce:	4a10      	ldr	r2, [pc, #64]	@ (8007210 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071d0:	68d2      	ldr	r2, [r2, #12]
 80071d2:	0a12      	lsrs	r2, r2, #8
 80071d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80071d8:	fb02 f303 	mul.w	r3, r2, r3
 80071dc:	617b      	str	r3, [r7, #20]
      break;
 80071de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80071e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007210 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	0e5b      	lsrs	r3, r3, #25
 80071e6:	f003 0303 	and.w	r3, r3, #3
 80071ea:	3301      	adds	r3, #1
 80071ec:	005b      	lsls	r3, r3, #1
 80071ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f8:	613b      	str	r3, [r7, #16]
 80071fa:	e001      	b.n	8007200 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007200:	693b      	ldr	r3, [r7, #16]
}
 8007202:	4618      	mov	r0, r3
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	40021000 	.word	0x40021000
 8007214:	00f42400 	.word	0x00f42400
 8007218:	016e3600 	.word	0x016e3600

0800721c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800721c:	b480      	push	{r7}
 800721e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007220:	4b03      	ldr	r3, [pc, #12]	@ (8007230 <HAL_RCC_GetHCLKFreq+0x14>)
 8007222:	681b      	ldr	r3, [r3, #0]
}
 8007224:	4618      	mov	r0, r3
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	2000002c 	.word	0x2000002c

08007234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007238:	f7ff fff0 	bl	800721c <HAL_RCC_GetHCLKFreq>
 800723c:	4602      	mov	r2, r0
 800723e:	4b06      	ldr	r3, [pc, #24]	@ (8007258 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	0a1b      	lsrs	r3, r3, #8
 8007244:	f003 0307 	and.w	r3, r3, #7
 8007248:	4904      	ldr	r1, [pc, #16]	@ (800725c <HAL_RCC_GetPCLK1Freq+0x28>)
 800724a:	5ccb      	ldrb	r3, [r1, r3]
 800724c:	f003 031f 	and.w	r3, r3, #31
 8007250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007254:	4618      	mov	r0, r3
 8007256:	bd80      	pop	{r7, pc}
 8007258:	40021000 	.word	0x40021000
 800725c:	0800ae0c 	.word	0x0800ae0c

08007260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007264:	f7ff ffda 	bl	800721c <HAL_RCC_GetHCLKFreq>
 8007268:	4602      	mov	r2, r0
 800726a:	4b06      	ldr	r3, [pc, #24]	@ (8007284 <HAL_RCC_GetPCLK2Freq+0x24>)
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	0adb      	lsrs	r3, r3, #11
 8007270:	f003 0307 	and.w	r3, r3, #7
 8007274:	4904      	ldr	r1, [pc, #16]	@ (8007288 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007276:	5ccb      	ldrb	r3, [r1, r3]
 8007278:	f003 031f 	and.w	r3, r3, #31
 800727c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007280:	4618      	mov	r0, r3
 8007282:	bd80      	pop	{r7, pc}
 8007284:	40021000 	.word	0x40021000
 8007288:	0800ae0c 	.word	0x0800ae0c

0800728c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007292:	4b1e      	ldr	r3, [pc, #120]	@ (800730c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f003 0303 	and.w	r3, r3, #3
 800729a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800729c:	4b1b      	ldr	r3, [pc, #108]	@ (800730c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	091b      	lsrs	r3, r3, #4
 80072a2:	f003 030f 	and.w	r3, r3, #15
 80072a6:	3301      	adds	r3, #1
 80072a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	2b03      	cmp	r3, #3
 80072ae:	d10c      	bne.n	80072ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072b0:	4a17      	ldr	r2, [pc, #92]	@ (8007310 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b8:	4a14      	ldr	r2, [pc, #80]	@ (800730c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072ba:	68d2      	ldr	r2, [r2, #12]
 80072bc:	0a12      	lsrs	r2, r2, #8
 80072be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80072c2:	fb02 f303 	mul.w	r3, r2, r3
 80072c6:	617b      	str	r3, [r7, #20]
    break;
 80072c8:	e00c      	b.n	80072e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072ca:	4a12      	ldr	r2, [pc, #72]	@ (8007314 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d2:	4a0e      	ldr	r2, [pc, #56]	@ (800730c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072d4:	68d2      	ldr	r2, [r2, #12]
 80072d6:	0a12      	lsrs	r2, r2, #8
 80072d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80072dc:	fb02 f303 	mul.w	r3, r2, r3
 80072e0:	617b      	str	r3, [r7, #20]
    break;
 80072e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80072e4:	4b09      	ldr	r3, [pc, #36]	@ (800730c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	0e5b      	lsrs	r3, r3, #25
 80072ea:	f003 0303 	and.w	r3, r3, #3
 80072ee:	3301      	adds	r3, #1
 80072f0:	005b      	lsls	r3, r3, #1
 80072f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80072fe:	687b      	ldr	r3, [r7, #4]
}
 8007300:	4618      	mov	r0, r3
 8007302:	371c      	adds	r7, #28
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	40021000 	.word	0x40021000
 8007310:	016e3600 	.word	0x016e3600
 8007314:	00f42400 	.word	0x00f42400

08007318 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007320:	2300      	movs	r3, #0
 8007322:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007324:	2300      	movs	r3, #0
 8007326:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 8098 	beq.w	8007466 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007336:	2300      	movs	r3, #0
 8007338:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800733a:	4b43      	ldr	r3, [pc, #268]	@ (8007448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800733c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800733e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10d      	bne.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007346:	4b40      	ldr	r3, [pc, #256]	@ (8007448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800734a:	4a3f      	ldr	r2, [pc, #252]	@ (8007448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800734c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007350:	6593      	str	r3, [r2, #88]	@ 0x58
 8007352:	4b3d      	ldr	r3, [pc, #244]	@ (8007448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800735a:	60bb      	str	r3, [r7, #8]
 800735c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800735e:	2301      	movs	r3, #1
 8007360:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007362:	4b3a      	ldr	r3, [pc, #232]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a39      	ldr	r2, [pc, #228]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800736c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800736e:	f7fc f831 	bl	80033d4 <HAL_GetTick>
 8007372:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007374:	e009      	b.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007376:	f7fc f82d 	bl	80033d4 <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	2b02      	cmp	r3, #2
 8007382:	d902      	bls.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	74fb      	strb	r3, [r7, #19]
        break;
 8007388:	e005      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800738a:	4b30      	ldr	r3, [pc, #192]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007392:	2b00      	cmp	r3, #0
 8007394:	d0ef      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007396:	7cfb      	ldrb	r3, [r7, #19]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d159      	bne.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800739c:	4b2a      	ldr	r3, [pc, #168]	@ (8007448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800739e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d01e      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d019      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80073b8:	4b23      	ldr	r3, [pc, #140]	@ (8007448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073c4:	4b20      	ldr	r3, [pc, #128]	@ (8007448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ca:	4a1f      	ldr	r2, [pc, #124]	@ (8007448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073d4:	4b1c      	ldr	r3, [pc, #112]	@ (8007448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073da:	4a1b      	ldr	r2, [pc, #108]	@ (8007448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80073e4:	4a18      	ldr	r2, [pc, #96]	@ (8007448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d016      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073f6:	f7fb ffed 	bl	80033d4 <HAL_GetTick>
 80073fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073fc:	e00b      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073fe:	f7fb ffe9 	bl	80033d4 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800740c:	4293      	cmp	r3, r2
 800740e:	d902      	bls.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	74fb      	strb	r3, [r7, #19]
            break;
 8007414:	e006      	b.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007416:	4b0c      	ldr	r3, [pc, #48]	@ (8007448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800741c:	f003 0302 	and.w	r3, r3, #2
 8007420:	2b00      	cmp	r3, #0
 8007422:	d0ec      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007424:	7cfb      	ldrb	r3, [r7, #19]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10b      	bne.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800742a:	4b07      	ldr	r3, [pc, #28]	@ (8007448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800742c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007430:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007438:	4903      	ldr	r1, [pc, #12]	@ (8007448 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800743a:	4313      	orrs	r3, r2
 800743c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007440:	e008      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007442:	7cfb      	ldrb	r3, [r7, #19]
 8007444:	74bb      	strb	r3, [r7, #18]
 8007446:	e005      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007448:	40021000 	.word	0x40021000
 800744c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007450:	7cfb      	ldrb	r3, [r7, #19]
 8007452:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007454:	7c7b      	ldrb	r3, [r7, #17]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d105      	bne.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800745a:	4ba7      	ldr	r3, [pc, #668]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800745c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800745e:	4aa6      	ldr	r2, [pc, #664]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007460:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007464:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00a      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007472:	4ba1      	ldr	r3, [pc, #644]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007478:	f023 0203 	bic.w	r2, r3, #3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	499d      	ldr	r1, [pc, #628]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007482:	4313      	orrs	r3, r2
 8007484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00a      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007494:	4b98      	ldr	r3, [pc, #608]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800749a:	f023 020c 	bic.w	r2, r3, #12
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	4995      	ldr	r1, [pc, #596]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074a4:	4313      	orrs	r3, r2
 80074a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 0304 	and.w	r3, r3, #4
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00a      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074b6:	4b90      	ldr	r3, [pc, #576]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	498c      	ldr	r1, [pc, #560]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0308 	and.w	r3, r3, #8
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00a      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80074d8:	4b87      	ldr	r3, [pc, #540]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	4984      	ldr	r1, [pc, #528]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0310 	and.w	r3, r3, #16
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80074fa:	4b7f      	ldr	r3, [pc, #508]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007500:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	497b      	ldr	r1, [pc, #492]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800750a:	4313      	orrs	r3, r2
 800750c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0320 	and.w	r3, r3, #32
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00a      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800751c:	4b76      	ldr	r3, [pc, #472]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800751e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007522:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	4973      	ldr	r1, [pc, #460]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800752c:	4313      	orrs	r3, r2
 800752e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800753e:	4b6e      	ldr	r3, [pc, #440]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007544:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	69db      	ldr	r3, [r3, #28]
 800754c:	496a      	ldr	r1, [pc, #424]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800754e:	4313      	orrs	r3, r2
 8007550:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00a      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007560:	4b65      	ldr	r3, [pc, #404]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007566:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	4962      	ldr	r1, [pc, #392]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007570:	4313      	orrs	r3, r2
 8007572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00a      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007582:	4b5d      	ldr	r3, [pc, #372]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007588:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007590:	4959      	ldr	r1, [pc, #356]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007592:	4313      	orrs	r3, r2
 8007594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00a      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075a4:	4b54      	ldr	r3, [pc, #336]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075aa:	f023 0203 	bic.w	r2, r3, #3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b2:	4951      	ldr	r1, [pc, #324]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075c6:	4b4c      	ldr	r3, [pc, #304]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d4:	4948      	ldr	r1, [pc, #288]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d015      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075e8:	4b43      	ldr	r3, [pc, #268]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075f6:	4940      	ldr	r1, [pc, #256]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007602:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007606:	d105      	bne.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007608:	4b3b      	ldr	r3, [pc, #236]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	4a3a      	ldr	r2, [pc, #232]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800760e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007612:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800761c:	2b00      	cmp	r3, #0
 800761e:	d015      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007620:	4b35      	ldr	r3, [pc, #212]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007626:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800762e:	4932      	ldr	r1, [pc, #200]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007630:	4313      	orrs	r3, r2
 8007632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800763a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800763e:	d105      	bne.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007640:	4b2d      	ldr	r3, [pc, #180]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	4a2c      	ldr	r2, [pc, #176]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007646:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800764a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d015      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007658:	4b27      	ldr	r3, [pc, #156]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800765a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800765e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007666:	4924      	ldr	r1, [pc, #144]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007668:	4313      	orrs	r3, r2
 800766a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007672:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007676:	d105      	bne.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007678:	4b1f      	ldr	r3, [pc, #124]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	4a1e      	ldr	r2, [pc, #120]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800767e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007682:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d015      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007690:	4b19      	ldr	r3, [pc, #100]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007696:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800769e:	4916      	ldr	r1, [pc, #88]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076a0:	4313      	orrs	r3, r2
 80076a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076ae:	d105      	bne.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076b0:	4b11      	ldr	r3, [pc, #68]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	4a10      	ldr	r2, [pc, #64]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d019      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076c8:	4b0b      	ldr	r3, [pc, #44]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d6:	4908      	ldr	r1, [pc, #32]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076e6:	d109      	bne.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076e8:	4b03      	ldr	r3, [pc, #12]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	4a02      	ldr	r2, [pc, #8]	@ (80076f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076f2:	60d3      	str	r3, [r2, #12]
 80076f4:	e002      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80076f6:	bf00      	nop
 80076f8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d015      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007708:	4b29      	ldr	r3, [pc, #164]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800770a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800770e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007716:	4926      	ldr	r1, [pc, #152]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007718:	4313      	orrs	r3, r2
 800771a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007722:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007726:	d105      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007728:	4b21      	ldr	r3, [pc, #132]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	4a20      	ldr	r2, [pc, #128]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800772e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007732:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d015      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007740:	4b1b      	ldr	r3, [pc, #108]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007746:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800774e:	4918      	ldr	r1, [pc, #96]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007750:	4313      	orrs	r3, r2
 8007752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800775a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800775e:	d105      	bne.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007760:	4b13      	ldr	r3, [pc, #76]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	4a12      	ldr	r2, [pc, #72]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800776a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d015      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007778:	4b0d      	ldr	r3, [pc, #52]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800777a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800777e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007786:	490a      	ldr	r1, [pc, #40]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007788:	4313      	orrs	r3, r2
 800778a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007792:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007796:	d105      	bne.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007798:	4b05      	ldr	r3, [pc, #20]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	4a04      	ldr	r2, [pc, #16]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800779e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80077a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3718      	adds	r7, #24
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	40021000 	.word	0x40021000

080077b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e049      	b.n	800785a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d106      	bne.n	80077e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7fb fba4 	bl	8002f28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2202      	movs	r2, #2
 80077e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	3304      	adds	r3, #4
 80077f0:	4619      	mov	r1, r3
 80077f2:	4610      	mov	r0, r2
 80077f4:	f000 ff68 	bl	80086c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
	...

08007864 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007872:	b2db      	uxtb	r3, r3
 8007874:	2b01      	cmp	r3, #1
 8007876:	d001      	beq.n	800787c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e04c      	b.n	8007916 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2202      	movs	r2, #2
 8007880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a26      	ldr	r2, [pc, #152]	@ (8007924 <HAL_TIM_Base_Start+0xc0>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d022      	beq.n	80078d4 <HAL_TIM_Base_Start+0x70>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007896:	d01d      	beq.n	80078d4 <HAL_TIM_Base_Start+0x70>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a22      	ldr	r2, [pc, #136]	@ (8007928 <HAL_TIM_Base_Start+0xc4>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d018      	beq.n	80078d4 <HAL_TIM_Base_Start+0x70>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a21      	ldr	r2, [pc, #132]	@ (800792c <HAL_TIM_Base_Start+0xc8>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d013      	beq.n	80078d4 <HAL_TIM_Base_Start+0x70>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a1f      	ldr	r2, [pc, #124]	@ (8007930 <HAL_TIM_Base_Start+0xcc>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d00e      	beq.n	80078d4 <HAL_TIM_Base_Start+0x70>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a1e      	ldr	r2, [pc, #120]	@ (8007934 <HAL_TIM_Base_Start+0xd0>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d009      	beq.n	80078d4 <HAL_TIM_Base_Start+0x70>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007938 <HAL_TIM_Base_Start+0xd4>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d004      	beq.n	80078d4 <HAL_TIM_Base_Start+0x70>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a1b      	ldr	r2, [pc, #108]	@ (800793c <HAL_TIM_Base_Start+0xd8>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d115      	bne.n	8007900 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	689a      	ldr	r2, [r3, #8]
 80078da:	4b19      	ldr	r3, [pc, #100]	@ (8007940 <HAL_TIM_Base_Start+0xdc>)
 80078dc:	4013      	ands	r3, r2
 80078de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2b06      	cmp	r3, #6
 80078e4:	d015      	beq.n	8007912 <HAL_TIM_Base_Start+0xae>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078ec:	d011      	beq.n	8007912 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f042 0201 	orr.w	r2, r2, #1
 80078fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078fe:	e008      	b.n	8007912 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f042 0201 	orr.w	r2, r2, #1
 800790e:	601a      	str	r2, [r3, #0]
 8007910:	e000      	b.n	8007914 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007912:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	40012c00 	.word	0x40012c00
 8007928:	40000400 	.word	0x40000400
 800792c:	40000800 	.word	0x40000800
 8007930:	40000c00 	.word	0x40000c00
 8007934:	40013400 	.word	0x40013400
 8007938:	40014000 	.word	0x40014000
 800793c:	40015000 	.word	0x40015000
 8007940:	00010007 	.word	0x00010007

08007944 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b01      	cmp	r3, #1
 8007956:	d001      	beq.n	800795c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e054      	b.n	8007a06 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2202      	movs	r2, #2
 8007960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68da      	ldr	r2, [r3, #12]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f042 0201 	orr.w	r2, r2, #1
 8007972:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a26      	ldr	r2, [pc, #152]	@ (8007a14 <HAL_TIM_Base_Start_IT+0xd0>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d022      	beq.n	80079c4 <HAL_TIM_Base_Start_IT+0x80>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007986:	d01d      	beq.n	80079c4 <HAL_TIM_Base_Start_IT+0x80>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a22      	ldr	r2, [pc, #136]	@ (8007a18 <HAL_TIM_Base_Start_IT+0xd4>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d018      	beq.n	80079c4 <HAL_TIM_Base_Start_IT+0x80>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a21      	ldr	r2, [pc, #132]	@ (8007a1c <HAL_TIM_Base_Start_IT+0xd8>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d013      	beq.n	80079c4 <HAL_TIM_Base_Start_IT+0x80>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a1f      	ldr	r2, [pc, #124]	@ (8007a20 <HAL_TIM_Base_Start_IT+0xdc>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d00e      	beq.n	80079c4 <HAL_TIM_Base_Start_IT+0x80>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a1e      	ldr	r2, [pc, #120]	@ (8007a24 <HAL_TIM_Base_Start_IT+0xe0>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d009      	beq.n	80079c4 <HAL_TIM_Base_Start_IT+0x80>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a1c      	ldr	r2, [pc, #112]	@ (8007a28 <HAL_TIM_Base_Start_IT+0xe4>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d004      	beq.n	80079c4 <HAL_TIM_Base_Start_IT+0x80>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a1b      	ldr	r2, [pc, #108]	@ (8007a2c <HAL_TIM_Base_Start_IT+0xe8>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d115      	bne.n	80079f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	689a      	ldr	r2, [r3, #8]
 80079ca:	4b19      	ldr	r3, [pc, #100]	@ (8007a30 <HAL_TIM_Base_Start_IT+0xec>)
 80079cc:	4013      	ands	r3, r2
 80079ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b06      	cmp	r3, #6
 80079d4:	d015      	beq.n	8007a02 <HAL_TIM_Base_Start_IT+0xbe>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079dc:	d011      	beq.n	8007a02 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f042 0201 	orr.w	r2, r2, #1
 80079ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ee:	e008      	b.n	8007a02 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f042 0201 	orr.w	r2, r2, #1
 80079fe:	601a      	str	r2, [r3, #0]
 8007a00:	e000      	b.n	8007a04 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3714      	adds	r7, #20
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	40012c00 	.word	0x40012c00
 8007a18:	40000400 	.word	0x40000400
 8007a1c:	40000800 	.word	0x40000800
 8007a20:	40000c00 	.word	0x40000c00
 8007a24:	40013400 	.word	0x40013400
 8007a28:	40014000 	.word	0x40014000
 8007a2c:	40015000 	.word	0x40015000
 8007a30:	00010007 	.word	0x00010007

08007a34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e049      	b.n	8007ada <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d106      	bne.n	8007a60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f841 	bl	8007ae2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	3304      	adds	r3, #4
 8007a70:	4619      	mov	r1, r3
 8007a72:	4610      	mov	r0, r2
 8007a74:	f000 fe28 	bl	80086c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007ae2:	b480      	push	{r7}
 8007ae4:	b083      	sub	sp, #12
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007aea:	bf00      	nop
 8007aec:	370c      	adds	r7, #12
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
	...

08007af8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d109      	bne.n	8007b1c <HAL_TIM_PWM_Start+0x24>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	bf14      	ite	ne
 8007b14:	2301      	movne	r3, #1
 8007b16:	2300      	moveq	r3, #0
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	e03c      	b.n	8007b96 <HAL_TIM_PWM_Start+0x9e>
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	2b04      	cmp	r3, #4
 8007b20:	d109      	bne.n	8007b36 <HAL_TIM_PWM_Start+0x3e>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	bf14      	ite	ne
 8007b2e:	2301      	movne	r3, #1
 8007b30:	2300      	moveq	r3, #0
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	e02f      	b.n	8007b96 <HAL_TIM_PWM_Start+0x9e>
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	d109      	bne.n	8007b50 <HAL_TIM_PWM_Start+0x58>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	bf14      	ite	ne
 8007b48:	2301      	movne	r3, #1
 8007b4a:	2300      	moveq	r3, #0
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	e022      	b.n	8007b96 <HAL_TIM_PWM_Start+0x9e>
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2b0c      	cmp	r3, #12
 8007b54:	d109      	bne.n	8007b6a <HAL_TIM_PWM_Start+0x72>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	bf14      	ite	ne
 8007b62:	2301      	movne	r3, #1
 8007b64:	2300      	moveq	r3, #0
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	e015      	b.n	8007b96 <HAL_TIM_PWM_Start+0x9e>
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	2b10      	cmp	r3, #16
 8007b6e:	d109      	bne.n	8007b84 <HAL_TIM_PWM_Start+0x8c>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	bf14      	ite	ne
 8007b7c:	2301      	movne	r3, #1
 8007b7e:	2300      	moveq	r3, #0
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	e008      	b.n	8007b96 <HAL_TIM_PWM_Start+0x9e>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	bf14      	ite	ne
 8007b90:	2301      	movne	r3, #1
 8007b92:	2300      	moveq	r3, #0
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e0a6      	b.n	8007cec <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d104      	bne.n	8007bae <HAL_TIM_PWM_Start+0xb6>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bac:	e023      	b.n	8007bf6 <HAL_TIM_PWM_Start+0xfe>
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b04      	cmp	r3, #4
 8007bb2:	d104      	bne.n	8007bbe <HAL_TIM_PWM_Start+0xc6>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bbc:	e01b      	b.n	8007bf6 <HAL_TIM_PWM_Start+0xfe>
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	2b08      	cmp	r3, #8
 8007bc2:	d104      	bne.n	8007bce <HAL_TIM_PWM_Start+0xd6>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bcc:	e013      	b.n	8007bf6 <HAL_TIM_PWM_Start+0xfe>
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	2b0c      	cmp	r3, #12
 8007bd2:	d104      	bne.n	8007bde <HAL_TIM_PWM_Start+0xe6>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007bdc:	e00b      	b.n	8007bf6 <HAL_TIM_PWM_Start+0xfe>
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b10      	cmp	r3, #16
 8007be2:	d104      	bne.n	8007bee <HAL_TIM_PWM_Start+0xf6>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2202      	movs	r2, #2
 8007be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bec:	e003      	b.n	8007bf6 <HAL_TIM_PWM_Start+0xfe>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2202      	movs	r2, #2
 8007bf2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f001 f9dc 	bl	8008fbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a3a      	ldr	r2, [pc, #232]	@ (8007cf4 <HAL_TIM_PWM_Start+0x1fc>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d018      	beq.n	8007c40 <HAL_TIM_PWM_Start+0x148>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a39      	ldr	r2, [pc, #228]	@ (8007cf8 <HAL_TIM_PWM_Start+0x200>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d013      	beq.n	8007c40 <HAL_TIM_PWM_Start+0x148>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a37      	ldr	r2, [pc, #220]	@ (8007cfc <HAL_TIM_PWM_Start+0x204>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d00e      	beq.n	8007c40 <HAL_TIM_PWM_Start+0x148>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a36      	ldr	r2, [pc, #216]	@ (8007d00 <HAL_TIM_PWM_Start+0x208>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d009      	beq.n	8007c40 <HAL_TIM_PWM_Start+0x148>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a34      	ldr	r2, [pc, #208]	@ (8007d04 <HAL_TIM_PWM_Start+0x20c>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d004      	beq.n	8007c40 <HAL_TIM_PWM_Start+0x148>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a33      	ldr	r2, [pc, #204]	@ (8007d08 <HAL_TIM_PWM_Start+0x210>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d101      	bne.n	8007c44 <HAL_TIM_PWM_Start+0x14c>
 8007c40:	2301      	movs	r3, #1
 8007c42:	e000      	b.n	8007c46 <HAL_TIM_PWM_Start+0x14e>
 8007c44:	2300      	movs	r3, #0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d007      	beq.n	8007c5a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a25      	ldr	r2, [pc, #148]	@ (8007cf4 <HAL_TIM_PWM_Start+0x1fc>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d022      	beq.n	8007caa <HAL_TIM_PWM_Start+0x1b2>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c6c:	d01d      	beq.n	8007caa <HAL_TIM_PWM_Start+0x1b2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a26      	ldr	r2, [pc, #152]	@ (8007d0c <HAL_TIM_PWM_Start+0x214>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d018      	beq.n	8007caa <HAL_TIM_PWM_Start+0x1b2>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a24      	ldr	r2, [pc, #144]	@ (8007d10 <HAL_TIM_PWM_Start+0x218>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d013      	beq.n	8007caa <HAL_TIM_PWM_Start+0x1b2>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a23      	ldr	r2, [pc, #140]	@ (8007d14 <HAL_TIM_PWM_Start+0x21c>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d00e      	beq.n	8007caa <HAL_TIM_PWM_Start+0x1b2>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a19      	ldr	r2, [pc, #100]	@ (8007cf8 <HAL_TIM_PWM_Start+0x200>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d009      	beq.n	8007caa <HAL_TIM_PWM_Start+0x1b2>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a18      	ldr	r2, [pc, #96]	@ (8007cfc <HAL_TIM_PWM_Start+0x204>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d004      	beq.n	8007caa <HAL_TIM_PWM_Start+0x1b2>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a18      	ldr	r2, [pc, #96]	@ (8007d08 <HAL_TIM_PWM_Start+0x210>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d115      	bne.n	8007cd6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	689a      	ldr	r2, [r3, #8]
 8007cb0:	4b19      	ldr	r3, [pc, #100]	@ (8007d18 <HAL_TIM_PWM_Start+0x220>)
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2b06      	cmp	r3, #6
 8007cba:	d015      	beq.n	8007ce8 <HAL_TIM_PWM_Start+0x1f0>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cc2:	d011      	beq.n	8007ce8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f042 0201 	orr.w	r2, r2, #1
 8007cd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cd4:	e008      	b.n	8007ce8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f042 0201 	orr.w	r2, r2, #1
 8007ce4:	601a      	str	r2, [r3, #0]
 8007ce6:	e000      	b.n	8007cea <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ce8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	40012c00 	.word	0x40012c00
 8007cf8:	40013400 	.word	0x40013400
 8007cfc:	40014000 	.word	0x40014000
 8007d00:	40014400 	.word	0x40014400
 8007d04:	40014800 	.word	0x40014800
 8007d08:	40015000 	.word	0x40015000
 8007d0c:	40000400 	.word	0x40000400
 8007d10:	40000800 	.word	0x40000800
 8007d14:	40000c00 	.word	0x40000c00
 8007d18:	00010007 	.word	0x00010007

08007d1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e097      	b.n	8007e60 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d106      	bne.n	8007d4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7fb f94f 	bl	8002fe8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	6812      	ldr	r2, [r2, #0]
 8007d5c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007d60:	f023 0307 	bic.w	r3, r3, #7
 8007d64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	4619      	mov	r1, r3
 8007d70:	4610      	mov	r0, r2
 8007d72:	f000 fca9 	bl	80086c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6a1b      	ldr	r3, [r3, #32]
 8007d8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d9e:	f023 0303 	bic.w	r3, r3, #3
 8007da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	689a      	ldr	r2, [r3, #8]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	021b      	lsls	r3, r3, #8
 8007dae:	4313      	orrs	r3, r2
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007dbc:	f023 030c 	bic.w	r3, r3, #12
 8007dc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007dc8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007dcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	68da      	ldr	r2, [r3, #12]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	69db      	ldr	r3, [r3, #28]
 8007dd6:	021b      	lsls	r3, r3, #8
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	011a      	lsls	r2, r3, #4
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	031b      	lsls	r3, r3, #12
 8007dec:	4313      	orrs	r3, r2
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007dfa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007e02:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	011b      	lsls	r3, r3, #4
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	697a      	ldr	r2, [r7, #20]
 8007e1c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	693a      	ldr	r2, [r7, #16]
 8007e24:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3718      	adds	r7, #24
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e78:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e80:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e88:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e90:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d110      	bne.n	8007eba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d102      	bne.n	8007ea4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e9e:	7b7b      	ldrb	r3, [r7, #13]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d001      	beq.n	8007ea8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e069      	b.n	8007f7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eb8:	e031      	b.n	8007f1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	2b04      	cmp	r3, #4
 8007ebe:	d110      	bne.n	8007ee2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d102      	bne.n	8007ecc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ec6:	7b3b      	ldrb	r3, [r7, #12]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d001      	beq.n	8007ed0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e055      	b.n	8007f7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2202      	movs	r2, #2
 8007edc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ee0:	e01d      	b.n	8007f1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ee2:	7bfb      	ldrb	r3, [r7, #15]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d108      	bne.n	8007efa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ee8:	7bbb      	ldrb	r3, [r7, #14]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d105      	bne.n	8007efa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007eee:	7b7b      	ldrb	r3, [r7, #13]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d102      	bne.n	8007efa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ef4:	7b3b      	ldrb	r3, [r7, #12]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d001      	beq.n	8007efe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e03e      	b.n	8007f7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2202      	movs	r2, #2
 8007f02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2202      	movs	r2, #2
 8007f0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2202      	movs	r2, #2
 8007f12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2202      	movs	r2, #2
 8007f1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d003      	beq.n	8007f2c <HAL_TIM_Encoder_Start+0xc4>
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	d008      	beq.n	8007f3c <HAL_TIM_Encoder_Start+0xd4>
 8007f2a:	e00f      	b.n	8007f4c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2201      	movs	r2, #1
 8007f32:	2100      	movs	r1, #0
 8007f34:	4618      	mov	r0, r3
 8007f36:	f001 f841 	bl	8008fbc <TIM_CCxChannelCmd>
      break;
 8007f3a:	e016      	b.n	8007f6a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2201      	movs	r2, #1
 8007f42:	2104      	movs	r1, #4
 8007f44:	4618      	mov	r0, r3
 8007f46:	f001 f839 	bl	8008fbc <TIM_CCxChannelCmd>
      break;
 8007f4a:	e00e      	b.n	8007f6a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2201      	movs	r2, #1
 8007f52:	2100      	movs	r1, #0
 8007f54:	4618      	mov	r0, r3
 8007f56:	f001 f831 	bl	8008fbc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	2104      	movs	r1, #4
 8007f62:	4618      	mov	r0, r3
 8007f64:	f001 f82a 	bl	8008fbc <TIM_CCxChannelCmd>
      break;
 8007f68:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f042 0201 	orr.w	r2, r2, #1
 8007f78:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	f003 0302 	and.w	r3, r3, #2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d020      	beq.n	8007fe8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f003 0302 	and.w	r3, r3, #2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d01b      	beq.n	8007fe8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f06f 0202 	mvn.w	r2, #2
 8007fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	f003 0303 	and.w	r3, r3, #3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d003      	beq.n	8007fd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fb5c 	bl	800868c <HAL_TIM_IC_CaptureCallback>
 8007fd4:	e005      	b.n	8007fe2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fb4e 	bl	8008678 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fb5f 	bl	80086a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	f003 0304 	and.w	r3, r3, #4
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d020      	beq.n	8008034 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f003 0304 	and.w	r3, r3, #4
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d01b      	beq.n	8008034 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f06f 0204 	mvn.w	r2, #4
 8008004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2202      	movs	r2, #2
 800800a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008016:	2b00      	cmp	r3, #0
 8008018:	d003      	beq.n	8008022 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fb36 	bl	800868c <HAL_TIM_IC_CaptureCallback>
 8008020:	e005      	b.n	800802e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fb28 	bl	8008678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 fb39 	bl	80086a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	f003 0308 	and.w	r3, r3, #8
 800803a:	2b00      	cmp	r3, #0
 800803c:	d020      	beq.n	8008080 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f003 0308 	and.w	r3, r3, #8
 8008044:	2b00      	cmp	r3, #0
 8008046:	d01b      	beq.n	8008080 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f06f 0208 	mvn.w	r2, #8
 8008050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2204      	movs	r2, #4
 8008056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	f003 0303 	and.w	r3, r3, #3
 8008062:	2b00      	cmp	r3, #0
 8008064:	d003      	beq.n	800806e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fb10 	bl	800868c <HAL_TIM_IC_CaptureCallback>
 800806c:	e005      	b.n	800807a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fb02 	bl	8008678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fb13 	bl	80086a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	f003 0310 	and.w	r3, r3, #16
 8008086:	2b00      	cmp	r3, #0
 8008088:	d020      	beq.n	80080cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f003 0310 	and.w	r3, r3, #16
 8008090:	2b00      	cmp	r3, #0
 8008092:	d01b      	beq.n	80080cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f06f 0210 	mvn.w	r2, #16
 800809c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2208      	movs	r2, #8
 80080a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 faea 	bl	800868c <HAL_TIM_IC_CaptureCallback>
 80080b8:	e005      	b.n	80080c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fadc 	bl	8008678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 faed 	bl	80086a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00c      	beq.n	80080f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f003 0301 	and.w	r3, r3, #1
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d007      	beq.n	80080f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f06f 0201 	mvn.w	r2, #1
 80080e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7fa fbe8 	bl	80028c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d104      	bne.n	8008104 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00c      	beq.n	800811e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800810a:	2b00      	cmp	r3, #0
 800810c:	d007      	beq.n	800811e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f001 f8a9 	bl	8009270 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00c      	beq.n	8008142 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800812e:	2b00      	cmp	r3, #0
 8008130:	d007      	beq.n	8008142 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800813a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f001 f8a1 	bl	8009284 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00c      	beq.n	8008166 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008152:	2b00      	cmp	r3, #0
 8008154:	d007      	beq.n	8008166 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800815e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 faa7 	bl	80086b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	f003 0320 	and.w	r3, r3, #32
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00c      	beq.n	800818a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f003 0320 	and.w	r3, r3, #32
 8008176:	2b00      	cmp	r3, #0
 8008178:	d007      	beq.n	800818a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f06f 0220 	mvn.w	r2, #32
 8008182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f001 f869 	bl	800925c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00c      	beq.n	80081ae <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d007      	beq.n	80081ae <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80081a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f001 f875 	bl	8009298 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00c      	beq.n	80081d2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d007      	beq.n	80081d2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80081ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f001 f86d 	bl	80092ac <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00c      	beq.n	80081f6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d007      	beq.n	80081f6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80081ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f001 f865 	bl	80092c0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00c      	beq.n	800821a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d007      	beq.n	800821a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f001 f85d 	bl	80092d4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800821a:	bf00      	nop
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
	...

08008224 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008230:	2300      	movs	r3, #0
 8008232:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800823a:	2b01      	cmp	r3, #1
 800823c:	d101      	bne.n	8008242 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800823e:	2302      	movs	r3, #2
 8008240:	e0ff      	b.n	8008442 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2b14      	cmp	r3, #20
 800824e:	f200 80f0 	bhi.w	8008432 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008252:	a201      	add	r2, pc, #4	@ (adr r2, 8008258 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008258:	080082ad 	.word	0x080082ad
 800825c:	08008433 	.word	0x08008433
 8008260:	08008433 	.word	0x08008433
 8008264:	08008433 	.word	0x08008433
 8008268:	080082ed 	.word	0x080082ed
 800826c:	08008433 	.word	0x08008433
 8008270:	08008433 	.word	0x08008433
 8008274:	08008433 	.word	0x08008433
 8008278:	0800832f 	.word	0x0800832f
 800827c:	08008433 	.word	0x08008433
 8008280:	08008433 	.word	0x08008433
 8008284:	08008433 	.word	0x08008433
 8008288:	0800836f 	.word	0x0800836f
 800828c:	08008433 	.word	0x08008433
 8008290:	08008433 	.word	0x08008433
 8008294:	08008433 	.word	0x08008433
 8008298:	080083b1 	.word	0x080083b1
 800829c:	08008433 	.word	0x08008433
 80082a0:	08008433 	.word	0x08008433
 80082a4:	08008433 	.word	0x08008433
 80082a8:	080083f1 	.word	0x080083f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68b9      	ldr	r1, [r7, #8]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 fabc 	bl	8008830 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	699a      	ldr	r2, [r3, #24]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f042 0208 	orr.w	r2, r2, #8
 80082c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	699a      	ldr	r2, [r3, #24]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f022 0204 	bic.w	r2, r2, #4
 80082d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6999      	ldr	r1, [r3, #24]
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	691a      	ldr	r2, [r3, #16]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	430a      	orrs	r2, r1
 80082e8:	619a      	str	r2, [r3, #24]
      break;
 80082ea:	e0a5      	b.n	8008438 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68b9      	ldr	r1, [r7, #8]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 fb36 	bl	8008964 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	699a      	ldr	r2, [r3, #24]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008306:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	699a      	ldr	r2, [r3, #24]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6999      	ldr	r1, [r3, #24]
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	021a      	lsls	r2, r3, #8
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	430a      	orrs	r2, r1
 800832a:	619a      	str	r2, [r3, #24]
      break;
 800832c:	e084      	b.n	8008438 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68b9      	ldr	r1, [r7, #8]
 8008334:	4618      	mov	r0, r3
 8008336:	f000 fba9 	bl	8008a8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	69da      	ldr	r2, [r3, #28]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f042 0208 	orr.w	r2, r2, #8
 8008348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	69da      	ldr	r2, [r3, #28]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f022 0204 	bic.w	r2, r2, #4
 8008358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	69d9      	ldr	r1, [r3, #28]
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	691a      	ldr	r2, [r3, #16]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	430a      	orrs	r2, r1
 800836a:	61da      	str	r2, [r3, #28]
      break;
 800836c:	e064      	b.n	8008438 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68b9      	ldr	r1, [r7, #8]
 8008374:	4618      	mov	r0, r3
 8008376:	f000 fc1b 	bl	8008bb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	69da      	ldr	r2, [r3, #28]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008388:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	69da      	ldr	r2, [r3, #28]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	69d9      	ldr	r1, [r3, #28]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	021a      	lsls	r2, r3, #8
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	430a      	orrs	r2, r1
 80083ac:	61da      	str	r2, [r3, #28]
      break;
 80083ae:	e043      	b.n	8008438 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68b9      	ldr	r1, [r7, #8]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 fc8e 	bl	8008cd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f042 0208 	orr.w	r2, r2, #8
 80083ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f022 0204 	bic.w	r2, r2, #4
 80083da:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	691a      	ldr	r2, [r3, #16]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	430a      	orrs	r2, r1
 80083ec:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80083ee:	e023      	b.n	8008438 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68b9      	ldr	r1, [r7, #8]
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 fcd8 	bl	8008dac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800840a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800841a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	021a      	lsls	r2, r3, #8
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	430a      	orrs	r2, r1
 800842e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008430:	e002      	b.n	8008438 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	75fb      	strb	r3, [r7, #23]
      break;
 8008436:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008440:	7dfb      	ldrb	r3, [r7, #23]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3718      	adds	r7, #24
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop

0800844c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008460:	2b01      	cmp	r3, #1
 8008462:	d101      	bne.n	8008468 <HAL_TIM_ConfigClockSource+0x1c>
 8008464:	2302      	movs	r3, #2
 8008466:	e0f6      	b.n	8008656 <HAL_TIM_ConfigClockSource+0x20a>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2202      	movs	r2, #2
 8008474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008486:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800848a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008492:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a6f      	ldr	r2, [pc, #444]	@ (8008660 <HAL_TIM_ConfigClockSource+0x214>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	f000 80c1 	beq.w	800862a <HAL_TIM_ConfigClockSource+0x1de>
 80084a8:	4a6d      	ldr	r2, [pc, #436]	@ (8008660 <HAL_TIM_ConfigClockSource+0x214>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	f200 80c6 	bhi.w	800863c <HAL_TIM_ConfigClockSource+0x1f0>
 80084b0:	4a6c      	ldr	r2, [pc, #432]	@ (8008664 <HAL_TIM_ConfigClockSource+0x218>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	f000 80b9 	beq.w	800862a <HAL_TIM_ConfigClockSource+0x1de>
 80084b8:	4a6a      	ldr	r2, [pc, #424]	@ (8008664 <HAL_TIM_ConfigClockSource+0x218>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	f200 80be 	bhi.w	800863c <HAL_TIM_ConfigClockSource+0x1f0>
 80084c0:	4a69      	ldr	r2, [pc, #420]	@ (8008668 <HAL_TIM_ConfigClockSource+0x21c>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	f000 80b1 	beq.w	800862a <HAL_TIM_ConfigClockSource+0x1de>
 80084c8:	4a67      	ldr	r2, [pc, #412]	@ (8008668 <HAL_TIM_ConfigClockSource+0x21c>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	f200 80b6 	bhi.w	800863c <HAL_TIM_ConfigClockSource+0x1f0>
 80084d0:	4a66      	ldr	r2, [pc, #408]	@ (800866c <HAL_TIM_ConfigClockSource+0x220>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	f000 80a9 	beq.w	800862a <HAL_TIM_ConfigClockSource+0x1de>
 80084d8:	4a64      	ldr	r2, [pc, #400]	@ (800866c <HAL_TIM_ConfigClockSource+0x220>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	f200 80ae 	bhi.w	800863c <HAL_TIM_ConfigClockSource+0x1f0>
 80084e0:	4a63      	ldr	r2, [pc, #396]	@ (8008670 <HAL_TIM_ConfigClockSource+0x224>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	f000 80a1 	beq.w	800862a <HAL_TIM_ConfigClockSource+0x1de>
 80084e8:	4a61      	ldr	r2, [pc, #388]	@ (8008670 <HAL_TIM_ConfigClockSource+0x224>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	f200 80a6 	bhi.w	800863c <HAL_TIM_ConfigClockSource+0x1f0>
 80084f0:	4a60      	ldr	r2, [pc, #384]	@ (8008674 <HAL_TIM_ConfigClockSource+0x228>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	f000 8099 	beq.w	800862a <HAL_TIM_ConfigClockSource+0x1de>
 80084f8:	4a5e      	ldr	r2, [pc, #376]	@ (8008674 <HAL_TIM_ConfigClockSource+0x228>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	f200 809e 	bhi.w	800863c <HAL_TIM_ConfigClockSource+0x1f0>
 8008500:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008504:	f000 8091 	beq.w	800862a <HAL_TIM_ConfigClockSource+0x1de>
 8008508:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800850c:	f200 8096 	bhi.w	800863c <HAL_TIM_ConfigClockSource+0x1f0>
 8008510:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008514:	f000 8089 	beq.w	800862a <HAL_TIM_ConfigClockSource+0x1de>
 8008518:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800851c:	f200 808e 	bhi.w	800863c <HAL_TIM_ConfigClockSource+0x1f0>
 8008520:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008524:	d03e      	beq.n	80085a4 <HAL_TIM_ConfigClockSource+0x158>
 8008526:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800852a:	f200 8087 	bhi.w	800863c <HAL_TIM_ConfigClockSource+0x1f0>
 800852e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008532:	f000 8086 	beq.w	8008642 <HAL_TIM_ConfigClockSource+0x1f6>
 8008536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800853a:	d87f      	bhi.n	800863c <HAL_TIM_ConfigClockSource+0x1f0>
 800853c:	2b70      	cmp	r3, #112	@ 0x70
 800853e:	d01a      	beq.n	8008576 <HAL_TIM_ConfigClockSource+0x12a>
 8008540:	2b70      	cmp	r3, #112	@ 0x70
 8008542:	d87b      	bhi.n	800863c <HAL_TIM_ConfigClockSource+0x1f0>
 8008544:	2b60      	cmp	r3, #96	@ 0x60
 8008546:	d050      	beq.n	80085ea <HAL_TIM_ConfigClockSource+0x19e>
 8008548:	2b60      	cmp	r3, #96	@ 0x60
 800854a:	d877      	bhi.n	800863c <HAL_TIM_ConfigClockSource+0x1f0>
 800854c:	2b50      	cmp	r3, #80	@ 0x50
 800854e:	d03c      	beq.n	80085ca <HAL_TIM_ConfigClockSource+0x17e>
 8008550:	2b50      	cmp	r3, #80	@ 0x50
 8008552:	d873      	bhi.n	800863c <HAL_TIM_ConfigClockSource+0x1f0>
 8008554:	2b40      	cmp	r3, #64	@ 0x40
 8008556:	d058      	beq.n	800860a <HAL_TIM_ConfigClockSource+0x1be>
 8008558:	2b40      	cmp	r3, #64	@ 0x40
 800855a:	d86f      	bhi.n	800863c <HAL_TIM_ConfigClockSource+0x1f0>
 800855c:	2b30      	cmp	r3, #48	@ 0x30
 800855e:	d064      	beq.n	800862a <HAL_TIM_ConfigClockSource+0x1de>
 8008560:	2b30      	cmp	r3, #48	@ 0x30
 8008562:	d86b      	bhi.n	800863c <HAL_TIM_ConfigClockSource+0x1f0>
 8008564:	2b20      	cmp	r3, #32
 8008566:	d060      	beq.n	800862a <HAL_TIM_ConfigClockSource+0x1de>
 8008568:	2b20      	cmp	r3, #32
 800856a:	d867      	bhi.n	800863c <HAL_TIM_ConfigClockSource+0x1f0>
 800856c:	2b00      	cmp	r3, #0
 800856e:	d05c      	beq.n	800862a <HAL_TIM_ConfigClockSource+0x1de>
 8008570:	2b10      	cmp	r3, #16
 8008572:	d05a      	beq.n	800862a <HAL_TIM_ConfigClockSource+0x1de>
 8008574:	e062      	b.n	800863c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008586:	f000 fcf9 	bl	8008f7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008598:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	609a      	str	r2, [r3, #8]
      break;
 80085a2:	e04f      	b.n	8008644 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085b4:	f000 fce2 	bl	8008f7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	689a      	ldr	r2, [r3, #8]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085c6:	609a      	str	r2, [r3, #8]
      break;
 80085c8:	e03c      	b.n	8008644 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085d6:	461a      	mov	r2, r3
 80085d8:	f000 fc54 	bl	8008e84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2150      	movs	r1, #80	@ 0x50
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 fcad 	bl	8008f42 <TIM_ITRx_SetConfig>
      break;
 80085e8:	e02c      	b.n	8008644 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085f6:	461a      	mov	r2, r3
 80085f8:	f000 fc73 	bl	8008ee2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2160      	movs	r1, #96	@ 0x60
 8008602:	4618      	mov	r0, r3
 8008604:	f000 fc9d 	bl	8008f42 <TIM_ITRx_SetConfig>
      break;
 8008608:	e01c      	b.n	8008644 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008616:	461a      	mov	r2, r3
 8008618:	f000 fc34 	bl	8008e84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2140      	movs	r1, #64	@ 0x40
 8008622:	4618      	mov	r0, r3
 8008624:	f000 fc8d 	bl	8008f42 <TIM_ITRx_SetConfig>
      break;
 8008628:	e00c      	b.n	8008644 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4619      	mov	r1, r3
 8008634:	4610      	mov	r0, r2
 8008636:	f000 fc84 	bl	8008f42 <TIM_ITRx_SetConfig>
      break;
 800863a:	e003      	b.n	8008644 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	73fb      	strb	r3, [r7, #15]
      break;
 8008640:	e000      	b.n	8008644 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008642:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008654:	7bfb      	ldrb	r3, [r7, #15]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	00100070 	.word	0x00100070
 8008664:	00100060 	.word	0x00100060
 8008668:	00100050 	.word	0x00100050
 800866c:	00100040 	.word	0x00100040
 8008670:	00100030 	.word	0x00100030
 8008674:	00100020 	.word	0x00100020

08008678 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086a8:	bf00      	nop
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a4c      	ldr	r2, [pc, #304]	@ (800880c <TIM_Base_SetConfig+0x144>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d017      	beq.n	8008710 <TIM_Base_SetConfig+0x48>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086e6:	d013      	beq.n	8008710 <TIM_Base_SetConfig+0x48>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a49      	ldr	r2, [pc, #292]	@ (8008810 <TIM_Base_SetConfig+0x148>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d00f      	beq.n	8008710 <TIM_Base_SetConfig+0x48>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a48      	ldr	r2, [pc, #288]	@ (8008814 <TIM_Base_SetConfig+0x14c>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d00b      	beq.n	8008710 <TIM_Base_SetConfig+0x48>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a47      	ldr	r2, [pc, #284]	@ (8008818 <TIM_Base_SetConfig+0x150>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d007      	beq.n	8008710 <TIM_Base_SetConfig+0x48>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a46      	ldr	r2, [pc, #280]	@ (800881c <TIM_Base_SetConfig+0x154>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d003      	beq.n	8008710 <TIM_Base_SetConfig+0x48>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a45      	ldr	r2, [pc, #276]	@ (8008820 <TIM_Base_SetConfig+0x158>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d108      	bne.n	8008722 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	4313      	orrs	r3, r2
 8008720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a39      	ldr	r2, [pc, #228]	@ (800880c <TIM_Base_SetConfig+0x144>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d023      	beq.n	8008772 <TIM_Base_SetConfig+0xaa>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008730:	d01f      	beq.n	8008772 <TIM_Base_SetConfig+0xaa>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a36      	ldr	r2, [pc, #216]	@ (8008810 <TIM_Base_SetConfig+0x148>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d01b      	beq.n	8008772 <TIM_Base_SetConfig+0xaa>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a35      	ldr	r2, [pc, #212]	@ (8008814 <TIM_Base_SetConfig+0x14c>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d017      	beq.n	8008772 <TIM_Base_SetConfig+0xaa>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a34      	ldr	r2, [pc, #208]	@ (8008818 <TIM_Base_SetConfig+0x150>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d013      	beq.n	8008772 <TIM_Base_SetConfig+0xaa>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a33      	ldr	r2, [pc, #204]	@ (800881c <TIM_Base_SetConfig+0x154>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d00f      	beq.n	8008772 <TIM_Base_SetConfig+0xaa>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a33      	ldr	r2, [pc, #204]	@ (8008824 <TIM_Base_SetConfig+0x15c>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d00b      	beq.n	8008772 <TIM_Base_SetConfig+0xaa>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a32      	ldr	r2, [pc, #200]	@ (8008828 <TIM_Base_SetConfig+0x160>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d007      	beq.n	8008772 <TIM_Base_SetConfig+0xaa>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a31      	ldr	r2, [pc, #196]	@ (800882c <TIM_Base_SetConfig+0x164>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d003      	beq.n	8008772 <TIM_Base_SetConfig+0xaa>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a2c      	ldr	r2, [pc, #176]	@ (8008820 <TIM_Base_SetConfig+0x158>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d108      	bne.n	8008784 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	4313      	orrs	r3, r2
 8008782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	4313      	orrs	r3, r2
 8008790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	689a      	ldr	r2, [r3, #8]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a18      	ldr	r2, [pc, #96]	@ (800880c <TIM_Base_SetConfig+0x144>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d013      	beq.n	80087d8 <TIM_Base_SetConfig+0x110>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a1a      	ldr	r2, [pc, #104]	@ (800881c <TIM_Base_SetConfig+0x154>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d00f      	beq.n	80087d8 <TIM_Base_SetConfig+0x110>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a1a      	ldr	r2, [pc, #104]	@ (8008824 <TIM_Base_SetConfig+0x15c>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d00b      	beq.n	80087d8 <TIM_Base_SetConfig+0x110>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a19      	ldr	r2, [pc, #100]	@ (8008828 <TIM_Base_SetConfig+0x160>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d007      	beq.n	80087d8 <TIM_Base_SetConfig+0x110>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a18      	ldr	r2, [pc, #96]	@ (800882c <TIM_Base_SetConfig+0x164>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d003      	beq.n	80087d8 <TIM_Base_SetConfig+0x110>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a13      	ldr	r2, [pc, #76]	@ (8008820 <TIM_Base_SetConfig+0x158>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d103      	bne.n	80087e0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	691a      	ldr	r2, [r3, #16]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	f003 0301 	and.w	r3, r3, #1
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d105      	bne.n	80087fe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	f023 0201 	bic.w	r2, r3, #1
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	611a      	str	r2, [r3, #16]
  }
}
 80087fe:	bf00      	nop
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	40012c00 	.word	0x40012c00
 8008810:	40000400 	.word	0x40000400
 8008814:	40000800 	.word	0x40000800
 8008818:	40000c00 	.word	0x40000c00
 800881c:	40013400 	.word	0x40013400
 8008820:	40015000 	.word	0x40015000
 8008824:	40014000 	.word	0x40014000
 8008828:	40014400 	.word	0x40014400
 800882c:	40014800 	.word	0x40014800

08008830 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008830:	b480      	push	{r7}
 8008832:	b087      	sub	sp, #28
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a1b      	ldr	r3, [r3, #32]
 8008844:	f023 0201 	bic.w	r2, r3, #1
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	699b      	ldr	r3, [r3, #24]
 8008856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800885e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f023 0303 	bic.w	r3, r3, #3
 800886a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	4313      	orrs	r3, r2
 8008874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f023 0302 	bic.w	r3, r3, #2
 800887c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	697a      	ldr	r2, [r7, #20]
 8008884:	4313      	orrs	r3, r2
 8008886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a30      	ldr	r2, [pc, #192]	@ (800894c <TIM_OC1_SetConfig+0x11c>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d013      	beq.n	80088b8 <TIM_OC1_SetConfig+0x88>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a2f      	ldr	r2, [pc, #188]	@ (8008950 <TIM_OC1_SetConfig+0x120>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d00f      	beq.n	80088b8 <TIM_OC1_SetConfig+0x88>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a2e      	ldr	r2, [pc, #184]	@ (8008954 <TIM_OC1_SetConfig+0x124>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d00b      	beq.n	80088b8 <TIM_OC1_SetConfig+0x88>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a2d      	ldr	r2, [pc, #180]	@ (8008958 <TIM_OC1_SetConfig+0x128>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d007      	beq.n	80088b8 <TIM_OC1_SetConfig+0x88>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a2c      	ldr	r2, [pc, #176]	@ (800895c <TIM_OC1_SetConfig+0x12c>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d003      	beq.n	80088b8 <TIM_OC1_SetConfig+0x88>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a2b      	ldr	r2, [pc, #172]	@ (8008960 <TIM_OC1_SetConfig+0x130>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d10c      	bne.n	80088d2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	f023 0308 	bic.w	r3, r3, #8
 80088be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	697a      	ldr	r2, [r7, #20]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	f023 0304 	bic.w	r3, r3, #4
 80088d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4a1d      	ldr	r2, [pc, #116]	@ (800894c <TIM_OC1_SetConfig+0x11c>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d013      	beq.n	8008902 <TIM_OC1_SetConfig+0xd2>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4a1c      	ldr	r2, [pc, #112]	@ (8008950 <TIM_OC1_SetConfig+0x120>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d00f      	beq.n	8008902 <TIM_OC1_SetConfig+0xd2>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a1b      	ldr	r2, [pc, #108]	@ (8008954 <TIM_OC1_SetConfig+0x124>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d00b      	beq.n	8008902 <TIM_OC1_SetConfig+0xd2>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a1a      	ldr	r2, [pc, #104]	@ (8008958 <TIM_OC1_SetConfig+0x128>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d007      	beq.n	8008902 <TIM_OC1_SetConfig+0xd2>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a19      	ldr	r2, [pc, #100]	@ (800895c <TIM_OC1_SetConfig+0x12c>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d003      	beq.n	8008902 <TIM_OC1_SetConfig+0xd2>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a18      	ldr	r2, [pc, #96]	@ (8008960 <TIM_OC1_SetConfig+0x130>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d111      	bne.n	8008926 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	693a      	ldr	r2, [r7, #16]
 8008918:	4313      	orrs	r3, r2
 800891a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	699b      	ldr	r3, [r3, #24]
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	4313      	orrs	r3, r2
 8008924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	693a      	ldr	r2, [r7, #16]
 800892a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	685a      	ldr	r2, [r3, #4]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	621a      	str	r2, [r3, #32]
}
 8008940:	bf00      	nop
 8008942:	371c      	adds	r7, #28
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	40012c00 	.word	0x40012c00
 8008950:	40013400 	.word	0x40013400
 8008954:	40014000 	.word	0x40014000
 8008958:	40014400 	.word	0x40014400
 800895c:	40014800 	.word	0x40014800
 8008960:	40015000 	.word	0x40015000

08008964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008964:	b480      	push	{r7}
 8008966:	b087      	sub	sp, #28
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a1b      	ldr	r3, [r3, #32]
 8008972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a1b      	ldr	r3, [r3, #32]
 8008978:	f023 0210 	bic.w	r2, r3, #16
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008992:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800899e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	021b      	lsls	r3, r3, #8
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	f023 0320 	bic.w	r3, r3, #32
 80089b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	011b      	lsls	r3, r3, #4
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	4313      	orrs	r3, r2
 80089be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a2c      	ldr	r2, [pc, #176]	@ (8008a74 <TIM_OC2_SetConfig+0x110>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d007      	beq.n	80089d8 <TIM_OC2_SetConfig+0x74>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a2b      	ldr	r2, [pc, #172]	@ (8008a78 <TIM_OC2_SetConfig+0x114>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d003      	beq.n	80089d8 <TIM_OC2_SetConfig+0x74>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a2a      	ldr	r2, [pc, #168]	@ (8008a7c <TIM_OC2_SetConfig+0x118>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d10d      	bne.n	80089f4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	011b      	lsls	r3, r3, #4
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a1f      	ldr	r2, [pc, #124]	@ (8008a74 <TIM_OC2_SetConfig+0x110>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d013      	beq.n	8008a24 <TIM_OC2_SetConfig+0xc0>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a1e      	ldr	r2, [pc, #120]	@ (8008a78 <TIM_OC2_SetConfig+0x114>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d00f      	beq.n	8008a24 <TIM_OC2_SetConfig+0xc0>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a1e      	ldr	r2, [pc, #120]	@ (8008a80 <TIM_OC2_SetConfig+0x11c>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d00b      	beq.n	8008a24 <TIM_OC2_SetConfig+0xc0>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a1d      	ldr	r2, [pc, #116]	@ (8008a84 <TIM_OC2_SetConfig+0x120>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d007      	beq.n	8008a24 <TIM_OC2_SetConfig+0xc0>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a1c      	ldr	r2, [pc, #112]	@ (8008a88 <TIM_OC2_SetConfig+0x124>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d003      	beq.n	8008a24 <TIM_OC2_SetConfig+0xc0>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a17      	ldr	r2, [pc, #92]	@ (8008a7c <TIM_OC2_SetConfig+0x118>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d113      	bne.n	8008a4c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	695b      	ldr	r3, [r3, #20]
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	693a      	ldr	r2, [r7, #16]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	697a      	ldr	r2, [r7, #20]
 8008a64:	621a      	str	r2, [r3, #32]
}
 8008a66:	bf00      	nop
 8008a68:	371c      	adds	r7, #28
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	40012c00 	.word	0x40012c00
 8008a78:	40013400 	.word	0x40013400
 8008a7c:	40015000 	.word	0x40015000
 8008a80:	40014000 	.word	0x40014000
 8008a84:	40014400 	.word	0x40014400
 8008a88:	40014800 	.word	0x40014800

08008a8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b087      	sub	sp, #28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a1b      	ldr	r3, [r3, #32]
 8008a9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a1b      	ldr	r3, [r3, #32]
 8008aa0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f023 0303 	bic.w	r3, r3, #3
 8008ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	021b      	lsls	r3, r3, #8
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a2b      	ldr	r2, [pc, #172]	@ (8008b98 <TIM_OC3_SetConfig+0x10c>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d007      	beq.n	8008afe <TIM_OC3_SetConfig+0x72>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a2a      	ldr	r2, [pc, #168]	@ (8008b9c <TIM_OC3_SetConfig+0x110>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d003      	beq.n	8008afe <TIM_OC3_SetConfig+0x72>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a29      	ldr	r2, [pc, #164]	@ (8008ba0 <TIM_OC3_SetConfig+0x114>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d10d      	bne.n	8008b1a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	021b      	lsls	r3, r3, #8
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a1e      	ldr	r2, [pc, #120]	@ (8008b98 <TIM_OC3_SetConfig+0x10c>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d013      	beq.n	8008b4a <TIM_OC3_SetConfig+0xbe>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a1d      	ldr	r2, [pc, #116]	@ (8008b9c <TIM_OC3_SetConfig+0x110>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d00f      	beq.n	8008b4a <TIM_OC3_SetConfig+0xbe>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ba4 <TIM_OC3_SetConfig+0x118>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d00b      	beq.n	8008b4a <TIM_OC3_SetConfig+0xbe>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a1c      	ldr	r2, [pc, #112]	@ (8008ba8 <TIM_OC3_SetConfig+0x11c>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d007      	beq.n	8008b4a <TIM_OC3_SetConfig+0xbe>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8008bac <TIM_OC3_SetConfig+0x120>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d003      	beq.n	8008b4a <TIM_OC3_SetConfig+0xbe>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a16      	ldr	r2, [pc, #88]	@ (8008ba0 <TIM_OC3_SetConfig+0x114>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d113      	bne.n	8008b72 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	695b      	ldr	r3, [r3, #20]
 8008b5e:	011b      	lsls	r3, r3, #4
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	699b      	ldr	r3, [r3, #24]
 8008b6a:	011b      	lsls	r3, r3, #4
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	685a      	ldr	r2, [r3, #4]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	697a      	ldr	r2, [r7, #20]
 8008b8a:	621a      	str	r2, [r3, #32]
}
 8008b8c:	bf00      	nop
 8008b8e:	371c      	adds	r7, #28
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr
 8008b98:	40012c00 	.word	0x40012c00
 8008b9c:	40013400 	.word	0x40013400
 8008ba0:	40015000 	.word	0x40015000
 8008ba4:	40014000 	.word	0x40014000
 8008ba8:	40014400 	.word	0x40014400
 8008bac:	40014800 	.word	0x40014800

08008bb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b087      	sub	sp, #28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a1b      	ldr	r3, [r3, #32]
 8008bc4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	69db      	ldr	r3, [r3, #28]
 8008bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008bde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	021b      	lsls	r3, r3, #8
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008bfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	031b      	lsls	r3, r3, #12
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a2c      	ldr	r2, [pc, #176]	@ (8008cc0 <TIM_OC4_SetConfig+0x110>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d007      	beq.n	8008c24 <TIM_OC4_SetConfig+0x74>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a2b      	ldr	r2, [pc, #172]	@ (8008cc4 <TIM_OC4_SetConfig+0x114>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d003      	beq.n	8008c24 <TIM_OC4_SetConfig+0x74>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8008cc8 <TIM_OC4_SetConfig+0x118>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d10d      	bne.n	8008c40 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	031b      	lsls	r3, r3, #12
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a1f      	ldr	r2, [pc, #124]	@ (8008cc0 <TIM_OC4_SetConfig+0x110>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d013      	beq.n	8008c70 <TIM_OC4_SetConfig+0xc0>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a1e      	ldr	r2, [pc, #120]	@ (8008cc4 <TIM_OC4_SetConfig+0x114>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d00f      	beq.n	8008c70 <TIM_OC4_SetConfig+0xc0>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a1e      	ldr	r2, [pc, #120]	@ (8008ccc <TIM_OC4_SetConfig+0x11c>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d00b      	beq.n	8008c70 <TIM_OC4_SetConfig+0xc0>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4a1d      	ldr	r2, [pc, #116]	@ (8008cd0 <TIM_OC4_SetConfig+0x120>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d007      	beq.n	8008c70 <TIM_OC4_SetConfig+0xc0>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a1c      	ldr	r2, [pc, #112]	@ (8008cd4 <TIM_OC4_SetConfig+0x124>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d003      	beq.n	8008c70 <TIM_OC4_SetConfig+0xc0>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a17      	ldr	r2, [pc, #92]	@ (8008cc8 <TIM_OC4_SetConfig+0x118>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d113      	bne.n	8008c98 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c76:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008c7e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	695b      	ldr	r3, [r3, #20]
 8008c84:	019b      	lsls	r3, r3, #6
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	019b      	lsls	r3, r3, #6
 8008c92:	693a      	ldr	r2, [r7, #16]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	685a      	ldr	r2, [r3, #4]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	697a      	ldr	r2, [r7, #20]
 8008cb0:	621a      	str	r2, [r3, #32]
}
 8008cb2:	bf00      	nop
 8008cb4:	371c      	adds	r7, #28
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	40012c00 	.word	0x40012c00
 8008cc4:	40013400 	.word	0x40013400
 8008cc8:	40015000 	.word	0x40015000
 8008ccc:	40014000 	.word	0x40014000
 8008cd0:	40014400 	.word	0x40014400
 8008cd4:	40014800 	.word	0x40014800

08008cd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a1b      	ldr	r3, [r3, #32]
 8008cec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008d1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	041b      	lsls	r3, r3, #16
 8008d24:	693a      	ldr	r2, [r7, #16]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a19      	ldr	r2, [pc, #100]	@ (8008d94 <TIM_OC5_SetConfig+0xbc>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d013      	beq.n	8008d5a <TIM_OC5_SetConfig+0x82>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a18      	ldr	r2, [pc, #96]	@ (8008d98 <TIM_OC5_SetConfig+0xc0>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d00f      	beq.n	8008d5a <TIM_OC5_SetConfig+0x82>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a17      	ldr	r2, [pc, #92]	@ (8008d9c <TIM_OC5_SetConfig+0xc4>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d00b      	beq.n	8008d5a <TIM_OC5_SetConfig+0x82>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a16      	ldr	r2, [pc, #88]	@ (8008da0 <TIM_OC5_SetConfig+0xc8>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d007      	beq.n	8008d5a <TIM_OC5_SetConfig+0x82>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a15      	ldr	r2, [pc, #84]	@ (8008da4 <TIM_OC5_SetConfig+0xcc>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d003      	beq.n	8008d5a <TIM_OC5_SetConfig+0x82>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a14      	ldr	r2, [pc, #80]	@ (8008da8 <TIM_OC5_SetConfig+0xd0>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d109      	bne.n	8008d6e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	695b      	ldr	r3, [r3, #20]
 8008d66:	021b      	lsls	r3, r3, #8
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	697a      	ldr	r2, [r7, #20]
 8008d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	685a      	ldr	r2, [r3, #4]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	693a      	ldr	r2, [r7, #16]
 8008d86:	621a      	str	r2, [r3, #32]
}
 8008d88:	bf00      	nop
 8008d8a:	371c      	adds	r7, #28
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr
 8008d94:	40012c00 	.word	0x40012c00
 8008d98:	40013400 	.word	0x40013400
 8008d9c:	40014000 	.word	0x40014000
 8008da0:	40014400 	.word	0x40014400
 8008da4:	40014800 	.word	0x40014800
 8008da8:	40015000 	.word	0x40015000

08008dac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b087      	sub	sp, #28
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a1b      	ldr	r3, [r3, #32]
 8008dba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a1b      	ldr	r3, [r3, #32]
 8008dc0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008dda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	021b      	lsls	r3, r3, #8
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008df2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	051b      	lsls	r3, r3, #20
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a1a      	ldr	r2, [pc, #104]	@ (8008e6c <TIM_OC6_SetConfig+0xc0>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d013      	beq.n	8008e30 <TIM_OC6_SetConfig+0x84>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a19      	ldr	r2, [pc, #100]	@ (8008e70 <TIM_OC6_SetConfig+0xc4>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d00f      	beq.n	8008e30 <TIM_OC6_SetConfig+0x84>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a18      	ldr	r2, [pc, #96]	@ (8008e74 <TIM_OC6_SetConfig+0xc8>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d00b      	beq.n	8008e30 <TIM_OC6_SetConfig+0x84>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a17      	ldr	r2, [pc, #92]	@ (8008e78 <TIM_OC6_SetConfig+0xcc>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d007      	beq.n	8008e30 <TIM_OC6_SetConfig+0x84>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a16      	ldr	r2, [pc, #88]	@ (8008e7c <TIM_OC6_SetConfig+0xd0>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d003      	beq.n	8008e30 <TIM_OC6_SetConfig+0x84>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a15      	ldr	r2, [pc, #84]	@ (8008e80 <TIM_OC6_SetConfig+0xd4>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d109      	bne.n	8008e44 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	695b      	ldr	r3, [r3, #20]
 8008e3c:	029b      	lsls	r3, r3, #10
 8008e3e:	697a      	ldr	r2, [r7, #20]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	697a      	ldr	r2, [r7, #20]
 8008e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	685a      	ldr	r2, [r3, #4]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	693a      	ldr	r2, [r7, #16]
 8008e5c:	621a      	str	r2, [r3, #32]
}
 8008e5e:	bf00      	nop
 8008e60:	371c      	adds	r7, #28
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	40012c00 	.word	0x40012c00
 8008e70:	40013400 	.word	0x40013400
 8008e74:	40014000 	.word	0x40014000
 8008e78:	40014400 	.word	0x40014400
 8008e7c:	40014800 	.word	0x40014800
 8008e80:	40015000 	.word	0x40015000

08008e84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b087      	sub	sp, #28
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6a1b      	ldr	r3, [r3, #32]
 8008e94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6a1b      	ldr	r3, [r3, #32]
 8008e9a:	f023 0201 	bic.w	r2, r3, #1
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008eae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	011b      	lsls	r3, r3, #4
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f023 030a 	bic.w	r3, r3, #10
 8008ec0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ec2:	697a      	ldr	r2, [r7, #20]
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	621a      	str	r2, [r3, #32]
}
 8008ed6:	bf00      	nop
 8008ed8:	371c      	adds	r7, #28
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	b087      	sub	sp, #28
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	60f8      	str	r0, [r7, #12]
 8008eea:	60b9      	str	r1, [r7, #8]
 8008eec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6a1b      	ldr	r3, [r3, #32]
 8008ef8:	f023 0210 	bic.w	r2, r3, #16
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	699b      	ldr	r3, [r3, #24]
 8008f04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	031b      	lsls	r3, r3, #12
 8008f12:	693a      	ldr	r2, [r7, #16]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008f1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	011b      	lsls	r3, r3, #4
 8008f24:	697a      	ldr	r2, [r7, #20]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	697a      	ldr	r2, [r7, #20]
 8008f34:	621a      	str	r2, [r3, #32]
}
 8008f36:	bf00      	nop
 8008f38:	371c      	adds	r7, #28
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b085      	sub	sp, #20
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008f58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f5e:	683a      	ldr	r2, [r7, #0]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	f043 0307 	orr.w	r3, r3, #7
 8008f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	609a      	str	r2, [r3, #8]
}
 8008f70:	bf00      	nop
 8008f72:	3714      	adds	r7, #20
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b087      	sub	sp, #28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
 8008f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	021a      	lsls	r2, r3, #8
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	431a      	orrs	r2, r3
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	697a      	ldr	r2, [r7, #20]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	609a      	str	r2, [r3, #8]
}
 8008fb0:	bf00      	nop
 8008fb2:	371c      	adds	r7, #28
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b087      	sub	sp, #28
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	f003 031f 	and.w	r3, r3, #31
 8008fce:	2201      	movs	r2, #1
 8008fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6a1a      	ldr	r2, [r3, #32]
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	43db      	mvns	r3, r3
 8008fde:	401a      	ands	r2, r3
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6a1a      	ldr	r2, [r3, #32]
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	f003 031f 	and.w	r3, r3, #31
 8008fee:	6879      	ldr	r1, [r7, #4]
 8008ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ff4:	431a      	orrs	r2, r3
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	621a      	str	r2, [r3, #32]
}
 8008ffa:	bf00      	nop
 8008ffc:	371c      	adds	r7, #28
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
	...

08009008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009018:	2b01      	cmp	r3, #1
 800901a:	d101      	bne.n	8009020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800901c:	2302      	movs	r3, #2
 800901e:	e074      	b.n	800910a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2202      	movs	r2, #2
 800902c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a34      	ldr	r2, [pc, #208]	@ (8009118 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d009      	beq.n	800905e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a33      	ldr	r2, [pc, #204]	@ (800911c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d004      	beq.n	800905e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a31      	ldr	r2, [pc, #196]	@ (8009120 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d108      	bne.n	8009070 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009064:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	4313      	orrs	r3, r2
 800906e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800907a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	4313      	orrs	r3, r2
 8009084:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a21      	ldr	r2, [pc, #132]	@ (8009118 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d022      	beq.n	80090de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090a0:	d01d      	beq.n	80090de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a1f      	ldr	r2, [pc, #124]	@ (8009124 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d018      	beq.n	80090de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a1d      	ldr	r2, [pc, #116]	@ (8009128 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d013      	beq.n	80090de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a1c      	ldr	r2, [pc, #112]	@ (800912c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d00e      	beq.n	80090de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a15      	ldr	r2, [pc, #84]	@ (800911c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d009      	beq.n	80090de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a18      	ldr	r2, [pc, #96]	@ (8009130 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d004      	beq.n	80090de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a11      	ldr	r2, [pc, #68]	@ (8009120 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d10c      	bne.n	80090f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	68ba      	ldr	r2, [r7, #8]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68ba      	ldr	r2, [r7, #8]
 80090f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	40012c00 	.word	0x40012c00
 800911c:	40013400 	.word	0x40013400
 8009120:	40015000 	.word	0x40015000
 8009124:	40000400 	.word	0x40000400
 8009128:	40000800 	.word	0x40000800
 800912c:	40000c00 	.word	0x40000c00
 8009130:	40014000 	.word	0x40014000

08009134 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800913e:	2300      	movs	r3, #0
 8009140:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009148:	2b01      	cmp	r3, #1
 800914a:	d101      	bne.n	8009150 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800914c:	2302      	movs	r3, #2
 800914e:	e078      	b.n	8009242 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	4313      	orrs	r3, r2
 8009164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	4313      	orrs	r3, r2
 8009172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	4313      	orrs	r3, r2
 8009180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4313      	orrs	r3, r2
 800918e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	4313      	orrs	r3, r2
 800919c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	695b      	ldr	r3, [r3, #20]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091b6:	4313      	orrs	r3, r2
 80091b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	041b      	lsls	r3, r3, #16
 80091c6:	4313      	orrs	r3, r2
 80091c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	69db      	ldr	r3, [r3, #28]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a1c      	ldr	r2, [pc, #112]	@ (8009250 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d009      	beq.n	80091f6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a1b      	ldr	r2, [pc, #108]	@ (8009254 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d004      	beq.n	80091f6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a19      	ldr	r2, [pc, #100]	@ (8009258 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d11c      	bne.n	8009230 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009200:	051b      	lsls	r3, r3, #20
 8009202:	4313      	orrs	r3, r2
 8009204:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	6a1b      	ldr	r3, [r3, #32]
 8009210:	4313      	orrs	r3, r2
 8009212:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800921e:	4313      	orrs	r3, r2
 8009220:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800922c:	4313      	orrs	r3, r2
 800922e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3714      	adds	r7, #20
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	40012c00 	.word	0x40012c00
 8009254:	40013400 	.word	0x40013400
 8009258:	40015000 	.word	0x40015000

0800925c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009264:	bf00      	nop
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009278:	bf00      	nop
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800928c:	bf00      	nop
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80092a0:	bf00      	nop
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80092b4:	bf00      	nop
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80092dc:	bf00      	nop
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d101      	bne.n	80092fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e042      	b.n	8009380 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009300:	2b00      	cmp	r3, #0
 8009302:	d106      	bne.n	8009312 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f7f9 fd4f 	bl	8002db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2224      	movs	r2, #36	@ 0x24
 8009316:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f022 0201 	bic.w	r2, r2, #1
 8009328:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800932e:	2b00      	cmp	r3, #0
 8009330:	d002      	beq.n	8009338 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 ff66 	bl	800a204 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 fc67 	bl	8009c0c <UART_SetConfig>
 800933e:	4603      	mov	r3, r0
 8009340:	2b01      	cmp	r3, #1
 8009342:	d101      	bne.n	8009348 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	e01b      	b.n	8009380 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	685a      	ldr	r2, [r3, #4]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009356:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	689a      	ldr	r2, [r3, #8]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009366:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f042 0201 	orr.w	r2, r2, #1
 8009376:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 ffe5 	bl	800a348 <UART_CheckIdleState>
 800937e:	4603      	mov	r3, r0
}
 8009380:	4618      	mov	r0, r3
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b08a      	sub	sp, #40	@ 0x28
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	4613      	mov	r3, r2
 8009394:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800939c:	2b20      	cmp	r3, #32
 800939e:	d167      	bne.n	8009470 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d002      	beq.n	80093ac <HAL_UART_Transmit_DMA+0x24>
 80093a6:	88fb      	ldrh	r3, [r7, #6]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d101      	bne.n	80093b0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	e060      	b.n	8009472 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	88fa      	ldrh	r2, [r7, #6]
 80093ba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	88fa      	ldrh	r2, [r7, #6]
 80093c2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2221      	movs	r2, #33	@ 0x21
 80093d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d028      	beq.n	8009430 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093e2:	4a26      	ldr	r2, [pc, #152]	@ (800947c <HAL_UART_Transmit_DMA+0xf4>)
 80093e4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093ea:	4a25      	ldr	r2, [pc, #148]	@ (8009480 <HAL_UART_Transmit_DMA+0xf8>)
 80093ec:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093f2:	4a24      	ldr	r2, [pc, #144]	@ (8009484 <HAL_UART_Transmit_DMA+0xfc>)
 80093f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093fa:	2200      	movs	r2, #0
 80093fc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009406:	4619      	mov	r1, r3
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	3328      	adds	r3, #40	@ 0x28
 800940e:	461a      	mov	r2, r3
 8009410:	88fb      	ldrh	r3, [r7, #6]
 8009412:	f7fb fe1b 	bl	800504c <HAL_DMA_Start_IT>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d009      	beq.n	8009430 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2210      	movs	r2, #16
 8009420:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2220      	movs	r2, #32
 8009428:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	e020      	b.n	8009472 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2240      	movs	r2, #64	@ 0x40
 8009436:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	3308      	adds	r3, #8
 800943e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	e853 3f00 	ldrex	r3, [r3]
 8009446:	613b      	str	r3, [r7, #16]
   return(result);
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800944e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	3308      	adds	r3, #8
 8009456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009458:	623a      	str	r2, [r7, #32]
 800945a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945c:	69f9      	ldr	r1, [r7, #28]
 800945e:	6a3a      	ldr	r2, [r7, #32]
 8009460:	e841 2300 	strex	r3, r2, [r1]
 8009464:	61bb      	str	r3, [r7, #24]
   return(result);
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d1e5      	bne.n	8009438 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800946c:	2300      	movs	r3, #0
 800946e:	e000      	b.n	8009472 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009470:	2302      	movs	r3, #2
  }
}
 8009472:	4618      	mov	r0, r3
 8009474:	3728      	adds	r7, #40	@ 0x28
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	0800a813 	.word	0x0800a813
 8009480:	0800a8ad 	.word	0x0800a8ad
 8009484:	0800aa33 	.word	0x0800aa33

08009488 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b08a      	sub	sp, #40	@ 0x28
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	4613      	mov	r3, r2
 8009494:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800949c:	2b20      	cmp	r3, #32
 800949e:	d137      	bne.n	8009510 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d002      	beq.n	80094ac <HAL_UART_Receive_DMA+0x24>
 80094a6:	88fb      	ldrh	r3, [r7, #6]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d101      	bne.n	80094b0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	e030      	b.n	8009512 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2200      	movs	r2, #0
 80094b4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a18      	ldr	r2, [pc, #96]	@ (800951c <HAL_UART_Receive_DMA+0x94>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d01f      	beq.n	8009500 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d018      	beq.n	8009500 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	e853 3f00 	ldrex	r3, [r3]
 80094da:	613b      	str	r3, [r7, #16]
   return(result);
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80094e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	461a      	mov	r2, r3
 80094ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ec:	623b      	str	r3, [r7, #32]
 80094ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f0:	69f9      	ldr	r1, [r7, #28]
 80094f2:	6a3a      	ldr	r2, [r7, #32]
 80094f4:	e841 2300 	strex	r3, r2, [r1]
 80094f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1e6      	bne.n	80094ce <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009500:	88fb      	ldrh	r3, [r7, #6]
 8009502:	461a      	mov	r2, r3
 8009504:	68b9      	ldr	r1, [r7, #8]
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f001 f836 	bl	800a578 <UART_Start_Receive_DMA>
 800950c:	4603      	mov	r3, r0
 800950e:	e000      	b.n	8009512 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009510:	2302      	movs	r3, #2
  }
}
 8009512:	4618      	mov	r0, r3
 8009514:	3728      	adds	r7, #40	@ 0x28
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	40008000 	.word	0x40008000

08009520 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b0ba      	sub	sp, #232	@ 0xe8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	69db      	ldr	r3, [r3, #28]
 800952e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009546:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800954a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800954e:	4013      	ands	r3, r2
 8009550:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009554:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009558:	2b00      	cmp	r3, #0
 800955a:	d11b      	bne.n	8009594 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800955c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009560:	f003 0320 	and.w	r3, r3, #32
 8009564:	2b00      	cmp	r3, #0
 8009566:	d015      	beq.n	8009594 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800956c:	f003 0320 	and.w	r3, r3, #32
 8009570:	2b00      	cmp	r3, #0
 8009572:	d105      	bne.n	8009580 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800957c:	2b00      	cmp	r3, #0
 800957e:	d009      	beq.n	8009594 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009584:	2b00      	cmp	r3, #0
 8009586:	f000 8300 	beq.w	8009b8a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	4798      	blx	r3
      }
      return;
 8009592:	e2fa      	b.n	8009b8a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009594:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009598:	2b00      	cmp	r3, #0
 800959a:	f000 8123 	beq.w	80097e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800959e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80095a2:	4b8d      	ldr	r3, [pc, #564]	@ (80097d8 <HAL_UART_IRQHandler+0x2b8>)
 80095a4:	4013      	ands	r3, r2
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d106      	bne.n	80095b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80095aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80095ae:	4b8b      	ldr	r3, [pc, #556]	@ (80097dc <HAL_UART_IRQHandler+0x2bc>)
 80095b0:	4013      	ands	r3, r2
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f000 8116 	beq.w	80097e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80095b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095bc:	f003 0301 	and.w	r3, r3, #1
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d011      	beq.n	80095e8 <HAL_UART_IRQHandler+0xc8>
 80095c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00b      	beq.n	80095e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2201      	movs	r2, #1
 80095d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095de:	f043 0201 	orr.w	r2, r3, #1
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095ec:	f003 0302 	and.w	r3, r3, #2
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d011      	beq.n	8009618 <HAL_UART_IRQHandler+0xf8>
 80095f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095f8:	f003 0301 	and.w	r3, r3, #1
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00b      	beq.n	8009618 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2202      	movs	r2, #2
 8009606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800960e:	f043 0204 	orr.w	r2, r3, #4
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800961c:	f003 0304 	and.w	r3, r3, #4
 8009620:	2b00      	cmp	r3, #0
 8009622:	d011      	beq.n	8009648 <HAL_UART_IRQHandler+0x128>
 8009624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009628:	f003 0301 	and.w	r3, r3, #1
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00b      	beq.n	8009648 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2204      	movs	r2, #4
 8009636:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800963e:	f043 0202 	orr.w	r2, r3, #2
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800964c:	f003 0308 	and.w	r3, r3, #8
 8009650:	2b00      	cmp	r3, #0
 8009652:	d017      	beq.n	8009684 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009658:	f003 0320 	and.w	r3, r3, #32
 800965c:	2b00      	cmp	r3, #0
 800965e:	d105      	bne.n	800966c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009660:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009664:	4b5c      	ldr	r3, [pc, #368]	@ (80097d8 <HAL_UART_IRQHandler+0x2b8>)
 8009666:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00b      	beq.n	8009684 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2208      	movs	r2, #8
 8009672:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800967a:	f043 0208 	orr.w	r2, r3, #8
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009688:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800968c:	2b00      	cmp	r3, #0
 800968e:	d012      	beq.n	80096b6 <HAL_UART_IRQHandler+0x196>
 8009690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009694:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00c      	beq.n	80096b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80096a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096ac:	f043 0220 	orr.w	r2, r3, #32
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f000 8266 	beq.w	8009b8e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80096c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096c6:	f003 0320 	and.w	r3, r3, #32
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d013      	beq.n	80096f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80096ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096d2:	f003 0320 	and.w	r3, r3, #32
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d105      	bne.n	80096e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80096da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d007      	beq.n	80096f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d003      	beq.n	80096f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800970a:	2b40      	cmp	r3, #64	@ 0x40
 800970c:	d005      	beq.n	800971a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800970e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009712:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009716:	2b00      	cmp	r3, #0
 8009718:	d054      	beq.n	80097c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f001 f813 	bl	800a746 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800972a:	2b40      	cmp	r3, #64	@ 0x40
 800972c:	d146      	bne.n	80097bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	3308      	adds	r3, #8
 8009734:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009738:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800973c:	e853 3f00 	ldrex	r3, [r3]
 8009740:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009744:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009748:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800974c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	3308      	adds	r3, #8
 8009756:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800975a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800975e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009762:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009766:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800976a:	e841 2300 	strex	r3, r2, [r1]
 800976e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009772:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1d9      	bne.n	800972e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009780:	2b00      	cmp	r3, #0
 8009782:	d017      	beq.n	80097b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800978a:	4a15      	ldr	r2, [pc, #84]	@ (80097e0 <HAL_UART_IRQHandler+0x2c0>)
 800978c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009794:	4618      	mov	r0, r3
 8009796:	f7fb fd2d 	bl	80051f4 <HAL_DMA_Abort_IT>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d019      	beq.n	80097d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80097ae:	4610      	mov	r0, r2
 80097b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097b2:	e00f      	b.n	80097d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fa13 	bl	8009be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097ba:	e00b      	b.n	80097d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 fa0f 	bl	8009be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097c2:	e007      	b.n	80097d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 fa0b 	bl	8009be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80097d2:	e1dc      	b.n	8009b8e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097d4:	bf00      	nop
    return;
 80097d6:	e1da      	b.n	8009b8e <HAL_UART_IRQHandler+0x66e>
 80097d8:	10000001 	.word	0x10000001
 80097dc:	04000120 	.word	0x04000120
 80097e0:	0800aab3 	.word	0x0800aab3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	f040 8170 	bne.w	8009ace <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80097ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097f2:	f003 0310 	and.w	r3, r3, #16
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f000 8169 	beq.w	8009ace <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80097fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009800:	f003 0310 	and.w	r3, r3, #16
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 8162 	beq.w	8009ace <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2210      	movs	r2, #16
 8009810:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800981c:	2b40      	cmp	r3, #64	@ 0x40
 800981e:	f040 80d8 	bne.w	80099d2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009830:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009834:	2b00      	cmp	r3, #0
 8009836:	f000 80af 	beq.w	8009998 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009840:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009844:	429a      	cmp	r2, r3
 8009846:	f080 80a7 	bcs.w	8009998 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009850:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 0320 	and.w	r3, r3, #32
 8009862:	2b00      	cmp	r3, #0
 8009864:	f040 8087 	bne.w	8009976 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009870:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009874:	e853 3f00 	ldrex	r3, [r3]
 8009878:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800987c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009880:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009884:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	461a      	mov	r2, r3
 800988e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009892:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009896:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800989e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80098a2:	e841 2300 	strex	r3, r2, [r1]
 80098a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80098aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1da      	bne.n	8009868 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	3308      	adds	r3, #8
 80098b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80098bc:	e853 3f00 	ldrex	r3, [r3]
 80098c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80098c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80098c4:	f023 0301 	bic.w	r3, r3, #1
 80098c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	3308      	adds	r3, #8
 80098d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80098d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80098da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80098de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80098e2:	e841 2300 	strex	r3, r2, [r1]
 80098e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80098e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1e1      	bne.n	80098b2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	3308      	adds	r3, #8
 80098f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098f8:	e853 3f00 	ldrex	r3, [r3]
 80098fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80098fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009904:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	3308      	adds	r3, #8
 800990e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009912:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009914:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009916:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009918:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800991a:	e841 2300 	strex	r3, r2, [r1]
 800991e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009920:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009922:	2b00      	cmp	r3, #0
 8009924:	d1e3      	bne.n	80098ee <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2220      	movs	r2, #32
 800992a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800993c:	e853 3f00 	ldrex	r3, [r3]
 8009940:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009944:	f023 0310 	bic.w	r3, r3, #16
 8009948:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	461a      	mov	r2, r3
 8009952:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009956:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009958:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800995c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800995e:	e841 2300 	strex	r3, r2, [r1]
 8009962:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1e4      	bne.n	8009934 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009970:	4618      	mov	r0, r3
 8009972:	f7fb fbe6 	bl	8005142 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2202      	movs	r2, #2
 800997a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009988:	b29b      	uxth	r3, r3
 800998a:	1ad3      	subs	r3, r2, r3
 800998c:	b29b      	uxth	r3, r3
 800998e:	4619      	mov	r1, r3
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 f92f 	bl	8009bf4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009996:	e0fc      	b.n	8009b92 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800999e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80099a2:	429a      	cmp	r2, r3
 80099a4:	f040 80f5 	bne.w	8009b92 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 0320 	and.w	r3, r3, #32
 80099b6:	2b20      	cmp	r3, #32
 80099b8:	f040 80eb 	bne.w	8009b92 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2202      	movs	r2, #2
 80099c0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099c8:	4619      	mov	r1, r3
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 f912 	bl	8009bf4 <HAL_UARTEx_RxEventCallback>
      return;
 80099d0:	e0df      	b.n	8009b92 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099de:	b29b      	uxth	r3, r3
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	f000 80d1 	beq.w	8009b96 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80099f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	f000 80cc 	beq.w	8009b96 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a06:	e853 3f00 	ldrex	r3, [r3]
 8009a0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009a20:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a28:	e841 2300 	strex	r3, r2, [r1]
 8009a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d1e4      	bne.n	80099fe <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	3308      	adds	r3, #8
 8009a3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a3e:	e853 3f00 	ldrex	r3, [r3]
 8009a42:	623b      	str	r3, [r7, #32]
   return(result);
 8009a44:	6a3b      	ldr	r3, [r7, #32]
 8009a46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a4a:	f023 0301 	bic.w	r3, r3, #1
 8009a4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	3308      	adds	r3, #8
 8009a58:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009a5c:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a64:	e841 2300 	strex	r3, r2, [r1]
 8009a68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d1e1      	bne.n	8009a34 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2220      	movs	r2, #32
 8009a74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	e853 3f00 	ldrex	r3, [r3]
 8009a90:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f023 0310 	bic.w	r3, r3, #16
 8009a98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009aa6:	61fb      	str	r3, [r7, #28]
 8009aa8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aaa:	69b9      	ldr	r1, [r7, #24]
 8009aac:	69fa      	ldr	r2, [r7, #28]
 8009aae:	e841 2300 	strex	r3, r2, [r1]
 8009ab2:	617b      	str	r3, [r7, #20]
   return(result);
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1e4      	bne.n	8009a84 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2202      	movs	r2, #2
 8009abe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ac0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f894 	bl	8009bf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009acc:	e063      	b.n	8009b96 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ad2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00e      	beq.n	8009af8 <HAL_UART_IRQHandler+0x5d8>
 8009ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d008      	beq.n	8009af8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009aee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f001 f81b 	bl	800ab2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009af6:	e051      	b.n	8009b9c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d014      	beq.n	8009b2e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d105      	bne.n	8009b1c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d008      	beq.n	8009b2e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d03a      	beq.n	8009b9a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	4798      	blx	r3
    }
    return;
 8009b2c:	e035      	b.n	8009b9a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d009      	beq.n	8009b4e <HAL_UART_IRQHandler+0x62e>
 8009b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d003      	beq.n	8009b4e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 ffc5 	bl	800aad6 <UART_EndTransmit_IT>
    return;
 8009b4c:	e026      	b.n	8009b9c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d009      	beq.n	8009b6e <HAL_UART_IRQHandler+0x64e>
 8009b5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b5e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d003      	beq.n	8009b6e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fff4 	bl	800ab54 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b6c:	e016      	b.n	8009b9c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d010      	beq.n	8009b9c <HAL_UART_IRQHandler+0x67c>
 8009b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	da0c      	bge.n	8009b9c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 ffdc 	bl	800ab40 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b88:	e008      	b.n	8009b9c <HAL_UART_IRQHandler+0x67c>
      return;
 8009b8a:	bf00      	nop
 8009b8c:	e006      	b.n	8009b9c <HAL_UART_IRQHandler+0x67c>
    return;
 8009b8e:	bf00      	nop
 8009b90:	e004      	b.n	8009b9c <HAL_UART_IRQHandler+0x67c>
      return;
 8009b92:	bf00      	nop
 8009b94:	e002      	b.n	8009b9c <HAL_UART_IRQHandler+0x67c>
      return;
 8009b96:	bf00      	nop
 8009b98:	e000      	b.n	8009b9c <HAL_UART_IRQHandler+0x67c>
    return;
 8009b9a:	bf00      	nop
  }
}
 8009b9c:	37e8      	adds	r7, #232	@ 0xe8
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop

08009ba4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009bac:	bf00      	nop
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009bc0:	bf00      	nop
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009bd4:	bf00      	nop
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009be8:	bf00      	nop
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c00:	bf00      	nop
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c10:	b08c      	sub	sp, #48	@ 0x30
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c16:	2300      	movs	r3, #0
 8009c18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	689a      	ldr	r2, [r3, #8]
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	431a      	orrs	r2, r3
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	695b      	ldr	r3, [r3, #20]
 8009c2a:	431a      	orrs	r2, r3
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	69db      	ldr	r3, [r3, #28]
 8009c30:	4313      	orrs	r3, r2
 8009c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	4baa      	ldr	r3, [pc, #680]	@ (8009ee4 <UART_SetConfig+0x2d8>)
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	697a      	ldr	r2, [r7, #20]
 8009c40:	6812      	ldr	r2, [r2, #0]
 8009c42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c44:	430b      	orrs	r3, r1
 8009c46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	68da      	ldr	r2, [r3, #12]
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	430a      	orrs	r2, r1
 8009c5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	699b      	ldr	r3, [r3, #24]
 8009c62:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a9f      	ldr	r2, [pc, #636]	@ (8009ee8 <UART_SetConfig+0x2dc>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d004      	beq.n	8009c78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	6a1b      	ldr	r3, [r3, #32]
 8009c72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c74:	4313      	orrs	r3, r2
 8009c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009c82:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	6812      	ldr	r2, [r2, #0]
 8009c8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c8c:	430b      	orrs	r3, r1
 8009c8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c96:	f023 010f 	bic.w	r1, r3, #15
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	430a      	orrs	r2, r1
 8009ca4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a90      	ldr	r2, [pc, #576]	@ (8009eec <UART_SetConfig+0x2e0>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d125      	bne.n	8009cfc <UART_SetConfig+0xf0>
 8009cb0:	4b8f      	ldr	r3, [pc, #572]	@ (8009ef0 <UART_SetConfig+0x2e4>)
 8009cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cb6:	f003 0303 	and.w	r3, r3, #3
 8009cba:	2b03      	cmp	r3, #3
 8009cbc:	d81a      	bhi.n	8009cf4 <UART_SetConfig+0xe8>
 8009cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8009cc4 <UART_SetConfig+0xb8>)
 8009cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc4:	08009cd5 	.word	0x08009cd5
 8009cc8:	08009ce5 	.word	0x08009ce5
 8009ccc:	08009cdd 	.word	0x08009cdd
 8009cd0:	08009ced 	.word	0x08009ced
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cda:	e116      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009cdc:	2302      	movs	r3, #2
 8009cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ce2:	e112      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009ce4:	2304      	movs	r3, #4
 8009ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cea:	e10e      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009cec:	2308      	movs	r3, #8
 8009cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cf2:	e10a      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009cf4:	2310      	movs	r3, #16
 8009cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cfa:	e106      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a7c      	ldr	r2, [pc, #496]	@ (8009ef4 <UART_SetConfig+0x2e8>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d138      	bne.n	8009d78 <UART_SetConfig+0x16c>
 8009d06:	4b7a      	ldr	r3, [pc, #488]	@ (8009ef0 <UART_SetConfig+0x2e4>)
 8009d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d0c:	f003 030c 	and.w	r3, r3, #12
 8009d10:	2b0c      	cmp	r3, #12
 8009d12:	d82d      	bhi.n	8009d70 <UART_SetConfig+0x164>
 8009d14:	a201      	add	r2, pc, #4	@ (adr r2, 8009d1c <UART_SetConfig+0x110>)
 8009d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1a:	bf00      	nop
 8009d1c:	08009d51 	.word	0x08009d51
 8009d20:	08009d71 	.word	0x08009d71
 8009d24:	08009d71 	.word	0x08009d71
 8009d28:	08009d71 	.word	0x08009d71
 8009d2c:	08009d61 	.word	0x08009d61
 8009d30:	08009d71 	.word	0x08009d71
 8009d34:	08009d71 	.word	0x08009d71
 8009d38:	08009d71 	.word	0x08009d71
 8009d3c:	08009d59 	.word	0x08009d59
 8009d40:	08009d71 	.word	0x08009d71
 8009d44:	08009d71 	.word	0x08009d71
 8009d48:	08009d71 	.word	0x08009d71
 8009d4c:	08009d69 	.word	0x08009d69
 8009d50:	2300      	movs	r3, #0
 8009d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d56:	e0d8      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009d58:	2302      	movs	r3, #2
 8009d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d5e:	e0d4      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009d60:	2304      	movs	r3, #4
 8009d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d66:	e0d0      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009d68:	2308      	movs	r3, #8
 8009d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d6e:	e0cc      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009d70:	2310      	movs	r3, #16
 8009d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d76:	e0c8      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a5e      	ldr	r2, [pc, #376]	@ (8009ef8 <UART_SetConfig+0x2ec>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d125      	bne.n	8009dce <UART_SetConfig+0x1c2>
 8009d82:	4b5b      	ldr	r3, [pc, #364]	@ (8009ef0 <UART_SetConfig+0x2e4>)
 8009d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d88:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009d8c:	2b30      	cmp	r3, #48	@ 0x30
 8009d8e:	d016      	beq.n	8009dbe <UART_SetConfig+0x1b2>
 8009d90:	2b30      	cmp	r3, #48	@ 0x30
 8009d92:	d818      	bhi.n	8009dc6 <UART_SetConfig+0x1ba>
 8009d94:	2b20      	cmp	r3, #32
 8009d96:	d00a      	beq.n	8009dae <UART_SetConfig+0x1a2>
 8009d98:	2b20      	cmp	r3, #32
 8009d9a:	d814      	bhi.n	8009dc6 <UART_SetConfig+0x1ba>
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d002      	beq.n	8009da6 <UART_SetConfig+0x19a>
 8009da0:	2b10      	cmp	r3, #16
 8009da2:	d008      	beq.n	8009db6 <UART_SetConfig+0x1aa>
 8009da4:	e00f      	b.n	8009dc6 <UART_SetConfig+0x1ba>
 8009da6:	2300      	movs	r3, #0
 8009da8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dac:	e0ad      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009dae:	2302      	movs	r3, #2
 8009db0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009db4:	e0a9      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009db6:	2304      	movs	r3, #4
 8009db8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dbc:	e0a5      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009dbe:	2308      	movs	r3, #8
 8009dc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dc4:	e0a1      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009dc6:	2310      	movs	r3, #16
 8009dc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dcc:	e09d      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a4a      	ldr	r2, [pc, #296]	@ (8009efc <UART_SetConfig+0x2f0>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d125      	bne.n	8009e24 <UART_SetConfig+0x218>
 8009dd8:	4b45      	ldr	r3, [pc, #276]	@ (8009ef0 <UART_SetConfig+0x2e4>)
 8009dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dde:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009de2:	2bc0      	cmp	r3, #192	@ 0xc0
 8009de4:	d016      	beq.n	8009e14 <UART_SetConfig+0x208>
 8009de6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009de8:	d818      	bhi.n	8009e1c <UART_SetConfig+0x210>
 8009dea:	2b80      	cmp	r3, #128	@ 0x80
 8009dec:	d00a      	beq.n	8009e04 <UART_SetConfig+0x1f8>
 8009dee:	2b80      	cmp	r3, #128	@ 0x80
 8009df0:	d814      	bhi.n	8009e1c <UART_SetConfig+0x210>
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d002      	beq.n	8009dfc <UART_SetConfig+0x1f0>
 8009df6:	2b40      	cmp	r3, #64	@ 0x40
 8009df8:	d008      	beq.n	8009e0c <UART_SetConfig+0x200>
 8009dfa:	e00f      	b.n	8009e1c <UART_SetConfig+0x210>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e02:	e082      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009e04:	2302      	movs	r3, #2
 8009e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e0a:	e07e      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009e0c:	2304      	movs	r3, #4
 8009e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e12:	e07a      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009e14:	2308      	movs	r3, #8
 8009e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e1a:	e076      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009e1c:	2310      	movs	r3, #16
 8009e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e22:	e072      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a35      	ldr	r2, [pc, #212]	@ (8009f00 <UART_SetConfig+0x2f4>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d12a      	bne.n	8009e84 <UART_SetConfig+0x278>
 8009e2e:	4b30      	ldr	r3, [pc, #192]	@ (8009ef0 <UART_SetConfig+0x2e4>)
 8009e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e3c:	d01a      	beq.n	8009e74 <UART_SetConfig+0x268>
 8009e3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e42:	d81b      	bhi.n	8009e7c <UART_SetConfig+0x270>
 8009e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e48:	d00c      	beq.n	8009e64 <UART_SetConfig+0x258>
 8009e4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e4e:	d815      	bhi.n	8009e7c <UART_SetConfig+0x270>
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d003      	beq.n	8009e5c <UART_SetConfig+0x250>
 8009e54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e58:	d008      	beq.n	8009e6c <UART_SetConfig+0x260>
 8009e5a:	e00f      	b.n	8009e7c <UART_SetConfig+0x270>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e62:	e052      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009e64:	2302      	movs	r3, #2
 8009e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e6a:	e04e      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009e6c:	2304      	movs	r3, #4
 8009e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e72:	e04a      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009e74:	2308      	movs	r3, #8
 8009e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e7a:	e046      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009e7c:	2310      	movs	r3, #16
 8009e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e82:	e042      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a17      	ldr	r2, [pc, #92]	@ (8009ee8 <UART_SetConfig+0x2dc>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d13a      	bne.n	8009f04 <UART_SetConfig+0x2f8>
 8009e8e:	4b18      	ldr	r3, [pc, #96]	@ (8009ef0 <UART_SetConfig+0x2e4>)
 8009e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009e98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009e9c:	d01a      	beq.n	8009ed4 <UART_SetConfig+0x2c8>
 8009e9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ea2:	d81b      	bhi.n	8009edc <UART_SetConfig+0x2d0>
 8009ea4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ea8:	d00c      	beq.n	8009ec4 <UART_SetConfig+0x2b8>
 8009eaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009eae:	d815      	bhi.n	8009edc <UART_SetConfig+0x2d0>
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d003      	beq.n	8009ebc <UART_SetConfig+0x2b0>
 8009eb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009eb8:	d008      	beq.n	8009ecc <UART_SetConfig+0x2c0>
 8009eba:	e00f      	b.n	8009edc <UART_SetConfig+0x2d0>
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ec2:	e022      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009ec4:	2302      	movs	r3, #2
 8009ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eca:	e01e      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009ecc:	2304      	movs	r3, #4
 8009ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ed2:	e01a      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009ed4:	2308      	movs	r3, #8
 8009ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eda:	e016      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009edc:	2310      	movs	r3, #16
 8009ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ee2:	e012      	b.n	8009f0a <UART_SetConfig+0x2fe>
 8009ee4:	cfff69f3 	.word	0xcfff69f3
 8009ee8:	40008000 	.word	0x40008000
 8009eec:	40013800 	.word	0x40013800
 8009ef0:	40021000 	.word	0x40021000
 8009ef4:	40004400 	.word	0x40004400
 8009ef8:	40004800 	.word	0x40004800
 8009efc:	40004c00 	.word	0x40004c00
 8009f00:	40005000 	.word	0x40005000
 8009f04:	2310      	movs	r3, #16
 8009f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4aae      	ldr	r2, [pc, #696]	@ (800a1c8 <UART_SetConfig+0x5bc>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	f040 8097 	bne.w	800a044 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009f1a:	2b08      	cmp	r3, #8
 8009f1c:	d823      	bhi.n	8009f66 <UART_SetConfig+0x35a>
 8009f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f24 <UART_SetConfig+0x318>)
 8009f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f24:	08009f49 	.word	0x08009f49
 8009f28:	08009f67 	.word	0x08009f67
 8009f2c:	08009f51 	.word	0x08009f51
 8009f30:	08009f67 	.word	0x08009f67
 8009f34:	08009f57 	.word	0x08009f57
 8009f38:	08009f67 	.word	0x08009f67
 8009f3c:	08009f67 	.word	0x08009f67
 8009f40:	08009f67 	.word	0x08009f67
 8009f44:	08009f5f 	.word	0x08009f5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f48:	f7fd f974 	bl	8007234 <HAL_RCC_GetPCLK1Freq>
 8009f4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f4e:	e010      	b.n	8009f72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f50:	4b9e      	ldr	r3, [pc, #632]	@ (800a1cc <UART_SetConfig+0x5c0>)
 8009f52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009f54:	e00d      	b.n	8009f72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f56:	f7fd f8ff 	bl	8007158 <HAL_RCC_GetSysClockFreq>
 8009f5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f5c:	e009      	b.n	8009f72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009f64:	e005      	b.n	8009f72 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009f66:	2300      	movs	r3, #0
 8009f68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009f70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	f000 8130 	beq.w	800a1da <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f7e:	4a94      	ldr	r2, [pc, #592]	@ (800a1d0 <UART_SetConfig+0x5c4>)
 8009f80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f84:	461a      	mov	r2, r3
 8009f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f88:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f8c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	685a      	ldr	r2, [r3, #4]
 8009f92:	4613      	mov	r3, r2
 8009f94:	005b      	lsls	r3, r3, #1
 8009f96:	4413      	add	r3, r2
 8009f98:	69ba      	ldr	r2, [r7, #24]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d305      	bcc.n	8009faa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fa4:	69ba      	ldr	r2, [r7, #24]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d903      	bls.n	8009fb2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009fb0:	e113      	b.n	800a1da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	60bb      	str	r3, [r7, #8]
 8009fb8:	60fa      	str	r2, [r7, #12]
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fbe:	4a84      	ldr	r2, [pc, #528]	@ (800a1d0 <UART_SetConfig+0x5c4>)
 8009fc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	603b      	str	r3, [r7, #0]
 8009fca:	607a      	str	r2, [r7, #4]
 8009fcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009fd4:	f7f6 fd5e 	bl	8000a94 <__aeabi_uldivmod>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	460b      	mov	r3, r1
 8009fdc:	4610      	mov	r0, r2
 8009fde:	4619      	mov	r1, r3
 8009fe0:	f04f 0200 	mov.w	r2, #0
 8009fe4:	f04f 0300 	mov.w	r3, #0
 8009fe8:	020b      	lsls	r3, r1, #8
 8009fea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009fee:	0202      	lsls	r2, r0, #8
 8009ff0:	6979      	ldr	r1, [r7, #20]
 8009ff2:	6849      	ldr	r1, [r1, #4]
 8009ff4:	0849      	lsrs	r1, r1, #1
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	460c      	mov	r4, r1
 8009ffa:	4605      	mov	r5, r0
 8009ffc:	eb12 0804 	adds.w	r8, r2, r4
 800a000:	eb43 0905 	adc.w	r9, r3, r5
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	469a      	mov	sl, r3
 800a00c:	4693      	mov	fp, r2
 800a00e:	4652      	mov	r2, sl
 800a010:	465b      	mov	r3, fp
 800a012:	4640      	mov	r0, r8
 800a014:	4649      	mov	r1, r9
 800a016:	f7f6 fd3d 	bl	8000a94 <__aeabi_uldivmod>
 800a01a:	4602      	mov	r2, r0
 800a01c:	460b      	mov	r3, r1
 800a01e:	4613      	mov	r3, r2
 800a020:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a022:	6a3b      	ldr	r3, [r7, #32]
 800a024:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a028:	d308      	bcc.n	800a03c <UART_SetConfig+0x430>
 800a02a:	6a3b      	ldr	r3, [r7, #32]
 800a02c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a030:	d204      	bcs.n	800a03c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	6a3a      	ldr	r2, [r7, #32]
 800a038:	60da      	str	r2, [r3, #12]
 800a03a:	e0ce      	b.n	800a1da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a042:	e0ca      	b.n	800a1da <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	69db      	ldr	r3, [r3, #28]
 800a048:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a04c:	d166      	bne.n	800a11c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a04e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a052:	2b08      	cmp	r3, #8
 800a054:	d827      	bhi.n	800a0a6 <UART_SetConfig+0x49a>
 800a056:	a201      	add	r2, pc, #4	@ (adr r2, 800a05c <UART_SetConfig+0x450>)
 800a058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a05c:	0800a081 	.word	0x0800a081
 800a060:	0800a089 	.word	0x0800a089
 800a064:	0800a091 	.word	0x0800a091
 800a068:	0800a0a7 	.word	0x0800a0a7
 800a06c:	0800a097 	.word	0x0800a097
 800a070:	0800a0a7 	.word	0x0800a0a7
 800a074:	0800a0a7 	.word	0x0800a0a7
 800a078:	0800a0a7 	.word	0x0800a0a7
 800a07c:	0800a09f 	.word	0x0800a09f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a080:	f7fd f8d8 	bl	8007234 <HAL_RCC_GetPCLK1Freq>
 800a084:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a086:	e014      	b.n	800a0b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a088:	f7fd f8ea 	bl	8007260 <HAL_RCC_GetPCLK2Freq>
 800a08c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a08e:	e010      	b.n	800a0b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a090:	4b4e      	ldr	r3, [pc, #312]	@ (800a1cc <UART_SetConfig+0x5c0>)
 800a092:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a094:	e00d      	b.n	800a0b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a096:	f7fd f85f 	bl	8007158 <HAL_RCC_GetSysClockFreq>
 800a09a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a09c:	e009      	b.n	800a0b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a09e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a0a4:	e005      	b.n	800a0b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a0b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	f000 8090 	beq.w	800a1da <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0be:	4a44      	ldr	r2, [pc, #272]	@ (800a1d0 <UART_SetConfig+0x5c4>)
 800a0c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0cc:	005a      	lsls	r2, r3, #1
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	085b      	lsrs	r3, r3, #1
 800a0d4:	441a      	add	r2, r3
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0e0:	6a3b      	ldr	r3, [r7, #32]
 800a0e2:	2b0f      	cmp	r3, #15
 800a0e4:	d916      	bls.n	800a114 <UART_SetConfig+0x508>
 800a0e6:	6a3b      	ldr	r3, [r7, #32]
 800a0e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0ec:	d212      	bcs.n	800a114 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a0ee:	6a3b      	ldr	r3, [r7, #32]
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	f023 030f 	bic.w	r3, r3, #15
 800a0f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a0f8:	6a3b      	ldr	r3, [r7, #32]
 800a0fa:	085b      	lsrs	r3, r3, #1
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	f003 0307 	and.w	r3, r3, #7
 800a102:	b29a      	uxth	r2, r3
 800a104:	8bfb      	ldrh	r3, [r7, #30]
 800a106:	4313      	orrs	r3, r2
 800a108:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	8bfa      	ldrh	r2, [r7, #30]
 800a110:	60da      	str	r2, [r3, #12]
 800a112:	e062      	b.n	800a1da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a11a:	e05e      	b.n	800a1da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a11c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a120:	2b08      	cmp	r3, #8
 800a122:	d828      	bhi.n	800a176 <UART_SetConfig+0x56a>
 800a124:	a201      	add	r2, pc, #4	@ (adr r2, 800a12c <UART_SetConfig+0x520>)
 800a126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12a:	bf00      	nop
 800a12c:	0800a151 	.word	0x0800a151
 800a130:	0800a159 	.word	0x0800a159
 800a134:	0800a161 	.word	0x0800a161
 800a138:	0800a177 	.word	0x0800a177
 800a13c:	0800a167 	.word	0x0800a167
 800a140:	0800a177 	.word	0x0800a177
 800a144:	0800a177 	.word	0x0800a177
 800a148:	0800a177 	.word	0x0800a177
 800a14c:	0800a16f 	.word	0x0800a16f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a150:	f7fd f870 	bl	8007234 <HAL_RCC_GetPCLK1Freq>
 800a154:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a156:	e014      	b.n	800a182 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a158:	f7fd f882 	bl	8007260 <HAL_RCC_GetPCLK2Freq>
 800a15c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a15e:	e010      	b.n	800a182 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a160:	4b1a      	ldr	r3, [pc, #104]	@ (800a1cc <UART_SetConfig+0x5c0>)
 800a162:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a164:	e00d      	b.n	800a182 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a166:	f7fc fff7 	bl	8007158 <HAL_RCC_GetSysClockFreq>
 800a16a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a16c:	e009      	b.n	800a182 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a16e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a172:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a174:	e005      	b.n	800a182 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a176:	2300      	movs	r3, #0
 800a178:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a180:	bf00      	nop
    }

    if (pclk != 0U)
 800a182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a184:	2b00      	cmp	r3, #0
 800a186:	d028      	beq.n	800a1da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a18c:	4a10      	ldr	r2, [pc, #64]	@ (800a1d0 <UART_SetConfig+0x5c4>)
 800a18e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a192:	461a      	mov	r2, r3
 800a194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a196:	fbb3 f2f2 	udiv	r2, r3, r2
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	085b      	lsrs	r3, r3, #1
 800a1a0:	441a      	add	r2, r3
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1ac:	6a3b      	ldr	r3, [r7, #32]
 800a1ae:	2b0f      	cmp	r3, #15
 800a1b0:	d910      	bls.n	800a1d4 <UART_SetConfig+0x5c8>
 800a1b2:	6a3b      	ldr	r3, [r7, #32]
 800a1b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1b8:	d20c      	bcs.n	800a1d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a1ba:	6a3b      	ldr	r3, [r7, #32]
 800a1bc:	b29a      	uxth	r2, r3
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	60da      	str	r2, [r3, #12]
 800a1c4:	e009      	b.n	800a1da <UART_SetConfig+0x5ce>
 800a1c6:	bf00      	nop
 800a1c8:	40008000 	.word	0x40008000
 800a1cc:	00f42400 	.word	0x00f42400
 800a1d0:	0800ae14 	.word	0x0800ae14
      }
      else
      {
        ret = HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a1f6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3730      	adds	r7, #48	@ 0x30
 800a1fe:	46bd      	mov	sp, r7
 800a200:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a204 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a210:	f003 0308 	and.w	r3, r3, #8
 800a214:	2b00      	cmp	r3, #0
 800a216:	d00a      	beq.n	800a22e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	430a      	orrs	r2, r1
 800a22c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a232:	f003 0301 	and.w	r3, r3, #1
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00a      	beq.n	800a250 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	430a      	orrs	r2, r1
 800a24e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a254:	f003 0302 	and.w	r3, r3, #2
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00a      	beq.n	800a272 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	430a      	orrs	r2, r1
 800a270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a276:	f003 0304 	and.w	r3, r3, #4
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00a      	beq.n	800a294 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	430a      	orrs	r2, r1
 800a292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a298:	f003 0310 	and.w	r3, r3, #16
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d00a      	beq.n	800a2b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	430a      	orrs	r2, r1
 800a2b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ba:	f003 0320 	and.w	r3, r3, #32
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00a      	beq.n	800a2d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	430a      	orrs	r2, r1
 800a2d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d01a      	beq.n	800a31a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	430a      	orrs	r2, r1
 800a2f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a302:	d10a      	bne.n	800a31a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	430a      	orrs	r2, r1
 800a318:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a31e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00a      	beq.n	800a33c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	430a      	orrs	r2, r1
 800a33a:	605a      	str	r2, [r3, #4]
  }
}
 800a33c:	bf00      	nop
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b098      	sub	sp, #96	@ 0x60
 800a34c:	af02      	add	r7, sp, #8
 800a34e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a358:	f7f9 f83c 	bl	80033d4 <HAL_GetTick>
 800a35c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f003 0308 	and.w	r3, r3, #8
 800a368:	2b08      	cmp	r3, #8
 800a36a:	d12f      	bne.n	800a3cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a36c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a370:	9300      	str	r3, [sp, #0]
 800a372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a374:	2200      	movs	r2, #0
 800a376:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 f88e 	bl	800a49c <UART_WaitOnFlagUntilTimeout>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d022      	beq.n	800a3cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a38e:	e853 3f00 	ldrex	r3, [r3]
 800a392:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a396:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a39a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a3aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a3ac:	e841 2300 	strex	r3, r2, [r1]
 800a3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a3b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d1e6      	bne.n	800a386 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2220      	movs	r2, #32
 800a3bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	e063      	b.n	800a494 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f003 0304 	and.w	r3, r3, #4
 800a3d6:	2b04      	cmp	r3, #4
 800a3d8:	d149      	bne.n	800a46e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a3de:	9300      	str	r3, [sp, #0]
 800a3e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 f857 	bl	800a49c <UART_WaitOnFlagUntilTimeout>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d03c      	beq.n	800a46e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fc:	e853 3f00 	ldrex	r3, [r3]
 800a400:	623b      	str	r3, [r7, #32]
   return(result);
 800a402:	6a3b      	ldr	r3, [r7, #32]
 800a404:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a408:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	461a      	mov	r2, r3
 800a410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a412:	633b      	str	r3, [r7, #48]	@ 0x30
 800a414:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a416:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a41a:	e841 2300 	strex	r3, r2, [r1]
 800a41e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1e6      	bne.n	800a3f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	3308      	adds	r3, #8
 800a42c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	e853 3f00 	ldrex	r3, [r3]
 800a434:	60fb      	str	r3, [r7, #12]
   return(result);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f023 0301 	bic.w	r3, r3, #1
 800a43c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	3308      	adds	r3, #8
 800a444:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a446:	61fa      	str	r2, [r7, #28]
 800a448:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a44a:	69b9      	ldr	r1, [r7, #24]
 800a44c:	69fa      	ldr	r2, [r7, #28]
 800a44e:	e841 2300 	strex	r3, r2, [r1]
 800a452:	617b      	str	r3, [r7, #20]
   return(result);
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1e5      	bne.n	800a426 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2220      	movs	r2, #32
 800a45e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a46a:	2303      	movs	r3, #3
 800a46c:	e012      	b.n	800a494 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2220      	movs	r2, #32
 800a472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2220      	movs	r2, #32
 800a47a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2200      	movs	r2, #0
 800a482:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	3758      	adds	r7, #88	@ 0x58
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	603b      	str	r3, [r7, #0]
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4ac:	e04f      	b.n	800a54e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4b4:	d04b      	beq.n	800a54e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4b6:	f7f8 ff8d 	bl	80033d4 <HAL_GetTick>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	1ad3      	subs	r3, r2, r3
 800a4c0:	69ba      	ldr	r2, [r7, #24]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d302      	bcc.n	800a4cc <UART_WaitOnFlagUntilTimeout+0x30>
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d101      	bne.n	800a4d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a4cc:	2303      	movs	r3, #3
 800a4ce:	e04e      	b.n	800a56e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f003 0304 	and.w	r3, r3, #4
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d037      	beq.n	800a54e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	2b80      	cmp	r3, #128	@ 0x80
 800a4e2:	d034      	beq.n	800a54e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	2b40      	cmp	r3, #64	@ 0x40
 800a4e8:	d031      	beq.n	800a54e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	69db      	ldr	r3, [r3, #28]
 800a4f0:	f003 0308 	and.w	r3, r3, #8
 800a4f4:	2b08      	cmp	r3, #8
 800a4f6:	d110      	bne.n	800a51a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2208      	movs	r2, #8
 800a4fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f000 f920 	bl	800a746 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2208      	movs	r2, #8
 800a50a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2200      	movs	r2, #0
 800a512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a516:	2301      	movs	r3, #1
 800a518:	e029      	b.n	800a56e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	69db      	ldr	r3, [r3, #28]
 800a520:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a524:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a528:	d111      	bne.n	800a54e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a532:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	f000 f906 	bl	800a746 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2220      	movs	r2, #32
 800a53e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a54a:	2303      	movs	r3, #3
 800a54c:	e00f      	b.n	800a56e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	69da      	ldr	r2, [r3, #28]
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	4013      	ands	r3, r2
 800a558:	68ba      	ldr	r2, [r7, #8]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	bf0c      	ite	eq
 800a55e:	2301      	moveq	r3, #1
 800a560:	2300      	movne	r3, #0
 800a562:	b2db      	uxtb	r3, r3
 800a564:	461a      	mov	r2, r3
 800a566:	79fb      	ldrb	r3, [r7, #7]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d0a0      	beq.n	800a4ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
	...

0800a578 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b096      	sub	sp, #88	@ 0x58
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	4613      	mov	r3, r2
 800a584:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	88fa      	ldrh	r2, [r7, #6]
 800a590:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2200      	movs	r2, #0
 800a598:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2222      	movs	r2, #34	@ 0x22
 800a5a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d02d      	beq.n	800a60a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5b4:	4a40      	ldr	r2, [pc, #256]	@ (800a6b8 <UART_Start_Receive_DMA+0x140>)
 800a5b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5be:	4a3f      	ldr	r2, [pc, #252]	@ (800a6bc <UART_Start_Receive_DMA+0x144>)
 800a5c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5c8:	4a3d      	ldr	r2, [pc, #244]	@ (800a6c0 <UART_Start_Receive_DMA+0x148>)
 800a5ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	3324      	adds	r3, #36	@ 0x24
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	88fb      	ldrh	r3, [r7, #6]
 800a5ec:	f7fa fd2e 	bl	800504c <HAL_DMA_Start_IT>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d009      	beq.n	800a60a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2210      	movs	r2, #16
 800a5fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2220      	movs	r2, #32
 800a602:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	e051      	b.n	800a6ae <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	691b      	ldr	r3, [r3, #16]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d018      	beq.n	800a644 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a61a:	e853 3f00 	ldrex	r3, [r3]
 800a61e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a622:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a626:	657b      	str	r3, [r7, #84]	@ 0x54
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	461a      	mov	r2, r3
 800a62e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a630:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a632:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a634:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a636:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a638:	e841 2300 	strex	r3, r2, [r1]
 800a63c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a63e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a640:	2b00      	cmp	r3, #0
 800a642:	d1e6      	bne.n	800a612 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	3308      	adds	r3, #8
 800a64a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a64e:	e853 3f00 	ldrex	r3, [r3]
 800a652:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a656:	f043 0301 	orr.w	r3, r3, #1
 800a65a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	3308      	adds	r3, #8
 800a662:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a664:	637a      	str	r2, [r7, #52]	@ 0x34
 800a666:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a668:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a66a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a66c:	e841 2300 	strex	r3, r2, [r1]
 800a670:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a674:	2b00      	cmp	r3, #0
 800a676:	d1e5      	bne.n	800a644 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	3308      	adds	r3, #8
 800a67e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	e853 3f00 	ldrex	r3, [r3]
 800a686:	613b      	str	r3, [r7, #16]
   return(result);
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a68e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	3308      	adds	r3, #8
 800a696:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a698:	623a      	str	r2, [r7, #32]
 800a69a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69c:	69f9      	ldr	r1, [r7, #28]
 800a69e:	6a3a      	ldr	r2, [r7, #32]
 800a6a0:	e841 2300 	strex	r3, r2, [r1]
 800a6a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d1e5      	bne.n	800a678 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3758      	adds	r7, #88	@ 0x58
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	0800a8c9 	.word	0x0800a8c9
 800a6bc:	0800a9f5 	.word	0x0800a9f5
 800a6c0:	0800aa33 	.word	0x0800aa33

0800a6c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b08f      	sub	sp, #60	@ 0x3c
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d2:	6a3b      	ldr	r3, [r7, #32]
 800a6d4:	e853 3f00 	ldrex	r3, [r3]
 800a6d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6da:	69fb      	ldr	r3, [r7, #28]
 800a6dc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a6e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6ec:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a6f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6f2:	e841 2300 	strex	r3, r2, [r1]
 800a6f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d1e6      	bne.n	800a6cc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	3308      	adds	r3, #8
 800a704:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	e853 3f00 	ldrex	r3, [r3]
 800a70c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a714:	633b      	str	r3, [r7, #48]	@ 0x30
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	3308      	adds	r3, #8
 800a71c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a71e:	61ba      	str	r2, [r7, #24]
 800a720:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a722:	6979      	ldr	r1, [r7, #20]
 800a724:	69ba      	ldr	r2, [r7, #24]
 800a726:	e841 2300 	strex	r3, r2, [r1]
 800a72a:	613b      	str	r3, [r7, #16]
   return(result);
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d1e5      	bne.n	800a6fe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2220      	movs	r2, #32
 800a736:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a73a:	bf00      	nop
 800a73c:	373c      	adds	r7, #60	@ 0x3c
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr

0800a746 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a746:	b480      	push	{r7}
 800a748:	b095      	sub	sp, #84	@ 0x54
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a756:	e853 3f00 	ldrex	r3, [r3]
 800a75a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a75c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a762:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	461a      	mov	r2, r3
 800a76a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a76c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a76e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a770:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a772:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a774:	e841 2300 	strex	r3, r2, [r1]
 800a778:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a77a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1e6      	bne.n	800a74e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	3308      	adds	r3, #8
 800a786:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a788:	6a3b      	ldr	r3, [r7, #32]
 800a78a:	e853 3f00 	ldrex	r3, [r3]
 800a78e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a796:	f023 0301 	bic.w	r3, r3, #1
 800a79a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	3308      	adds	r3, #8
 800a7a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a7a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a7aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7ac:	e841 2300 	strex	r3, r2, [r1]
 800a7b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d1e3      	bne.n	800a780 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d118      	bne.n	800a7f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	e853 3f00 	ldrex	r3, [r3]
 800a7cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	f023 0310 	bic.w	r3, r3, #16
 800a7d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	461a      	mov	r2, r3
 800a7dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7de:	61bb      	str	r3, [r7, #24]
 800a7e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e2:	6979      	ldr	r1, [r7, #20]
 800a7e4:	69ba      	ldr	r2, [r7, #24]
 800a7e6:	e841 2300 	strex	r3, r2, [r1]
 800a7ea:	613b      	str	r3, [r7, #16]
   return(result);
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1e6      	bne.n	800a7c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2220      	movs	r2, #32
 800a7f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a806:	bf00      	nop
 800a808:	3754      	adds	r7, #84	@ 0x54
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr

0800a812 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b090      	sub	sp, #64	@ 0x40
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a81e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f003 0320 	and.w	r3, r3, #32
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d137      	bne.n	800a89e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a82e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a830:	2200      	movs	r2, #0
 800a832:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	3308      	adds	r3, #8
 800a83c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a840:	e853 3f00 	ldrex	r3, [r3]
 800a844:	623b      	str	r3, [r7, #32]
   return(result);
 800a846:	6a3b      	ldr	r3, [r7, #32]
 800a848:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a84c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a84e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	3308      	adds	r3, #8
 800a854:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a856:	633a      	str	r2, [r7, #48]	@ 0x30
 800a858:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a85c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a85e:	e841 2300 	strex	r3, r2, [r1]
 800a862:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1e5      	bne.n	800a836 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a86a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	e853 3f00 	ldrex	r3, [r3]
 800a876:	60fb      	str	r3, [r7, #12]
   return(result);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a87e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	461a      	mov	r2, r3
 800a886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a888:	61fb      	str	r3, [r7, #28]
 800a88a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88c:	69b9      	ldr	r1, [r7, #24]
 800a88e:	69fa      	ldr	r2, [r7, #28]
 800a890:	e841 2300 	strex	r3, r2, [r1]
 800a894:	617b      	str	r3, [r7, #20]
   return(result);
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d1e6      	bne.n	800a86a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a89c:	e002      	b.n	800a8a4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a89e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a8a0:	f7ff f980 	bl	8009ba4 <HAL_UART_TxCpltCallback>
}
 800a8a4:	bf00      	nop
 800a8a6:	3740      	adds	r7, #64	@ 0x40
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8b8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	f7ff f97c 	bl	8009bb8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8c0:	bf00      	nop
 800a8c2:	3710      	adds	r7, #16
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b09c      	sub	sp, #112	@ 0x70
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8d4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f003 0320 	and.w	r3, r3, #32
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d171      	bne.n	800a9c8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a8e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8f4:	e853 3f00 	ldrex	r3, [r3]
 800a8f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a8fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a900:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a902:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	461a      	mov	r2, r3
 800a908:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a90a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a90c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a90e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a910:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a912:	e841 2300 	strex	r3, r2, [r1]
 800a916:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a918:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d1e6      	bne.n	800a8ec <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a91e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	3308      	adds	r3, #8
 800a924:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a928:	e853 3f00 	ldrex	r3, [r3]
 800a92c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a92e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a930:	f023 0301 	bic.w	r3, r3, #1
 800a934:	667b      	str	r3, [r7, #100]	@ 0x64
 800a936:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	3308      	adds	r3, #8
 800a93c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a93e:	647a      	str	r2, [r7, #68]	@ 0x44
 800a940:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a942:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a944:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a946:	e841 2300 	strex	r3, r2, [r1]
 800a94a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a94c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1e5      	bne.n	800a91e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	3308      	adds	r3, #8
 800a958:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a95c:	e853 3f00 	ldrex	r3, [r3]
 800a960:	623b      	str	r3, [r7, #32]
   return(result);
 800a962:	6a3b      	ldr	r3, [r7, #32]
 800a964:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a968:	663b      	str	r3, [r7, #96]	@ 0x60
 800a96a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	3308      	adds	r3, #8
 800a970:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a972:	633a      	str	r2, [r7, #48]	@ 0x30
 800a974:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a976:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a97a:	e841 2300 	strex	r3, r2, [r1]
 800a97e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a982:	2b00      	cmp	r3, #0
 800a984:	d1e5      	bne.n	800a952 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a988:	2220      	movs	r2, #32
 800a98a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a98e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a990:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a992:	2b01      	cmp	r3, #1
 800a994:	d118      	bne.n	800a9c8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a996:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	e853 3f00 	ldrex	r3, [r3]
 800a9a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f023 0310 	bic.w	r3, r3, #16
 800a9aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a9ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a9b4:	61fb      	str	r3, [r7, #28]
 800a9b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b8:	69b9      	ldr	r1, [r7, #24]
 800a9ba:	69fa      	ldr	r2, [r7, #28]
 800a9bc:	e841 2300 	strex	r3, r2, [r1]
 800a9c0:	617b      	str	r3, [r7, #20]
   return(result);
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d1e6      	bne.n	800a996 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a9c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d107      	bne.n	800a9e6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a9dc:	4619      	mov	r1, r3
 800a9de:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a9e0:	f7ff f908 	bl	8009bf4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a9e4:	e002      	b.n	800a9ec <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a9e6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a9e8:	f7f7 fede 	bl	80027a8 <HAL_UART_RxCpltCallback>
}
 800a9ec:	bf00      	nop
 800a9ee:	3770      	adds	r7, #112	@ 0x70
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa00:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2201      	movs	r2, #1
 800aa06:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d109      	bne.n	800aa24 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aa16:	085b      	lsrs	r3, r3, #1
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f7ff f8e9 	bl	8009bf4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa22:	e002      	b.n	800aa2a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f7ff f8d1 	bl	8009bcc <HAL_UART_RxHalfCpltCallback>
}
 800aa2a:	bf00      	nop
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b086      	sub	sp, #24
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa3e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa46:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa4e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa5a:	2b80      	cmp	r3, #128	@ 0x80
 800aa5c:	d109      	bne.n	800aa72 <UART_DMAError+0x40>
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	2b21      	cmp	r3, #33	@ 0x21
 800aa62:	d106      	bne.n	800aa72 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800aa6c:	6978      	ldr	r0, [r7, #20]
 800aa6e:	f7ff fe29 	bl	800a6c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa7c:	2b40      	cmp	r3, #64	@ 0x40
 800aa7e:	d109      	bne.n	800aa94 <UART_DMAError+0x62>
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2b22      	cmp	r3, #34	@ 0x22
 800aa84:	d106      	bne.n	800aa94 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800aa8e:	6978      	ldr	r0, [r7, #20]
 800aa90:	f7ff fe59 	bl	800a746 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa9a:	f043 0210 	orr.w	r2, r3, #16
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aaa4:	6978      	ldr	r0, [r7, #20]
 800aaa6:	f7ff f89b 	bl	8009be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aaaa:	bf00      	nop
 800aaac:	3718      	adds	r7, #24
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}

0800aab2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b084      	sub	sp, #16
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aabe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f7ff f889 	bl	8009be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aace:	bf00      	nop
 800aad0:	3710      	adds	r7, #16
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b088      	sub	sp, #32
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	e853 3f00 	ldrex	r3, [r3]
 800aaea:	60bb      	str	r3, [r7, #8]
   return(result);
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aaf2:	61fb      	str	r3, [r7, #28]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	461a      	mov	r2, r3
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	61bb      	str	r3, [r7, #24]
 800aafe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab00:	6979      	ldr	r1, [r7, #20]
 800ab02:	69ba      	ldr	r2, [r7, #24]
 800ab04:	e841 2300 	strex	r3, r2, [r1]
 800ab08:	613b      	str	r3, [r7, #16]
   return(result);
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d1e6      	bne.n	800aade <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2220      	movs	r2, #32
 800ab14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f7ff f840 	bl	8009ba4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab24:	bf00      	nop
 800ab26:	3720      	adds	r7, #32
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ab34:	bf00      	nop
 800ab36:	370c      	adds	r7, #12
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ab48:	bf00      	nop
 800ab4a:	370c      	adds	r7, #12
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ab5c:	bf00      	nop
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b085      	sub	sp, #20
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d101      	bne.n	800ab7e <HAL_UARTEx_DisableFifoMode+0x16>
 800ab7a:	2302      	movs	r3, #2
 800ab7c:	e027      	b.n	800abce <HAL_UARTEx_DisableFifoMode+0x66>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2201      	movs	r2, #1
 800ab82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2224      	movs	r2, #36	@ 0x24
 800ab8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f022 0201 	bic.w	r2, r2, #1
 800aba4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800abac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2220      	movs	r2, #32
 800abc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3714      	adds	r7, #20
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr

0800abda <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b084      	sub	sp, #16
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
 800abe2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800abea:	2b01      	cmp	r3, #1
 800abec:	d101      	bne.n	800abf2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800abee:	2302      	movs	r3, #2
 800abf0:	e02d      	b.n	800ac4e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2201      	movs	r2, #1
 800abf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2224      	movs	r2, #36	@ 0x24
 800abfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f022 0201 	bic.w	r2, r2, #1
 800ac18:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	683a      	ldr	r2, [r7, #0]
 800ac2a:	430a      	orrs	r2, r1
 800ac2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 f850 	bl	800acd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2220      	movs	r2, #32
 800ac40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3710      	adds	r7, #16
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b084      	sub	sp, #16
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
 800ac5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d101      	bne.n	800ac6e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ac6a:	2302      	movs	r3, #2
 800ac6c:	e02d      	b.n	800acca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2201      	movs	r2, #1
 800ac72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2224      	movs	r2, #36	@ 0x24
 800ac7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f022 0201 	bic.w	r2, r2, #1
 800ac94:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	683a      	ldr	r2, [r7, #0]
 800aca6:	430a      	orrs	r2, r1
 800aca8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 f812 	bl	800acd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2220      	movs	r2, #32
 800acbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2200      	movs	r2, #0
 800acc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800acc8:	2300      	movs	r3, #0
}
 800acca:	4618      	mov	r0, r3
 800accc:	3710      	adds	r7, #16
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
	...

0800acd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b085      	sub	sp, #20
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d108      	bne.n	800acf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2201      	movs	r2, #1
 800ace8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2201      	movs	r2, #1
 800acf0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800acf4:	e031      	b.n	800ad5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800acf6:	2308      	movs	r3, #8
 800acf8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800acfa:	2308      	movs	r3, #8
 800acfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	0e5b      	lsrs	r3, r3, #25
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	f003 0307 	and.w	r3, r3, #7
 800ad0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	0f5b      	lsrs	r3, r3, #29
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	f003 0307 	and.w	r3, r3, #7
 800ad1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad1e:	7bbb      	ldrb	r3, [r7, #14]
 800ad20:	7b3a      	ldrb	r2, [r7, #12]
 800ad22:	4911      	ldr	r1, [pc, #68]	@ (800ad68 <UARTEx_SetNbDataToProcess+0x94>)
 800ad24:	5c8a      	ldrb	r2, [r1, r2]
 800ad26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ad2a:	7b3a      	ldrb	r2, [r7, #12]
 800ad2c:	490f      	ldr	r1, [pc, #60]	@ (800ad6c <UARTEx_SetNbDataToProcess+0x98>)
 800ad2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad30:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad34:	b29a      	uxth	r2, r3
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad3c:	7bfb      	ldrb	r3, [r7, #15]
 800ad3e:	7b7a      	ldrb	r2, [r7, #13]
 800ad40:	4909      	ldr	r1, [pc, #36]	@ (800ad68 <UARTEx_SetNbDataToProcess+0x94>)
 800ad42:	5c8a      	ldrb	r2, [r1, r2]
 800ad44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ad48:	7b7a      	ldrb	r2, [r7, #13]
 800ad4a:	4908      	ldr	r1, [pc, #32]	@ (800ad6c <UARTEx_SetNbDataToProcess+0x98>)
 800ad4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad4e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ad5a:	bf00      	nop
 800ad5c:	3714      	adds	r7, #20
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr
 800ad66:	bf00      	nop
 800ad68:	0800ae2c 	.word	0x0800ae2c
 800ad6c:	0800ae34 	.word	0x0800ae34

0800ad70 <memset>:
 800ad70:	4402      	add	r2, r0
 800ad72:	4603      	mov	r3, r0
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d100      	bne.n	800ad7a <memset+0xa>
 800ad78:	4770      	bx	lr
 800ad7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad7e:	e7f9      	b.n	800ad74 <memset+0x4>

0800ad80 <__libc_init_array>:
 800ad80:	b570      	push	{r4, r5, r6, lr}
 800ad82:	4d0d      	ldr	r5, [pc, #52]	@ (800adb8 <__libc_init_array+0x38>)
 800ad84:	4c0d      	ldr	r4, [pc, #52]	@ (800adbc <__libc_init_array+0x3c>)
 800ad86:	1b64      	subs	r4, r4, r5
 800ad88:	10a4      	asrs	r4, r4, #2
 800ad8a:	2600      	movs	r6, #0
 800ad8c:	42a6      	cmp	r6, r4
 800ad8e:	d109      	bne.n	800ada4 <__libc_init_array+0x24>
 800ad90:	4d0b      	ldr	r5, [pc, #44]	@ (800adc0 <__libc_init_array+0x40>)
 800ad92:	4c0c      	ldr	r4, [pc, #48]	@ (800adc4 <__libc_init_array+0x44>)
 800ad94:	f000 f826 	bl	800ade4 <_init>
 800ad98:	1b64      	subs	r4, r4, r5
 800ad9a:	10a4      	asrs	r4, r4, #2
 800ad9c:	2600      	movs	r6, #0
 800ad9e:	42a6      	cmp	r6, r4
 800ada0:	d105      	bne.n	800adae <__libc_init_array+0x2e>
 800ada2:	bd70      	pop	{r4, r5, r6, pc}
 800ada4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ada8:	4798      	blx	r3
 800adaa:	3601      	adds	r6, #1
 800adac:	e7ee      	b.n	800ad8c <__libc_init_array+0xc>
 800adae:	f855 3b04 	ldr.w	r3, [r5], #4
 800adb2:	4798      	blx	r3
 800adb4:	3601      	adds	r6, #1
 800adb6:	e7f2      	b.n	800ad9e <__libc_init_array+0x1e>
 800adb8:	0800ae44 	.word	0x0800ae44
 800adbc:	0800ae44 	.word	0x0800ae44
 800adc0:	0800ae44 	.word	0x0800ae44
 800adc4:	0800ae48 	.word	0x0800ae48

0800adc8 <memcpy>:
 800adc8:	440a      	add	r2, r1
 800adca:	4291      	cmp	r1, r2
 800adcc:	f100 33ff 	add.w	r3, r0, #4294967295
 800add0:	d100      	bne.n	800add4 <memcpy+0xc>
 800add2:	4770      	bx	lr
 800add4:	b510      	push	{r4, lr}
 800add6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adde:	4291      	cmp	r1, r2
 800ade0:	d1f9      	bne.n	800add6 <memcpy+0xe>
 800ade2:	bd10      	pop	{r4, pc}

0800ade4 <_init>:
 800ade4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade6:	bf00      	nop
 800ade8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adea:	bc08      	pop	{r3}
 800adec:	469e      	mov	lr, r3
 800adee:	4770      	bx	lr

0800adf0 <_fini>:
 800adf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adf2:	bf00      	nop
 800adf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adf6:	bc08      	pop	{r3}
 800adf8:	469e      	mov	lr, r3
 800adfa:	4770      	bx	lr
